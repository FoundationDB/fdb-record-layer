name: Release

on:
  workflow_dispatch: # TODO restrict to main (if possible) OR treat all others as patch releases


jobs:
  # TOODO how do I ensure that nothing is running on a different commit
  get-update-type:
    # If the github.ref is refs/heads/main we want to do a standard release
    # If the github.ref is refs/heads/* we want to do a patch release
    # If the github.ref is some other ref, we want to fail
    # Selecting a tag github.ref becomes e.g.: refs/tags/4.1.9.0
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Calculate update type
        uses: actions/github-script@v7
        id: update-type
        with:
          script: |
            if (github.ref == "refs/head/main") {
                return "BUILD";
            } else if (github.ref.startsWith("refs/head/") {
                return "PATCH";
            } else {
                throw new Error("Target must be a patch branch or main, but was: " + github.ref);
            }
          result-encoding: string
      - name: Print update type
        shell: bash
        run: echo "${{steps.update-type.outputs.result}}"

  test:
    needs: [get-update-type]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Print update type
        shell: bash
        run: echo "${{steps.update-type.outputs.result}}"
      - name: Checkout sources
        uses: actions/checkout@v4.2.2
      - name: Release Test
        uses: ./actions/release-test
  mixed-mode-test:
    needs: [get-update-type]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.2.2
      - name: Mixed Mode Test
        uses: ./actions/mixed-mode-test
        with:
          update_type: BUILD
      # I think this _needs_ to be done at this level, rather than in the action
      # so that "mixed-mode-results" gets passed around correctly
      - name: Upload mixed mode results
        id: mixed_mode_results
        uses: actions/upload-pages-artifact@v3
        with:
          name: mixed-mode-results
          path: ./artifact
  publish:
    needs: [test, mixed-mode-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.2.2
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          fetch-tags: true
          # fetch all the history to make sure that we have the last release
          # I tried fetching part of the history, but I just couldn't get it to work, and fetching all still takes like 5s
          fetch-depth: 0
      # I think downloading needs to happen at this level so that it can
      # see the "mixed-mode-results" from above
      - name: Download mixed mode results
        uses: actions/download-artifact@v4
        with:
          name: mixed-mode-results
      - name: Publish
        uses: ./actions/release-publish
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          update_type: BUILD
          mixed_mode_results: ${{ needs.mixed-mode-test.outputs.results }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USER: ${{ secrets.MAVEN_USER }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      # Build documentation (We don't do this for patch releases)
      - name: Cache Python Environment
        uses: actions/cache@v4
        with:
          path: docs/sphinx/.venv
          key: ${{ runner.os }}-sphinx-python-${{ steps.setup-base.outputs.python-version }}-${{ hashFiles('docs/sphinx/requirements.txt') }}
      - name: Build Documentation Site
        uses: ./actions/run-gradle
        with:
          gradle_command: documentationSite -PreleaseBuild=true
# TODO ensure this uploads the updated release notes
      - name: Upload Documentation
        id: doc_upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/sphinx/.out/html/

  # deploy_docs is a separate job so that it can run with different
  # permissions from everything else, but it depends on publish so,
  # it will always run last
  deploy_docs:
    runs-on: ubuntu-latest
    needs: [publish]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.doc_upload.outputs.page_url }}
    steps:
      - name: Deploy Documentation
        uses: actions/deploy-pages@v4
