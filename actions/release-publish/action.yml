name: Tag and publish a release

inputs:
  gpg_private_key:
    description: 'GPG key for artifact signing'
    required: true
  gpg_passphrase:
    description: 'GPG passphrase for artifact signing'
    required: true
  update_type:
    description: 'One of MAJOR, MINOR, BUILD, PATCH'
    required: true
  mixed_mode_results:
    description: 'Rendered mixed mode results'
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure git
      shell: bash
      run: |
        git config --global user.name 'FoundationDB CI'
        git config --global user.email 'foundationdb_ci@apple.com'

    - name: Setup Base Environment
      uses: ./actions/setup-base-env
    - name: Get old version
      id: get_old_version
      shell: bash
      run: |
        echo "version=$(python build/versionutils.py gradle.properties)" >> "$GITHUB_OUTPUT"
    # Push a version bump back to main. There are failure scenarios that can result
    # in published artifacts but an erroneous build, so it's safer to bump the version
    # at the beginning
    - name: Increment version
      shell: bash
      run: python build/versionutils.py gradle.properties --increment --commit -u ${{ inputs.update_type }}
    - name: Get new version
      id: get_new_version
      shell: bash
      run: |
        echo "version=$(python build/versionutils.py gradle.properties)" >> "$GITHUB_OUTPUT"
    # We also want to push the tag, because that will be used for the next release's release notes
    - name: Create tag
      shell: bash
      run: git tag -m "Release ${{ steps.get_new_version.outputs.version }}" -f "${{ steps.get_new_version.outputs.version }}"

    # We want to do this before anything else, because if the later steps fail, we want to make sure that the full
    # change log includes all changes, even if they reference a release that was never actually published.
    - name: Update release notes
      shell: bash
      run: |
        python ./build/create_release_notes.py \
        --config ./build/release-notes-config.json \
        --release-notes-md docs/sphinx/source/ReleaseNotes.md \
        --skip-commit $(git log -n 1 --format=%H HEAD) \
        --repository ${{ github.repository }} \
        --commit \
        ${{ steps.get_old_version.outputs.version }} ${{ steps.get_new_version.outputs.version }}
    # We move the tag to after the release notes are updated so that later steps (i.e. sphinx) will pick up the udpated
    # release notes
    - name: Insert mixed mode results
      shell: bash
      run: python build/publish-mixed-mode-results.py ${{ steps.get_new_version.outputs.version }} --run-link ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} --markdown "${{ inputs.mixed_mode_results }}"
    - name: Move tag to HEAD
      shell: bash
      run: git tag -m "Release ${{ steps.get_new_version.outputs.version }}" -f "${{ steps.get_new_version.outputs.version }}"

    # push the changes to gradle.properties, the release notes, and the tag as one operation, so if it fails,
    # it will be as if the release never did anything
    - name: Push Version Update
      shell: bash
      run: git push origin HEAD "${{ steps.get_new_version.outputs.version }}"

    # Post release: Update various files which reference version
    # Updating the yaml files has to be done after the tests complete, or it will mark tests as failing that aren't
    # supported by the previous version.
    - name: Update YAML test file versions
      uses: ./actions/run-gradle
      with:
        gradle_command: updateYamsql -PreleaseBuild=true
    - name: Commit YAML updates
      shell: bash
      run: python ./build/commit_yamsql_updates.py "${{ steps.get_new_version.outputs.version }}"
    - name: Push Updates
      id: push_updates
      shell: bash
      run: git push origin
      # Continue the build (including downstream steps). If the push fails, we'll create a PR
      continue-on-error: true
    - name: Create Merge PR if conflict
      # Only create the PR if we've otherwise been successful, but the push failed. Note that
      # we're checking the .outcome of the push step, which is applied before continue-on-error.
      if: success() && steps.push_updates.outcome == 'failure'
      uses: peter-evans/create-pull-request@bb88e27d3f9cc69c8bc689eba126096c6fe3dded
      id: pr_on_conflict
      with:
        branch: release-build
        branch-suffix: timestamp
        title: "Updates for ${{ steps.get_new_version.outputs.version }} release"
        sign-commits: true
        body: |
          Updates from release for version ${{ steps.get_new_version.outputs.version }}. Conflicts during the build prevented automatic updating. Please resolve conflicts by checking out the current branch, merging, and then deleting this branch.

# TODO temporarily do not publish
#     - name: Publish Artifacts
#       uses: ./actions/run-gradle
#       with:
#         gradle_command: publish closeAndReleaseStagingRepositories -PreleaseBuild=true -PpublishBuild=true -PgithubPublish=true -PcentralPublish=true
#       env:
#         ORG_GRADLE_PROJECT_signingKey: ${{ inputs.gpg_private_key }}

    # Creating the PR can change the current branch. Explicitly check out the tag here for downstream builds
    - name: Revert to tag
      shell: bash
      run: git checkout "${{ steps.get_new_version.outputs.version }}"
