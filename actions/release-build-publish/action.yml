name: Build and publish release

inputs:
  gpg_private_key:
    description: 'GPG key for artifact signing'
    required: true
  gpg_passphrase:
    description: 'GPG passphrase for artifact signing'
    required: true

runs:
  using: "composite"
  steps:
    - name: Get version
      id: get_version
      shell: bash
      run: |
        echo "version=$(python build/versionutils.py gradle.properties)" >> "$GITHUB_OUTPUT"
    - name: Run Gradle Test
      uses: ./actions/gradle-test
      with:
        gradle_args: -PreleaseBuild=true -PpublishBuild=true
    - name: Publish Artifacts
      uses: ./actions/run-gradle
      with:
        gradle_command: publish closeAndReleaseStagingRepositories -PreleaseBuild=true -PpublishBuild=true -PgithubPublish=true -PcentralPublish=true
      env:
        ORG_GRADLE_PROJECT_signingKey: ${{ inputs.gpg_private_key }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ inputs.gpg_passphrase }}

    # Post release: Update various files which reference version
    - name: Update release notes
      shell: bash
      run: ARTIFACT_VERSION="${{ steps.get_version.outputs.version }}" ./build/update_release_notes.bash
    - name: Update YAML test file versions
      uses: ./actions/run-gradle
      with:
        gradle_command: updateYamsql -PreleaseBuild=true
    - name: Commit YAML updates
      shell: bash
      run: python ./build/commit_yamsql_updates.py "${{ steps.get_version.outputs.version }}"

    # Create and push the tag
    - name: Create tag
      shell: bash
      run: git tag -m "Release ${{ steps.get_version.outputs.version }}" -f "${{ steps.get_version.outputs.version }}"
    - name: Push tag
      shell: bash
      run: git push origin "${{ steps.get_version.outputs.version }}"
    - name: Push Updates
      id: push_updates
      shell: bash
      run: git push origin
      # Continue the build (including downstream steps). If the push fails, we'll create a PR
      continue-on-error: true
    - name: Create Merge PR if conflict
      if: success() && steps.push_updates.outcome == 'failure'
      uses: peter-evans/create-pull-request@bb88e27d3f9cc69c8bc689eba126096c6fe3dded
      id: pr_on_conflict
      with:
        branch: release-build
        branch-suffix: timestamp
        title: "Updates for ${{ steps.get_version.outputs.version }} release"
        sign-commits: true
        body: |
          Updates from release for version ${{ steps.get_version.outputs.version }}. Conflicts during the build prevented automatic updating. Please resolve conflicts by checking out the current branch, merging, and then deleting this branch.

    # Creating the PR can change the current branch. Explicitly check out the tag here for downstream builds
    - name: Revert to tag
      shell: bash
      run: git checkout "${{ steps.get_version.outputs.version }}"
