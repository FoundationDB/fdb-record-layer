name: Build and publish release

inputs:
  gpg_private_key:
    description: 'GPG key for artifact signing'
    required: true
  gpg_passphrase:
    description: 'GPG passphrase for artifact signing'
    required: true
  update_type:
    description: 'One of MAJOR, MINOR, BUILD, PATCH'
    required: true

runs:
  using: "composite"
  steps:
    - name: Get old version
      id: get_old_version
      shell: bash
      run: |
        echo "version=$(python build/versionutils.py gradle.properties)" >> "$GITHUB_OUTPUT"
    # Push a version bump back to main. There are failure scenarios that can result
    # in published artifacts but an erroneous build, so it's safer to bump the version
    # at the beginning
    - name: Increment version
      run: python build/versionutils.py gradle.properties --increment --commit -u ${{ inputs.update_type }}
    - name: Get new version
      id: get_new_version
      shell: bash
      run: |
        echo "version=$(python build/versionutils.py gradle.properties)" >> "$GITHUB_OUTPUT"

    # Create and push the tag
    - name: Create tag
      shell: bash
      run: git tag -m "Release ${{ steps.get_new_version.outputs.version }}" -f "${{ steps.get_new_version.outputs.version }}"

    # We want to do this before anything else, because if the later steps fail, we want to make sure that the full
    # change log includes all changes. If a release fails, we should probably update the release notes manually after
    # the fact, but this is less likely than the build or tests or publishing of the release failing.
    - name: Update release notes
      shell: bash
      run: |
        python ./build/create_release_notes.py \
        --config ../fdb-record-layer/build/release-notes-config.json \
        --release-notes-md docs/ReleaseNotes.md \
        --commit
        ${{ steps.get_old_version.outputs.version }} ${{ steps.get_new_version.outputs.version }}

    # push the changes to gradle.properties, the release notes, and the tag as one commit
    - name: Push Version Update
      run: git push origin HEAD "${{ steps.get_new_version.outputs.version }}"

    - name: Run Gradle Test
      uses: ./actions/gradle-test
      with:
        gradle_args: -PreleaseBuild=true -PpublishBuild=true
    - name: Publish Artifacts
      uses: ./actions/run-gradle
      with:
        gradle_command: publish closeAndReleaseStagingRepositories -PreleaseBuild=true -PpublishBuild=true -PgithubPublish=true -PcentralPublish=true
      env:
        ORG_GRADLE_PROJECT_signingKey: ${{ inputs.gpg_private_key }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ inputs.gpg_passphrase }}

    # Post release: Update various files which reference version
    # Note: this depends on the new version being tagged
    # There is a risk here, if we have a failed release, the file will be updated, and the tag created, and this will
    # do the new one, we won't end up with all of the release notes. i.e.
    # If we start at 4.1.4.0
    # commit change1
    # release 4.1.5.0 fails
    # commit change2
    # release 4.1.6.0 succeeds
    # The second release will only contain change2, and we won't automatically include 
    - name: Update YAML test file versions
      uses: ./actions/run-gradle
      with:
        gradle_command: updateYamsql -PreleaseBuild=true
    - name: Commit YAML updates
      shell: bash
      run: python ./build/commit_yamsql_updates.py "${{ steps.get_new_version.outputs.version }}"

    - name: Push Updates
      id: push_updates
      shell: bash
      run: git push origin
    - name: Create Merge PR if conflict
      if: failure() && steps.push_updates.conclusion == 'failure'
      uses: peter-evans/create-pull-request@bb88e27d3f9cc69c8bc689eba126096c6fe3dded
      id: pr_on_conflict
      with:
        branch: release-build
        branch-suffix: timestamp
        title: "Updates for ${{ steps.get_new_version.outputs.version }} release"
        sign-commits: true
        body: |
          Updates from release for version ${{ steps.get_new_version.outputs.version }}. Conflicts during the build prevented automatic updating. Please resolve conflicts by checking out the current branch, merging, and then deleting this branch.
