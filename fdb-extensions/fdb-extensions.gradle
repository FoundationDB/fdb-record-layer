/*
 * fdb-extensions.gradle
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-test-fixtures'
apply from: rootProject.file('gradle/publishing.gradle')

dependencies {
    api(project(":fdb-java-annotations")) {
        exclude(group: "com.squareup", module: "javapoet")
    }
    api(libs.fdbJava)
    implementation(libs.guava)
    implementation(libs.half4j)
    implementation(libs.slf4j.api)
    compileOnly(libs.jsr305)

    testImplementation project(':fdb-test-utils')
    testImplementation(libs.bundles.test.impl)
    testImplementation(libs.snakeyaml)
    testRuntimeOnly(libs.bundles.test.runtime)
    testCompileOnly(libs.bundles.test.compileOnly)
    testAnnotationProcessor(libs.autoService)

    testFixturesImplementation(libs.bundles.test.impl)
    testFixturesImplementation(libs.snakeyaml)
    testFixturesCompileOnly(libs.bundles.test.compileOnly)
    testFixturesImplementation(libs.slf4j.api)
    testFixturesAnnotationProcessor(libs.autoService)
}

def siftSmallFile = layout.buildDirectory.file('downloads/siftsmall.tar.gz')
def extractDir = layout.buildDirectory.dir("extracted")

// Task that downloads the CSV exactly once unless it changed
tasks.register('downloadSiftSmall', de.undercouch.gradle.tasks.download.Download) {
    src 'https://huggingface.co/datasets/vecdata/siftsmall/resolve/3106e1b83049c44713b1ce06942d0ab474bbdfb6/siftsmall.tar.gz'
    dest siftSmallFile.get().asFile
    onlyIfModified true
    tempAndMove true
    retries 3
}

tasks.register('extractSiftSmall', Copy) {
    dependsOn 'downloadSiftSmall'
    from(tarTree(resources.gzip(siftSmallFile)))
    into extractDir

    doLast {
        println "Extracted files into: ${extractDir.get().asFile}"
        fileTree(extractDir).visit { details ->
            if (!details.isDirectory()) {
                println " - ${details.file}"
            }
        }
    }
}

test {
    dependsOn tasks.named('extractSiftSmall')
    inputs.dir extractDir
}

publishing {
    publications {
        library(MavenPublication) {
            pom {
                description = 'Extensions to the FoundationDB Java API.'
            }
        }
    }
}
