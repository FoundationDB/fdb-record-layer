/*
 * continuation.proto
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Continuation support for the GRPC client-server implementation.
// This is modeled after the internal continuation.
// The model has its own "reason" so that it can communicate that at the API level, as well as a wrapper around any
// internal state it needs to communicate to the server in order to recreate the internal continuation instance.
syntax = "proto3";
package grpc.relational.jdbc.v1;
option java_multiple_files = true;
// Put the generated classes into grpc subpackage so I can exclude
// these classes from checkstyle and spotbug checks.
option java_package = "com.apple.foundationdb.relational.jdbc.grpc.v1";
option java_outer_classname = "RpcContinuationProto";

enum ResultSetContinuationReason {
  // Reached a transaction limit, such as byte scan limit, row scan limit or time limit.
  TRANSACTION_LIMIT_REACHED = 0;
  // Reached a query execution limit, such as the maximum number of rows allowed in a result set.
  QUERY_EXECUTION_LIMIT_REACHED = 1;
  // All rows were returned.
  CURSOR_AFTER_LAST = 2;
}

message RpcContinuation {
  int32 version = 1; // Version of the continuation model; can be used to denote support for continuation features over time
  bytes internal_state = 2; // Wrapper around any server-side continuation returned
  ResultSetContinuationReason reason = 3;
}
