#!/usr/bin/env python3

#
# publish_mixed_mode_results.py
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2015-2025 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This script generates a list of mixed-mode testing results generated by the task
# ./gradlew mixedModeTest

import argparse
import subprocess
import sys

def run(command):
    try:
        process = subprocess.run(command, check=True, capture_output=True, text=True)
        return process.stdout
    except subprocess.CalledProcessError as e:
        print("Failed: " + str(e.cmd))
        print(e.stdout)
        print(e.stderr)
        exit(e.returncode)

def get_results(results_path):
    results = {}
    with open(results_path) as f:
        for line in f:
            split = line.strip().split(' ')
            if len(split) != 2:
                raise Exception("Line is not valid: " + line)
            result = split[0]
            version = split[1]
            if result == 'FAILURE':
                results[version] = result
            elif result == 'SUCCESS' and version not in results:
                results[version] = result
    return results

def emoji(result_word):
    if result_word == 'FAILURE':
        return '❌'
    elif result_word == 'SUCCESS':
        return '✅'
    else:
        raise Exception('Invalid result type: ' + result_word)

def generate_markdown(version, results, header_size):
    sorted_keys = sorted(results.keys(), key=lambda raw: [int(part) for part in raw.split('.')])

    return header_size + " Mixed Mode Test Results\n\nMixed mode testing run against the following previous versions:\n" + \
        ', '.join([emoji(results[version]) + '`' + version + '`' for version in sorted_keys])

def update_release_notes_file(markdown, version, filename):
    with open(filename, 'r') as fin:
        lines = fin.read().split('\n')
    i = 0
    target = '<!-- MIXED_MODE_RESULTS ' + version + ' PLACEHOLDER -->'
    while i < len(lines) and not lines[i].startswith(target):
        i+= 1
    if i == len(lines):
        raise Exception('Could not find placeholder in release notes file')
    return '\n'.join(lines[:i]
                     + [markdown]
                     + lines[i+1:])

def commit_updates(filename, version):
    subprocess.run(['git', 'commit', '-m', "Recording " + version + "mixed mode test results in release notes", filename],
                           check=True)

def main(argv):
    '''Process the output of a mixedModeTest run and convert it into a short markdown'''
    parser = argparse.ArgumentParser()
    parser.add_argument('--results-path', help='Path to the results', default='.out/reports/mixed-mode-results.log')
    parser.add_argument('--release-notes', help='If provided, the results will be injected into this file')
    parser.add_argument('--header-size', help='Markdown header level (e.g. # or ##)', default='####')
    parser.add_argument('--run-link', help='A link to the test run that generated the results')
    parser.add_argument('--commit', action='store_true', default=False, help='Commit the updates to the release notes')
    parser.add_argument('version', help='Version of the server that was tested')
    args = parser.parse_args(argv)

    markdown = generate_markdown(args.version, get_results(args.results_path), args.header_size)
    if args.run_link is not None:
        markdown = markdown + "\n\n[See full test run](" + args.run_link +")"
    if args.release_notes is None:
        print(markdown)
    else:
        new_content = update_release_notes_file(markdown, args.version, args.release_notes)
        with open(args.release_notes, 'w') as fout:
            fout.write(new_content)
        if args.commit:
            commit_updates(args.release_notes, args.version)
        print(f'Updated {args.release_notes} with test results for {args.version}')

if __name__ == '__main__':
    main(sys.argv[1:])
