/*
 * BuildVersion.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.relational.util;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * Hosts the content of the version.properties file written by the build
 * into a generated file 'versions.properties' in the fdb-relational-api module.
 * Contents of file look like this:
 *   # Generated by fdb-relational-api build.
 *   name=fdb-relational-layer
 *   version=22.10.10.7be747b-SNAPSHOT
 *   gitHash=7be747b148b5089c4bf57cf3c87513a1ee1b1e2e
 *   branch=api
 *   url='https://github.com/FoundationDB/fdb-record-layer/'
 *   user=stack
 *   buildtime=2022-10-11T04:59:47.480946Z
 * Below are accessors for the content and some utility methods to get
 * major or minor parts of version string.
 * Obtain the singleton instance by calling {@link #getInstance()}}
 */
public final class BuildVersion {
    private static BuildVersion instance;
    private static final String VERSIONS_PROPERTIES_FILENAME = "version.properties";
    private final Properties versionProperties = new Properties();

    private BuildVersion() {
        try (InputStream stream = Thread.currentThread().getContextClassLoader()
                .getResourceAsStream(VERSIONS_PROPERTIES_FILENAME)) {
            this.versionProperties.load(stream);
        } catch (IOException e) {
            // All bets are off if we can't read our versions file.
            throw new RuntimeException("Failed load of " + VERSIONS_PROPERTIES_FILENAME, e);
        }
    }

    public static synchronized BuildVersion getInstance() {
        if (instance == null) {
            instance = new BuildVersion();
        }
        return instance;
    }

    public String getURL() {
        return this.versionProperties.getProperty("url");
    }

    public String getVersion() {
        return this.versionProperties.getProperty("version");
    }

    public String getGitHash() {
        return this.versionProperties.getProperty("gitHash");
    }

    /**
     * Get a piece of the driver version string.
     * Index == 0 if we want the 'major' part of version string and index == 1
     * if we want the minor part of the version string.
     * @return sub-version.
     * @throws ArrayIndexOutOfBoundsException Thrown when passed a nonsense index.
     */
    static int parseDriverVersion(String version, int index) {
        return Integer.parseInt(version.split("\\.")[index]);
    }

    /**
     * Utility for returning major part of {@link #getVersion()}:
     * e.g. if version is 1.2.3, this method will return '1'.
     * @return major version.
     */
    public int getMajorVersion() {
        return getMajorVersion(getVersion());
    }

    /**
     * Utility for finding major part of passed version.
     * @param version full version
     * @return major sub-version.
     */
    public int getMajorVersion(String version) {
        return parseDriverVersion(version, 0 /*0 means first part of version string, the major part*/);
    }

    /**
     * Utility for returning minor part of {@link #getVersion()}:
     * e.g. if version is 1.2.3, this method will return '2'.
     * @return minor version.
     */
    public int getMinorVersion() {
        return getMinorVersion(getVersion());
    }

    /**
     * Utility for finding minor part of passed version.
     * @param version full version
     * @return minor sub-version.
     */
    public int getMinorVersion(String version) {
        return parseDriverVersion(version, 1 /*1 means second part of version string, the major part*/);
    }
}
