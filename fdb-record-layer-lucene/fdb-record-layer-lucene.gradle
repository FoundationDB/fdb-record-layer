/*
 * fdb-record-layer-lucene.gradle
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2021 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: rootProject.file('gradle/proto.gradle')
apply from: rootProject.file('gradle/publishing.gradle')

def coreProject = ":${ext.coreProjectName}"
dependencies {
    api project(coreProject)
    api "org.apache.lucene:lucene-core:${luceneVersion}"
    api "org.apache.lucene:lucene-analyzers-common:${luceneVersion}"
    implementation "org.apache.lucene:lucene-queryparser:${luceneVersion}"
    implementation "org.apache.lucene:lucene-suggest:${luceneVersion}"
    implementation "org.apache.lucene:lucene-highlighter:${luceneVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation project(path: coreProject, configuration: 'tests')
    testCompileOnly "com.google.code.findbugs:jsr305:${jsr305Version}"
    compileOnly "com.google.auto.service:auto-service:undefined"
    annotationProcessor "com.google.auto.service:auto-service:undefined"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    testRuntimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
    testImplementation project(path: ':fdb-extensions', configuration: 'tests')
    testCompileOnly "com.google.auto.service:auto-service:undefined"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testAnnotationProcessor "com.google.auto.service:auto-service:undefined"
}

if (protoMajorVersion == '2') {
    protobuf {
        generateProtoTasks {
            all().each { task ->
                task.doLast {
                    task.outputs.getFiles().forEach {
                        // Suppress redundant ByteString casting in proto-generated code in proto2
                        ant.replace(dir: it, includes: "**/LuceneContinuationProto.java",
                                token: "public int getSerializedSize() {\n",
                                value: "@SuppressWarnings(\"cast\") public int getSerializedSize() {\n",
                        )
                        ant.replace(dir: it, includes: "**/LuceneContinuationProto.java",
                                token: "public void writeTo(com.google.protobuf.CodedOutputStream output)\n",
                                value: "@SuppressWarnings(\"cast\") public void writeTo(com.google.protobuf.CodedOutputStream output)\n",
                        )
                    }
                }
            }
        }
    }
}

def skipFDB = System.getenv('SKIP_FDB_TESTS') != null && System.getenv('SKIP_FDB_TESTS') == 'true'
def skipSlow = System.getenv('SKIP_SLOW_TESTS') != null && System.getenv('SKIP_SLOW_TESTS') == 'true'
test {
    useJUnitPlatform {
        if (skipFDB) {
            excludeTags 'RequiresFDB'
        }
        if (skipSlow) {
            excludeTags 'Slow'
        }

        // We need the destructive tests to be available in the 'test' task, so that IntelliJ's gradle test runner can
        // find them. However, we _only_ want to run them as part of the 'test' task if we're running from IntelliJ.
        // This isn't a great way to detect it, but it's the only one I could find. If this ever breaks, I'd look here first.
        if (System.getenv('XPC_SERVICE_NAME') == null || !(System.getenv('XPC_SERVICE_NAME').contains("intellij") || System.getenv('XPC_SERVICE_NAME').contains("idea"))) {
            excludeTags 'WipesFDB'
            excludeTags 'Performance'
        }
    }
}

publishing {
    publications {
        library(MavenPublication) {
            pom {
                description = 'Lucene index support for fdb-record-layer'
            }
        }
    }
}
