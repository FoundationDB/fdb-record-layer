/*
 * testing.gradle
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'jacoco'
// configure for test, other *Test are configured below
jacoco {
    toolVersion = libs.versions.jacoco.get()
}
jacocoTestReport {
    reports {
        xml.required = true
    }
}

test {
    useJUnitPlatform {
        excludeTags 'WipesFDB'
        excludeTags 'AutomatedTest'
        excludeEngines 'auto-test'
    }
}

task destructiveTest(type: Test) {
    useJUnitPlatform {
        includeTags 'WipesFDB'
        maxParallelForks = 1
    }
    reports {
        junitXml.destination = file("${buildDir}/test-results/destructive")
    }
}

task performanceTest(type: Test) {
    useJUnitPlatform {
        includeTags 'Performance'
        enableAssertions = false
    }
}

task quickTest(type: Test) {
    systemProperties["tests.runQuick"] = true
    useJUnitPlatform {
        excludeTags 'WipesFDB'
    }
}

def getFullDisplayName(descriptor) {
    def fullName = ""
    fullName = descriptor.displayName
    descriptor = descriptor.parent
    while (descriptor != null) {
        // don't display this or any of the parents. Let's assume that nobody ever
        // sets the display name in code to start with "Gradle Test Executor".
        // it appears to be suffixed with a number, but I didn't investigate why
        if (descriptor.displayName.startsWith("Gradle Test Executor")) {
            break
        }
        def openParen = descriptor.displayName.indexOf("(")
        // in the case where someone sets the display name to include the method name, it's best
        // to skip the method name itself, e.g.:
        // LuceneIndexMaintenanceTest > randomizedRepartitionTest(boolean, boolean, boolean, int, int, int, long) > randomizedRepartitionTest(true, false, false, 13, 3, 20, 9237590782644) STARTED
        // LuceneIndexMaintenanceTest > randomizedRepartitionTest(boolean, boolean, boolean, int, int, int, long) > randomizedRepartitionTest(true, false, false, 13, 3, 20, 9237590782644) SUCCESS (1985ms)
        if (openParen < 0 || !fullName.startsWith(descriptor.displayName.substring(0, openParen))) {
            fullName = "${descriptor.displayName}" + " > " + fullName
        }
        descriptor = descriptor.parent
    }
    return fullName
}

def configureTestTask = { propertyPrefix, task ->
    def handled = [propertyPrefix + '.ignoreFailures',
                   propertyPrefix + '.debug',
                   propertyPrefix + '.single',
                   propertyPrefix + '.maxParallelForks',
                   propertyPrefix + '.exclude',
                   propertyPrefix + '.forkEvery']
    System.properties.each { prop ->
        def prefix = "${propertyPrefix}.sysProp."
        if (!prop.key.startsWith(prefix.toString()))
            return;
        def setkey = prop.key.substring(prefix.length())
        task.systemProperties[setkey] = prop.value
        logger.debug "Set system property ${setkey} = ${prop.value} on ${propertyPrefix}"
        handled.add(prop.key)
    }

    def tmpdir = file("$buildDir/tmp-${task.name}")
    task.doFirst {
        delete tmpdir
        tmpdir.mkdirs()
    }
    task.systemProperties['java.io.tmpdir'] = tmpdir.absolutePath
    task.systemProperties['junit.jupiter.extensions.autodetection.enabled'] = 'true'

    // configure test logging
    task.systemProperties['log4j2.configurationFile'] = rootProject.file('gradle/scripts/log4j-test.properties').toURI()
    task.systemProperties['mme.app.useLog4jPropertyConfigurator'] = 'false'

    task.maxParallelForks = Integer.getInteger(propertyPrefix + '.maxParallelForks', 1)
    task.forkEvery = Integer.getInteger(propertyPrefix + '.forkEvery', 0)

    task.debug = Boolean.getBoolean(propertyPrefix + '.debug')
    task.ignoreFailures = Boolean.getBoolean(propertyPrefix + '.ignoreFailures')

    def excludes = System.getProperty(propertyPrefix + '.exclude')
    if (excludes != null) {
        task.exclude excludes
    }

    if (task.name != 'performanceTest') {
        // Configure whether or not tests will validate that asyncToSync isn't being called in async
        // context.  See BlockingInAsyncDetection class for details on values.
        // disable BLOCKING_DETECTION to better simulate performance
        task.systemProperties["com.apple.foundationdb.record.blockingInAsyncDetection"] =
            System.getenv('BLOCKING_DETECTION') ?: "IGNORE_COMPLETE_EXCEPTION_BLOCKING"
    }

    def reportsDirProperty = "${task.name}.reportsDir".toString()
    handled.add(reportsDirProperty)
    def reportsDir = System.getProperty(reportsDirProperty)
    if (reportsDir != null) {
        task.reports.junitXml.destination = reportsDir
    }

    System.properties.each { prop ->
        if (prop.key.startsWith(propertyPrefix + '.') && !handled.contains(prop.key)) {
            logger.warn "Unknown system property that looks like it was intended to configure this task: ${prop.key}=${prop.value}"
        }
    }
}

tasks.withType(Test) { theTask ->
    configureTestTask('allTest', theTask)
    configureTestTask(theTask.name, theTask)
    testLogging {
        events 'failed'
        exceptionFormat = 'full'
    }
    beforeTest { descriptor -> 
        println "${Instant.now()} ${getFullDisplayName(descriptor)} STARTED"
    } 
    afterTest { descriptor, result ->
        def duration = String.format(Locale.ROOT, "%,d", result.endTime - result.startTime)
        println "${Instant.now()} ${getFullDisplayName(descriptor)} ${result.resultType} (${duration}ms)"
        println()
    }
    reports {
        junitXml.outputPerTestCase = true
    }
    // Don't gather coverage for performance tests
    if (theTask.name != 'performanceTest') {
        if (theTask.name != 'test') { // jacocoTestReport gets created automatically
            task "jacoco${theTask.name.capitalize()}Report"(type: JacocoReport) {
                executionData theTask
                sourceDirectories.from = project.files(project.sourceSets.test.allSource.srcDirs)
                classDirectories.from = project.sourceSets.test.output
                def htmlReportDir = project.reporting.file("jacoco/${theTask.name}/html")
                def xmlReportFile = project.reporting.file("jacoco/${theTask.name}/jacoco.xml")
                reports {
                    xml.required = true
                    html.destination = htmlReportDir
                    xml.destination = xmlReportFile
                }
                doLast {
                    println("See jacoco report at: file://${htmlReportDir.toURI().path}index.html")
                }
            }
        }
        theTask.finalizedBy("jacoco${theTask.name.capitalize()}Report")
    }
}

tasks.withType(Test).configureEach { task ->
    if (task.name != 'performanceTest') {
        // Configure whether or not tests will validate that asyncToSync isn't being called in async
        // context.  See BlockingInAsyncDetection class for details on values.
        // disable BLOCKING_DETECTION to better simulate performance
        task.systemProperties["com.apple.foundationdb.record.blockingInAsyncDetection"] =
                System.getenv('BLOCKING_DETECTION') ?: "IGNORE_COMPLETE_EXCEPTION_BLOCKING"

        // setup tag inclusion/exclusion
        if (project.hasProperty('tests.skipFDB')) {
            task.testFramework.options.excludeTags.add('RequiresFDB')
        }
        if (project.hasProperty('tests.skipSlow')) {
            task.testFramework.options.excludeTags.add('Slow')
            systemProperties["junit.jupiter.execution.timeout.default"] = "2s"
        } else {
            systemProperties["junit.jupiter.execution.timeout.default"] = "5m"
        }
        if (project.hasProperty('tests.nightly')) {
            systemProperties['tests.nightly'] = 'true'
        } else {
            task.testFramework.options.excludeTags.add('SuperSlow')
        }
        if (!project.hasProperty('tests.includeRandom')) {
            task.testFramework.options.excludeTags.add('Random')
        } else {
            if (!project.hasProperty('randomTestsLocale')) {
                def random = new Random()
                def availableLocales = Locale.getAvailableLocales()
                rootProject.ext.randomTestsLocale = availableLocales[random.nextInt(availableLocales.size())]
                logger.warn("Running tests with locale: ${rootProject.ext.randomTestsLocale}")
            }
            task.systemProperty('user.language', rootProject.ext.randomTestsLocale.language)
            task.systemProperty('user.country', rootProject.ext.randomTestsLocale.country)
            systemProperties['tests.includeRandom'] = 'true'
        }
        if (project.hasProperty('tests.iterations')) {
            systemProperties['tests.iterations'] = project.getProperty('tests.iterations')
        }
        task.testFramework.options.excludeTags.add('Performance')

        if (task.name == 'test') {
            task.systemProperty('junit.jupiter.execution.parallel.enabled', 'false')
            task.systemProperty('junit.jupiter.execution.parallel.mode.default', 'same_thread')
            task.systemProperty('junit.jupiter.execution.parallel.mode.classes.default', 'concurrent')
        }
    }

}

task testJar(type: Jar, dependsOn: testClasses) {
    group = 'Build'
    description = 'Build a jar file of test classes as an exported artifact'
    archiveClassifier = 'test'
    from sourceSets.test.output
}

configurations {
    tests {
        extendsFrom testRuntimeOnly
    }
}

artifacts {
    tests testJar
}

task quickCheck {
    group = 'Verification'
    description = 'Perform fast build verification'

    dependsOn testClasses
}
