/*
 * coverage.gradle
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "jacoco"

configurations {
    jacocoAgent
}

dependencies {
    jacocoAgent 'org.jacoco:org.jacoco.agent:${jacocoVersion}:runtime'
}

def dataDir = file("$buildDir/jacoco-bin")

task enableJacocoAgent {
    doFirst {
        dataDir.mkdirs()
        runlpStartapps.environment['JACOCO_AGENT_JAR'] = configurations.jacocoAgent.asPath
        runlpStartapps.environment['JACOCO_DATA_DIR'] = dataDir.absolutePath
    }
}

def coverageSrcDir = file("$buildDir/coverage-src")
def coverageClassesDir = file("$buildDir/coverage-classes")

task cleanJacocoData(type: Delete) {
    delete dataDir
    delete coverageSrcDir
    delete coverageClassesDir
}
clean.dependsOn cleanJacocoData

//unlpStartapps.mustRunAfter enableJacocoAgent
//runlpStartapps.mustRunAfter cleanJacocoData

def mergeExecFiles = task mergeJacocoFiles (type: JacocoMerge) {
    destinationFile = file("$buildDir/jacoco-bin/merge.exec")
    onlyIf { task ->
        task.executionData &&
            task.executionData.size() > 0 &&
            task.executionData.any { it.exists() }
    }
}

def jacocoReportTask = task jacocoReport(type: JacocoReport) {
    description = "Produce a report from Jacoco test results"
    group = "Verification"

    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }

    classDirectories.from(files(coverageClassesDir))
    sourceDirectories.from(files(coverageSrcDir))
    executionData.from(fileTree(dataDir))
    dependsOn mergeExecFiles
}

subprojects {
    afterEvaluate { p ->

        if (p.hasProperty('excludeFromCoverage') && p.excludeFromCoverage) {
            return
        }

        def excludeFiles = p.hasProperty('excludeFilesFromCoverage') ? p.excludeFilesFromCoverage : null

        p.tasks.withType(Test) { testTask ->
            jacocoReportTask.mustRunAfter testTask

            testTask.doLast {
                if (testTask.jacoco.destinationFile.exists()) {
                    mergeExecFiles.executionData testTask.jacoco.destinationFile
                    logger.info "Adding UnitTest dest " + testTask.jacoco.destinationFile
                }
            }
        }

        p.task('copyCoverageClasses', type: Copy) {
            into coverageClassesDir
            from(sourceSets.main.output) {
                include '**/*.class'
                if (excludeFiles != null) {
                    exclude excludeFiles
                }
                exclude { details -> details.file.name.contains('Proto$') || details.file.name.contains('Proto.class') }
            }
        }

        p.task('copyCoverageSources', type: Copy) {
            into coverageSrcDir
            from(sourceSets.main.java) {
                if (excludeFiles != null) {
                    exclude excludeFiles
                }
            }
        }

        def copyCoverageFilesTask = p.task('copyCoverageFiles', dependsOn: ['copyCoverageSources', 'copyCoverageClasses'])
        jacocoReportTask.dependsOn copyCoverageFilesTask, mergeExecFiles
    }
}

jacoco {
    toolVersion = jacocoVersion
}
check.dependsOn tasks.withType(JacocoReport)
