/*
 * proto.gradle
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.google.protobuf'

sourceSets {
    main {
        java {
            srcDir 'protogen/main/java'
        }
    }
    test {
        proto {
            srcDir "src/test/proto${protoMajorVersion}"
        }
        java {
            srcDir 'protogen/test/java'
        }
    }
}

configurations {
    compileProtoPath {
        // The default generated by com.google.protobuf.gradle.ProtobufPlugin.createCompileProtoPathConfiguration
        // forgets api.
        extendsFrom api, compileOnly, implementation
    }
}

protobuf {
    generatedFilesBaseDir = "${projectDir}/protogen"
    clean {
        delete generatedFilesBaseDir
    }
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
        def osName = providers.systemProperty("os.name").forUseAtConfigurationTime().getOrElse("")
        def osArch = providers.systemProperty("os.arch").forUseAtConfigurationTime().getOrElse("")
        if ((osName == "macOS" || osName == "Mac OS X") && osArch == "aarch64" && protobufVersion == protobuf2Version) {
            // There is not a macOS aarch64 build of the proto2 compiler. Download the x86_64 version instead, which
            // will be run in emulation on that architecture. This is fine because this is used only to generate Java
            // code; it is not directly linked against.
            artifact = "com.google.protobuf:protoc:${protobufVersion}:osx-x86_64"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.addIncludeDir(files("${projectDir}/src/main/proto/include"))
            task.addIncludeDir(files("${projectDir}/src/main/proto${protoMajorVersion}/include"))
            if (task.name != 'generateProto') {
                // test protos likely include both main protos and their dependencies.
                task.addIncludeDir(files("${projectDir}/src/main/proto"))
                task.addIncludeDir(files("${projectDir}/.out/extracted-include-protos/main"))
            }

            if (protoMajorVersion == '3') {
                // When generating from syntax = proto2 files, protoc can generate methods that reference
                // the deprecated PARSER field. Suppress these warnings on generated code
                // See: https://github.com/protocolbuffers/protobuf/issues/7271
                task.doLast {
                    task.outputs.getFiles().forEach {
                        ant.replace(dir: it, includes: "**/*.java",
                                token: "public static final class ",
                                value: "@SuppressWarnings(\"deprecation\") public static final class ",
                        )
                    }
                }
            }
        }
    }
}

// Configure the published jar to include any external protos
jar {
    from ("${projectDir}/src/main/proto/include") {
        include '**/*.proto'
    }
    from ("${projectDir}/src/main/proto${protoMajorVersion}/include") {
        include '**/*.proto'
    }
}
