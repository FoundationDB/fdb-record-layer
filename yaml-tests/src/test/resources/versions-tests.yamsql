#
# versions-tests.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
setup:
  connect: "jdbc:embed:/__SYS?schema=CATALOG"
  steps:
    - query: drop schema template if exists versions_tests_template
    - query: create schema template versions_tests_template
        create table t1(id bigint, col1 bigint, col2 bigint, primary key(id))
        create index i1 as select col1 from t1
        create index version_index as select "__ROW_VERSION" from t1
        create index grouped_version_index as select col1, "__ROW_VERSION" from t1 order by col1, "__ROW_VERSION"
        with options (store_row_versions=true)
    - query: drop database if exists /FRL/VERSIONS_YAML
    - query: create database /FRL/VERSIONS_YAML
    - query: create schema /FRL/VERSIONS_YAML/test with template versions_tests_template
---
setup:
  connect: "jdbc:embed:/FRL/VERSIONS_YAML?schema=TEST"
  steps:
    # Insert the odd rows first
    - query: INSERT INTO T1 VALUES
        (1, 10, 1),
        (3, 10, 3),
        (5, 10, 5),
        (7, 20, 7),
        (9, 20, 9),
        (11, 20, 11),
        (13, 20, 13)
    # Then insert the even rows so that they are given higher row versions
    - query: INSERT INTO T1 VALUES
          (2, 10, 2),
          (4, 10, 4),
          (6, 20, 6),
          (8, 20, 8),
          (10, 20, 10),
          (12, 20, 12)
---
test_block:
  connect: "jdbc:embed:/FRL/VERSIONS_YAML?schema=TEST"
  options:
    mode: randomized
    repetition: 2
    check_cache: true
  tests:
    -
      - query: select "__ROW_VERSION" as version, t1.col2 from t1 where col1 = 10;
      - explain: "map(Index(I1 [EQUALS promote(@0 as LONG)])[(version(T1) as VERSION, $T1.COL2 as COL2)])"
      - result: [{VERSION: !not_null _, COL2: 1}, {VERSION: !not_null _, COL2: 2}, {VERSION: !not_null _, COL2: 3}, {VERSION: !not_null _, COL2: 4}, {VERSION: !not_null _, COL2: 5}]
    -
      # Do not include __ROW_VERSION (as a pseudo-column) in *
      - query: select t1.* from t1 where col1 = 10;
      - explain: "Index(I1 [EQUALS promote(@0 as LONG)])"
      - result: [{ID: 1, COL1: 10, COL2: 1}, {ID: 2, COL1: 10,  COL2: 2}, {ID: 3, COL1: 10, COL2: 3}, {ID: 4, COL1: 10, COL2: 4}, {ID: 5, COL1: 10, COL2: 5}]
    -
      # Get version column from sub-select
      - query: select s.version, s.col2 from (select "__ROW_VERSION" as version, t1.col2 as col2 from t1 where col1 = 10) AS s;
      - explain: "map(map(Index(I1 [EQUALS promote(@0 as LONG)])[(version(T1) as VERSION, $T1.COL2 as COL2)])[($S.VERSION as VERSION, $S.COL2 as COL2)])"
      - result: [{VERSION: !not_null _, COL2: 1}, {VERSION: !not_null _, COL2: 2}, {VERSION: !not_null _, COL2: 3}, {VERSION: !not_null _, COL2: 4}, {VERSION: !not_null _, COL2: 5}]
    -
      # In inner select, the pseudo-column is selected but not renamed. Then, in the outer select, the column is read and returned, and a new version(S) value is *not* created
      - query: select s."__ROW_VERSION", s.col2 from (select "__ROW_VERSION", t1.col2 from t1 where col1 = 10) AS s;
      - explain: "map(map(Index(I1 [EQUALS promote(@0 as LONG)])[(version(T1) as __ROW_VERSION, $T1.COL2 as COL2)])[($S.__ROW_VERSION as __ROW_VERSION, $S.COL2 as COL2)])"
      - result: [{__ROW_VERSION: !not_null _, COL2: 1}, {__ROW_VERSION: !not_null _, COL2: 2}, {__ROW_VERSION: !not_null _, COL2: 3}, {__ROW_VERSION: !not_null _, COL2: 4}, {__ROW_VERSION: !not_null _, COL2: 5}]
    -
      - query: select "__ROW_VERSION" as version, t1.* from t1 where col1 = 20;
      - explain: "map(Index(I1 [EQUALS promote(@0 as LONG)])[(version(T1) as VERSION, $T1.ID as ID, $T1.COL1 as COL1, $T1.COL2 as COL2)])"
      - result: [{VERSION: !not_null _, ID: 6, COL1: 20, COL2: 6}, {VERSION: !not_null _, ID: 7, COL1: 20, COL2: 7}, {VERSION: !not_null _, ID: 8, COL1: 20, COL2: 8}, {VERSION: !not_null _, ID: 9, COL1: 20, COL2: 9}, {VERSION: !not_null _, ID: 10, COL1: 20, COL2: 10}, {VERSION: !not_null _, ID: 11, COL1: 20, COL2: 11}, {VERSION: !not_null _, ID: 12, COL1: 20, COL2: 12}, {VERSION: !not_null _, ID: 13, COL1: 20, COL2: 13}]
    -
      - query: select "__ROW_VERSION" as version, (t1.*) from t1 where col1 = 20;
      - explain: "map(Index(I1 [EQUALS promote(@0 as LONG)])[(version(T1) as VERSION, $T1 as _1)])"
      - result: [{VERSION: !not_null _, {ID: 6, COL1: 20, COL2: 6}}, {VERSION: !not_null _, {ID: 7, COL1: 20, COL2: 7}}, {VERSION: !not_null _, {ID: 8, COL1: 20, COL2: 8}}, {VERSION: !not_null _, {ID: 9, COL1: 20, COL2: 9}}, {VERSION: !not_null _, {ID: 10, COL1: 20, COL2: 10}}, {VERSION: !not_null _, {ID: 11, COL1: 20, COL2: 11}}, {VERSION: !not_null _, {ID: 12, COL1: 20, COL2: 12}}, {VERSION: !not_null _, {ID: 13, COL1: 20, COL2: 13}}]
    -
      - query: select "__ROW_VERSION", t1.* from t1 where col1 = 20;
      - explain: "map(Index(I1 [EQUALS promote(@0 as LONG)])[(version(T1) as __ROW_VERSION, $T1.ID as ID, $T1.COL1 as COL1, $T1.COL2 as COL2)])"
      - result: [{__ROW_VERSION: !not_null _, ID: 6, COL1: 20, COL2: 6}, {__ROW_VERSION: !not_null _, ID: 7, COL1: 20, COL2: 7}, {__ROW_VERSION: !not_null _, ID: 8, COL1: 20, COL2: 8}, {__ROW_VERSION: !not_null _, ID: 9, COL1: 20, COL2: 9}, {__ROW_VERSION: !not_null _, ID: 10, COL1: 20, COL2: 10}, {__ROW_VERSION: !not_null _, ID: 11, COL1: 20, COL2: 11}, {__ROW_VERSION: !not_null _, ID: 12, COL1: 20, COL2: 12}, {__ROW_VERSION: !not_null _, ID: 13, COL1: 20, COL2: 13}]
    -
      - query: select "__ROW_VERSION", (t1.*) from t1 where col1 = 20;
      - explain: "map(Index(I1 [EQUALS promote(@0 as LONG)])[(version(T1) as __ROW_VERSION, $T1 as _1)])"
      - result: [{__ROW_VERSION: !not_null _, {ID: 6, COL1: 20, COL2: 6}}, {__ROW_VERSION: !not_null _, {ID: 7, COL1: 20, COL2: 7}}, {__ROW_VERSION: !not_null _, {ID: 8, COL1: 20, COL2: 8}}, {__ROW_VERSION: !not_null _, {ID: 9, COL1: 20, COL2: 9}}, {__ROW_VERSION: !not_null _, {ID: 10, COL1: 20, COL2: 10}}, {__ROW_VERSION: !not_null _, {ID: 11, COL1: 20, COL2: 11}}, {__ROW_VERSION: !not_null _, {ID: 12, COL1: 20, COL2: 12}}, {__ROW_VERSION: !not_null _, {ID: 13, COL1: 20, COL2: 13}}]
    -
      - query: select "__ROW_VERSION", t1.id from t1 order by "__ROW_VERSION" ASC;
      - explain: "map(Index(VERSION_INDEX <,>)[(version(T1) as __ROW_VERSION, $T1.ID as ID)])"
      - result: [{__ROW_VERSION: !not_null _, ID: 1}, {__ROW_VERSION: !not_null _, ID: 3}, {__ROW_VERSION: !not_null _, ID: 5}, {__ROW_VERSION: !not_null _, ID: 7}, {__ROW_VERSION: !not_null _, ID: 9}, {__ROW_VERSION: !not_null _, ID: 11}, {__ROW_VERSION: !not_null _, ID: 13}, {__ROW_VERSION: !not_null _, ID: 2}, {__ROW_VERSION: !not_null _, ID: 4}, {__ROW_VERSION: !not_null _, ID: 6}, {__ROW_VERSION: !not_null _, ID: 8}, {__ROW_VERSION: !not_null _, ID: 10}, {__ROW_VERSION: !not_null _, ID: 12}]
    -
      - query: select t1."__ROW_VERSION", t1.id from t1 order by "__ROW_VERSION" DESC;
      - explain: "map(Index(VERSION_INDEX <,> REVERSE)[(version(T1) as __ROW_VERSION, $T1.ID as ID)])"
      - result: [{__ROW_VERSION: !not_null _, ID: 12}, {__ROW_VERSION: !not_null _, ID: 10}, {__ROW_VERSION: !not_null _, ID: 8}, {__ROW_VERSION: !not_null _, ID: 6}, {__ROW_VERSION: !not_null _, ID: 4}, {__ROW_VERSION: !not_null _, ID: 2}, {__ROW_VERSION: !not_null _, ID: 13}, {__ROW_VERSION: !not_null _, ID: 11}, {__ROW_VERSION: !not_null _, ID: 9}, {__ROW_VERSION: !not_null _, ID: 7}, {__ROW_VERSION: !not_null _, ID: 5}, {__ROW_VERSION: !not_null _, ID: 3}, {__ROW_VERSION: !not_null _, ID: 1}]
    -
      - query: select t1."__ROW_VERSION", t1.id from t1 where col1 = 20 order by "__ROW_VERSION" ASC;
      - explain: "map(Index(GROUPED_VERSION_INDEX [EQUALS promote(@0 as LONG)])[(version(T1) as __ROW_VERSION, $T1.ID as ID)])"
      - result: [{__ROW_VERSION: !not_null _, ID: 7}, {__ROW_VERSION: !not_null _, ID: 9}, {__ROW_VERSION: !not_null _, ID: 11}, {__ROW_VERSION: !not_null _, ID: 13}, {__ROW_VERSION: !not_null _, ID: 6}, {__ROW_VERSION: !not_null _, ID: 8}, {__ROW_VERSION: !not_null _, ID: 10}, {__ROW_VERSION: !not_null _, ID: 12}]
    -
      - query: select "__ROW_VERSION", t1.id from t1 where col1 = 20 order by "__ROW_VERSION" DESC;
      - explain: "map(Index(GROUPED_VERSION_INDEX [EQUALS promote(@0 as LONG)] REVERSE)[(version(T1) as __ROW_VERSION, $T1.ID as ID)])"
      - result: [{__ROW_VERSION: !not_null _, ID: 12}, {__ROW_VERSION: !not_null _, ID: 10}, {__ROW_VERSION: !not_null _, ID: 8}, {__ROW_VERSION: !not_null _, ID: 6}, {__ROW_VERSION: !not_null _, ID: 13}, {__ROW_VERSION: !not_null _, ID: 11}, {__ROW_VERSION: !not_null _, ID: 9}, {__ROW_VERSION: !not_null _, ID: 7}]
    -
      - query: select t1."__ROW_VERSION", t1.id from t1 where col1 = 20 order by t1."__ROW_VERSION" ASC limit 5;
      - result: [{__ROW_VERSION: !not_null _, ID: 7}, {__ROW_VERSION: !not_null _, ID: 9}, {__ROW_VERSION: !not_null _, ID: 11}, {__ROW_VERSION: !not_null _, ID: 13}, {__ROW_VERSION: !not_null _, ID: 6}]
      - result: [{__ROW_VERSION: !not_null _, ID: 8}, {__ROW_VERSION: !not_null _, ID: 10}, {__ROW_VERSION: !not_null _, ID: 12}]
#    -
#      # Need to have a solution for casting versions as query arguments for this one
#      - query: select "__ROW_VERSION", col1, t1.id from t1 where col1 = 10 and "__ROW_VERSION" > 'AAAAAAAAAAAAAAAA' order by col1 asc, "__ROW_VERSION" asc;
#      - explain: "map(Index(GROUPED_VERSION_INDEX ([10, Versionstamp(\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 0)],[10]])[(version(T1) as __ROW_VERSION, $T1.COL1 as COL1, $T1.ID as ID)])"
#      - result: [{__ROW_VERSION: !not_null _, COL1: 10, ID: 1}, {__ROW_VERSION: !not_null _, COL1: 10, ID: 3}, {__ROW_VERSION: !not_null _, COL1: 10, ID: 5}, {__ROW_VERSION: !not_null _, COL1: 10, ID: 2}, {__ROW_VERSION: !not_null _, COL1: 10, ID: 4}]
    -
      - query: select "__ROW_VERSION", col1, t1.id from t1 where col1 > 10 order by col1 asc, "__ROW_VERSION" asc;
      - explain: "map(Index(GROUPED_VERSION_INDEX [[GREATER_THAN promote(@0 as LONG)]])[(version(T1) as __ROW_VERSION, $T1.COL1 as COL1, $T1.ID as ID)])"
      - result: [{__ROW_VERSION: !not_null _, COL1: 20, ID: 7}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 9}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 11}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 13}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 6}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 8}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 10}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 12}]
#    -
#      - query: select "__ROW_VERSION", col1, t1.id from t1 where (col1 = 10 AND "__ROW_VERSION" > 'AAAAAAAAAAAAAAAA') OR col1 > 10 order by col1 asc, "__ROW_VERSION" asc;
#      # Should be able to execute as a single index scan. See: TODO (Combine scan ranges to execute certain OR queries with a single scan)
#      - explain: "map(Index(GROUPED_VERSION_INDEX ([10, Versionstamp(\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 0)],>)[(version(T1) as __ROW_VERSION, $T1.COL1 as COL1, $T1.ID as ID)])"
#      - result: [{__ROW_VERSION: !not_null _, COL1: 10, ID: 1}, {__ROW_VERSION: !not_null _, COL1: 10, ID: 3}, {__ROW_VERSION: !not_null _, COL1: 10, ID: 5}, {__ROW_VERSION: !not_null _, COL1: 10, ID: 2}, {__ROW_VERSION: !not_null _, COL1: 10, ID: 4}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 7}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 9}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 11}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 13}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 6}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 8}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 10}, {__ROW_VERSION: !not_null _, COL1: 20, ID: 12}]
---
destruct:
  connect: "jdbc:embed:/__SYS?schema=CATALOG"
  steps:
    - query: drop database /FRL/VERSIONS_YAML
    - query: drop schema template versions_tests_template
...