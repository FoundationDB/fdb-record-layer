#
# sql-functions.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
options:
    supported_version: 4.3.2.0
---
schema_template:
    create table t1(col1 bigint, col2 string, col3 integer, primary key(col1))
    create table t2(x bigint, y bigint, z bigint, primary key(x))
    create index t1_idx1 as select col2, col1, col3 FROM t1 order by col2, col1, col3
    create index t1_idx2 as select col3, col2, col1 FROM t1 order by col3, col2, col1
    create index t1_idx3 as select count(col1) from t1 group by col2, col3
    create index t1_idx4 as select max(col3) from t1 group by col1, col2
    create index t2_idx1 as select y, x, z FROM t2 order by y, x, z
    create index t2_idx2 as select z, y, x FROM t2 order by z, y, x
    create function f1 ( in a bigint, in b string )
       as select col1, col2 from t1 where col1 < a and col2 = b
    create function f2 ( k bigint )
       as select col1, col2, col3 from t1 where col3 = k
    create function f3 ( in a bigint, in b string, in c bigint) as select A.col1, A.col2, B.col3 from f1(a, b) A, f2(c) B
    create function f4 ( in a bigint, in b string, in c bigint, in d bigint) as select * from f3(a, b, c + d)
    create function f5 ( in a bigint default 103, in b string default 'b' )
       as select col1, col2 from t1 where col1 < a and col2 = b
---
setup:
  steps:
    - query: insert into t1 values
        (100, 'a', 1),
        (101, 'b', 2),
        (102, 'b', 2),
        (103, 'b', 2),
        (104, 'c', 2),
        (105, 'd', 4)
    - query: insert into t2 values
        (10, 14, 1),
        (11, 16, 1),
        (12, 18, 3),
        (13, 20, 3),
        (14, 22, 5),
        (15, 25, 3)
---
test_block:
  name: basic-sql-function-tests
  tests:
    -
      - query: select col1, col2 from f1(a => 103, b => 'b');
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c14 AS STRING), [LESS_THAN promote(@c10 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select col1, col2 from f1(b => 'b', a => 103);
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c10 AS STRING), [LESS_THAN promote(@c14 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select col1, col2 from f1(103, 'b');
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c10 AS STRING), [LESS_THAN promote(@c8 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select col1 + 10, col2 from f1(103, 'b');
      - explain: "ISCAN(T1_IDX1 [EQUALS promote(@c12 AS STRING), [LESS_THAN promote(@c10 AS LONG)]]) | MAP (_.COL1 + @c4 AS _0, _.COL2 AS COL2)"
      - result: [{111, 'b'}, {112, 'b'}]
    -
      - query: select * from f1(103, 'b');
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(@c6 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select * from f1(103, 'b') where col1 = 101
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), EQUALS promote(@c13 AS LONG)] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}]
    -
      - query: select * from f1(103 + 1, 'b')
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c10 AS STRING), [LESS_THAN promote(@c6 + @c8 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}, {103, 'b'}]
    -
      - query: select * from (select * from f1(103 + 1, 'b')) as x where col1 < 105
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c14 AS STRING), [LESS_THAN promote(@c10 + @c12 AS LONG) && LESS_THAN promote(@c22 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}, {103, 'b'}]
    -
      - query: select A.col1 AS W, A.col2 AS X, B.col1 AS Y, B.col2 AS Z from f1(103, 'b') A, f1(103, 'b') B where A.col1 = B.col1
      - explain: "ISCAN(T1_IDX1 <,>) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(@c30 AS STRING), EQUALS q0.COL1] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | FILTER q0.COL1 LESS_THAN promote(@c28 AS LONG) AND q0.COL2 EQUALS promote(@c30 AS STRING) | FETCH AS q1 RETURN (q1.COL1 AS W, q1.COL2 AS X, q0.COL1 AS Y, q0.COL2 AS Z) }"
      - result: [{W: 101, X: 'b', Y: 101, Z: 'b'}, {W: 102, X: 'b', Y: 102, Z: 'b'}]
    -
      - query: select A.col1 AS W, A.col2 AS X, B.col1 AS Y, B.col2 AS Z from f1(a => 103, b => 'b') A, f1(a => 103, b => 'b') B where A.col1 = B.col1
      - explain: "ISCAN(T1_IDX1 <,>) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(@c34 AS STRING), EQUALS q0.COL1] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | FILTER q0.COL1 LESS_THAN promote(@c30 AS LONG) AND q0.COL2 EQUALS promote(@c34 AS STRING) | FETCH AS q1 RETURN (q1.COL1 AS W, q1.COL2 AS X, q0.COL1 AS Y, q0.COL2 AS Z) }"
      - result: [{W: 101, X: 'b', Y: 101, Z: 'b'}, {W: 102, X: 'b', Y: 102, Z: 'b'}]
    -
      - query: with x(y, z) as (select * from f1(b => 'b', a => 103)) select * from x
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c17 AS STRING), [LESS_THAN promote(@c21 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS Y, _.COL2 AS Z)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: with x(y, z) as (select * from f1(103, 'b')) select * from x
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c17 AS STRING), [LESS_THAN promote(@c15 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS Y, _.COL2 AS Z)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select * from t2 where exists (select * from f2(t2.z))
      - explain: "ISCAN(T2_IDX1 <,>) | FLATMAP q0 -> { ISCAN(T1_IDX1 <,>) | FILTER promote(_.COL3 AS LONG) EQUALS q0.Z | DEFAULT NULL | FILTER _ NOT_NULL AS q1 RETURN q0 }"
      - result: [{10, 14, 1}, {11, 16, 1}]
    -
      - query: select * from t2 where exists (select * from f2(k => t2.z))
      - explain: "ISCAN(T2_IDX1 <,>) | FLATMAP q0 -> { ISCAN(T1_IDX1 <,>) | FILTER promote(_.COL3 AS LONG) EQUALS q0.Z | DEFAULT NULL | FILTER _ NOT_NULL AS q1 RETURN q0 }"
      - result: [{10, 14, 1}, {11, 16, 1}]
    -
      - query: select * from f3(103, 'b', 4)
      - explain: "ISCAN(T1_IDX1 <,>) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(@c6 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | FILTER promote(q0.COL3 AS LONG) EQUALS promote(@c10 AS LONG) | FETCH AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2, q0.COL3 AS COL3) }"
      - result: [{101, 'b', 4}, {102, 'b', 4}]
    -
      - query: select * from f3(103, 'b', 4)
      - explain: "ISCAN(T1_IDX1 <,>) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(@c6 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | FILTER promote(q0.COL3 AS LONG) EQUALS promote(@c10 AS LONG) | FETCH AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2, q0.COL3 AS COL3) }"
      - result: [{101, 'b', 4}, {102, 'b', 4}]
    -
      - query: select * from f4(103, 'b', 2, 2)
      - explain: "ISCAN(T1_IDX1 <,>) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(@c6 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | FILTER promote(q0.COL3 AS LONG) EQUALS promote(@c10 AS LONG) + promote(@c10 AS LONG) | FETCH AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2, q0.COL3 AS COL3) }"
      - result: [{101, 'b', 4}, {102, 'b', 4}]
    -
      - query: select * from f4(a => 103, b => 'b', c => 2, d => 2)
      - explain: "ISCAN(T1_IDX1 <,>) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(@c12 AS STRING), [LESS_THAN promote(@c8 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | FILTER promote(q0.COL3 AS LONG) EQUALS promote(@c16 AS LONG) + promote(@c16 AS LONG) | FETCH AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2, q0.COL3 AS COL3) }"
      - result: [{101, 'b', 4}, {102, 'b', 4}]
    -
      - query: select * from f5();
      - explain: "COVERING(T1_IDX1 [EQUALS promote('b' AS STRING), [LESS_THAN promote(103 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select * from f5(103);
      - explain: "COVERING(T1_IDX1 [EQUALS promote('b' AS STRING), [LESS_THAN promote(@c6 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select * from f5(b => 'b');
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(103 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select * from f5(b => 'b', a => 103);
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(@c12 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select * from f5(b => 'b', a => 102);
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(@c12 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}]
    -
      - query: select * from f5(b => 'a', a => 102);
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(@c12 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{100, 'a'}]
    -
      - query: select * from f5(a => 102, b => 'a');
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c12 AS STRING), [LESS_THAN promote(@c8 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{100, 'a'}]
    -
      - query: select * from f5(102);
      - explain: "COVERING(T1_IDX1 [EQUALS promote('b' AS STRING), [LESS_THAN promote(@c6 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}]
    -
      - query: select * from f5(102, 'a');
      - explain: "COVERING(T1_IDX1 [EQUALS promote(@c8 AS STRING), [LESS_THAN promote(@c6 AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{100, 'a'}]
    -
      - query: select col1, col2 from f1('b', 103);
      - error: "42883"
    -
      - query: select col1, col2 from f1(102, 103);
      - error: "42883"
    -
      - query: select col1, col2 from f1(103);
      - error: "42883"
    -
      - query: select col1, col2 from f1(103);
      - error: "42883"
    -
      - query: select col1, col2 from f1(a => 103, a => 104);
      - error: "42601"
---
test_block:
  name: parenthesis-less-function-calls
  options:
    supported_version: 4.3.6.0
  tests:
    -
      - query: select * from f5;
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select * from f1;
      - error: '42883'

...
