#
# sql-functions.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
options:
    supported_version: !current_version
---
schema_template:
    create table t1(col1 bigint, col2 string, col3 integer, primary key(col1))
    create table t2(x bigint, y bigint, z bigint, primary key(x))
    create index t1_idx1 as select col2, col1, col3 FROM t1 order by col2, col1, col3
    create index t1_idx2 as select col3, col2, col1 FROM t1 order by col3, col2, col1
    create index t1_idx3 as select count(col1) from t1 group by col2, col3
    create index t1_idx4 as select max(col3) from t1 group by col1, col2
    create index t2_idx1 as select y, x, z FROM t2 order by y, x, z
    create index t2_idx2 as select z, y, x FROM t2 order by z, y, x
    create function f1 ( in a bigint, in b string )
       as select col1, col2 from t1 where col1 < a and col2 = b
---
setup:
  steps:
    - query: insert into t1 values
        (100, 'a', 1),
        (101, 'b', 1),
        (102, 'b', 1),
        (103, 'c', 1),
        (104, 'c', 2),
        (105, 'd', 1)
    - query: insert into t2 values
        (10, 14, 1),
        (11, 16, 1),
        (12, 18, 1),
        (13, 20, 1),
        (14, 22, 2),
        (15, 25, 1)
---
test_block:
  name: basic-sql-function-tests
  tests:
    -
      - query: select col1, col2 from f1(a => 103, b => 'b');
      - explain: "TF range(0l, promote(1l AS LONG), STEP 1l) | MAP (promote(@c10 AS LONG) AS A, @c14 AS B) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(q0.B AS STRING), [LESS_THAN promote(q0.A AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2) AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2) } | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select col1, col2 from f1(b => 'b', a => 103);
      - explain: "TF range(0l, promote(1l AS LONG), STEP 1l) | MAP (promote(@c14 AS LONG) AS A, @c10 AS B) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(q0.B AS STRING), [LESS_THAN promote(q0.A AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2) AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2) } | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select col1, col2 from f1(103, 'b');
      - explain: "TF range(0l, promote(1l AS LONG), STEP 1l) | MAP (promote(@c8 AS LONG) AS A, @c10 AS B) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(q0.B AS STRING), [LESS_THAN promote(q0.A AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2) AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2) } | MAP (_.COL1 AS COL1, _.COL2 AS COL2)"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select col1 + 10, col2 from f1(103, 'b');
      - explain: "TF range(0l, promote(1l AS LONG), STEP 1l) | MAP (promote(@c10 AS LONG) AS A, @c12 AS B) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(q0.B AS STRING), [LESS_THAN promote(q0.A AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2) AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2) } | MAP (_.COL1 + @c4 AS _0, _.COL2 AS COL2)"
      - result: [{111, 'b'}, {112, 'b'}]
    -
      - query: select * from f1(103, 'b');
      - explain: "TF range(0l, promote(1l AS LONG), STEP 1l) | MAP (promote(@c6 AS LONG) AS A, @c8 AS B) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(q0.B AS STRING), [LESS_THAN promote(q0.A AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2) AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2) }"
      - result: [{101, 'b'}, {102, 'b'}]
    -
      - query: select * from f1(103, 'b') where col1 = 101
      - explain: "TF range(0l, promote(1l AS LONG), STEP 1l) | MAP (promote(@c6 AS LONG) AS A, @c8 AS B) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(q0.B AS STRING), [LESS_THAN promote(q0.A AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2) AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2) } | FILTER _.COL1 EQUALS promote(@c13 AS LONG)"
      - result: [{101, 'b'}]
    -
      - query: select * from f1(103 + 1, 'b')
      - explain: "TF range(0l, promote(1l AS LONG), STEP 1l) | MAP (promote(@c6 AS LONG) AS A, @c8 AS B) | FLATMAP q0 -> { COVERING(T1_IDX1 [EQUALS promote(q0.B AS STRING), [LESS_THAN promote(q0.A AS LONG)]] -> [COL1: KEY[1], COL2: KEY[0], COL3: KEY[2]]) | MAP (_.COL1 AS COL1, _.COL2 AS COL2) AS q1 RETURN (q1.COL1 AS COL1, q1.COL2 AS COL2) } | FILTER _.COL1 EQUALS promote(@c13 AS LONG)"
      - result: [{101, 'b'}, {102, 'b'}, {103, 'c'}]
    -
      - query: select col1, col2 from f1('b', 103);
      - error: "42883"
    -
      - query: select col1, col2 from f1(102, 103);
      - error: "42883"
    -
      - query: select col1, col2 from f1(103);
      - error: "42883"
    -
      - query: select col1, col2 from f1(103);
      - error: "42883"
    -
      - query: select col1, col2 from f1(a => 103, a => 104);
      - error: "42601"
    -
      - query: ;
      - error: "42601"
...
