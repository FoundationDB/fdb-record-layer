#
# cte.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table t1(id bigint, col1 bigint, col2 bigint, primary key(id))
    create index i1 as select col2, col1 from t1 order by col2, col1
---
setup:
  steps:
    - query: insert into t1
        values (1, 10, 1),
               (2, 10, 2),
               (6, 20, 6),
               (7, 20, 7)
---
test_block:
  preset: single_repetition_ordered
  tests:
    -
      - query: with c1 as (select col1, col2 from t1) select col1, col2 from c1
      - unorderedResult: [{COL1: 10, COL2: 1},
                          {COL1: 10, COL2: 2},
                          {COL1: 20, COL2: 6},
                          {COL1: 20, COL2: 7}]
    -
      - query: with c1 as (select col1, col1, col2 from t1) select col2 from c1
      - unorderedResult: [{COL2: 1},
                          {COL2: 2},
                          {COL2: 6},
                          {COL2: 7}]
    -
      - query: with c1 as (select * from t1) select * from c1
      - unorderedResult: [{ID: 1, COL1: 10, COL2: 1},
                          {ID: 2, COL1: 10, COL2: 2},
                          {ID: 6, COL1: 20, COL2: 6},
                          {ID: 7, COL1: 20, COL2: 7}]
    -
      - query: with ignored as (select * from t1) select * from t1
      - unorderedResult: [{ID: 1, COL1: 10, COL2: 1},
                          {ID: 2, COL1: 10, COL2: 2},
                          {ID: 6, COL1: 20, COL2: 6},
                          {ID: 7, COL1: 20, COL2: 7}]
    -
      - query: with c1(x, y, z) as (select * from t1) select * from c1
      - unorderedResult: [{x: 1, Y: 10, Z: 1},
                          {x: 2, Y: 10, Z: 2},
                          {x: 6, Y: 20, Z: 6},
                          {x: 7, Y: 20, Z: 7}]
    -
      - query: with c1(w, z) as (select id, col1 from t1), c2(a, b) as (select id, col1 from t1 where id in (1, 2)) select * from c1,c2
      - unorderedResult: [{W: 1, Z: 10, A: 1, B: 10},
                          {W: 2, Z: 10, A: 1, B: 10},
                          {W: 6, Z: 20, A: 1, B: 10},
                          {W: 7, Z: 20, A: 1, B: 10},
                          {W: 1, Z: 10, A: 2, B: 10},
                          {W: 2, Z: 10, A: 2, B: 10},
                          {W: 6, Z: 20, A: 2, B: 10},
                          {W: 7, Z: 20, A: 2, B: 10}]
    -
      - query: with c1(w, z) as (select id, col1 from t1), c2(a, b) as (with c3(A, B) as (select id, col1 from t1 where id in (1, 2)) select * from c3) select * from c1,c2
      - unorderedResult: [{W: 1, Z: 10, A: 1, B: 10},
                          {W: 2, Z: 10, A: 1, B: 10},
                          {W: 6, Z: 20, A: 1, B: 10},
                          {W: 7, Z: 20, A: 1, B: 10},
                          {W: 1, Z: 10, A: 2, B: 10},
                          {W: 2, Z: 10, A: 2, B: 10},
                          {W: 6, Z: 20, A: 2, B: 10},
                          {W: 7, Z: 20, A: 2, B: 10}]
    -
      - query: with c1(w, z) as (select id, col1 from t1), c2(a, b) as (with c3(A, B) as (select id, col1 from c1 where id in (1, 2)) select * from c3) select * from c1,c2
      - error: "42F01"
    -
      - query: with recursive c1(w, z) as (select id, col1 from t1) select * from c1
      - error: "0AF00"
    -
      - query: with c1(w, z, x1, x2, x3, x4) as (select id, col1 from t1) select * from c1
      - error: "42F10"
    -
      - query: with c1(w, z) as (select id, col1 from t1), c1(a, b) as (select id, col1 from t1 where id in (1, 2)) select * from c1
      - error: "42712"
    -
      - query: with c1(w, z) as (select id, col1 from t1), c2(a, b) as (with c1(A, B) as (select id, col1 from t1 where id in (1, 2)) select * from c1) select * from c1,c2
      - unorderedResult: [{W: 1, Z: 10, A: 1, B: 10},
                          {W: 2, Z: 10, A: 1, B: 10},
                          {W: 6, Z: 20, A: 1, B: 10},
                          {W: 7, Z: 20, A: 1, B: 10},
                          {W: 1, Z: 10, A: 2, B: 10},
                          {W: 2, Z: 10, A: 2, B: 10},
                          {W: 6, Z: 20, A: 2, B: 10},
                          {W: 7, Z: 20, A: 2, B: 10}]
    -
      - query: with c1(w, z) as (select id, col1 from t1) select col2 from c1
      - error: "42703"
    -
      - query: with c1(w, z) as (select id, col1 from t1) select col1 from c1
      - error: "42703"
    -
      - query: select col1 from t1 where col2 < 3
      - explain: "map(Covering(Index(I1 [[LESS_THAN promote(@c8 as LONG)]]) -> [COL1: KEY[1], COL2: KEY[0], ID: KEY[3]])[($q41.COL1 as COL1)])"
    -
      # TODO (CTEs and subqueries are not fully optimized)
      - query: select x from (select col1 as x, col2 as y from t1) as sub where y < 3
      - explain: "map(map(Scan(<,>)[($q2.COL1 as X, $q2.COL2 as Y)]) | $q4.Y LESS_THAN promote(@c21 as LONG)[($q32.X as X)])"
    -
      # TODO (CTEs and subqueries are not fully optimized)
      - query: with c1(x, y) as (select col1, col2 from t1) select x from c1 where y < 3
      - explain: "map(map(Scan(<,>)[($q2.COL1 as COL1, $q2.COL2 as COL2)]) | $q6.COL2 LESS_THAN promote(@c24 as LONG)[($q34.COL1 as X)])"
...
