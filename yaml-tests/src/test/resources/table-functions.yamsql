#
# table-functions.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2025 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
options:
    supported_version: 4.2.5.0
---
schema_template:
    create table t1(id bigint, col1 string, primary key(id))
---
setup:
  steps:
    - query: INSERT INTO T1 VALUES
        (1, 'a'),
        (2, 'b'),
        (3, 'c')
---
test_block:
  name: table-functions
  preset: single_repetition_ordered
  tests:
    -
      - query: select * from values (42)
      - result: [{42}]
    -
      - query: select * from values (1, 2.0, (3, 4, 'foo')), (10, 90.2, (5, 6.0, 'bar')) as A(B, C, W(X, Y, Z))
      - explain: "EXPLODE array((@c6 AS B, @c8 AS C, (@c11 AS X, promote(@c13 AS DOUBLE) AS Y, @c15 AS Z) AS W), (@c20 AS B, @c22 AS C, (@c25 AS X, @c27 AS Y, @c29 AS Z) AS W))"
      - result: [{B: 1, C: 2.0, W: {X: 3, Y: 4.0, Z: 'foo'}},
                 {B: 10, C: 90.2, W: {X: 5, Y: 6.0, Z: 'bar'}}]
    -
      - query: select B, C, W from values (1, 2.0, (3, 4, 'foo')), (10, 90.2, (5, 6.0, 'bar')) as A(B, C, W(X, Y, Z))
      - explain: "EXPLODE array((@c10 AS B, @c12 AS C, (@c15 AS X, promote(@c17 AS DOUBLE) AS Y, @c19 AS Z) AS W), (@c24 AS B, @c26 AS C, (@c29 AS X, @c31 AS Y, @c33 AS Z) AS W)) | MAP (_.B AS B, _.C AS C, _.W AS W)"
      - result: [{B: 1, C: 2.0, W: {X: 3, Y: 4.0, Z: 'foo'}},
                 {B: 10, C: 90.2, W: {X: 5, Y: 6.0, Z: 'bar'}}]
    -
      - query: select * from values (1, 2.0, [42, 43, 44]), (11, 3.0, [420, 430, 440])  as A(B, C, W)
      - result: [{B: 1, C: 2.0, W: [42, 43, 44]},
                 {B: 11, C: 3.0, W: [420, 430, 440]}]
    -
      - query: select * from values (1, 2.0, [('a', 'b', [1, 2, 3])]), (11, 3.0, [('d', 'e', [10, 20, 30])])  as A(B, C, W(X, Y, Z))
      - result: [{B: 1, C: 2.0, W: [{X: 'a', Y: 'b', Z: [1, 2, 3]}]},
                 {B: 11, C: 3.0, W: [{X: 'd', Y: 'e', Z: [10, 20, 30]}]}]
    -
      - query: select A.B, C, W from values (1, 2.0, (3, 4, 'foo')), (10, 90.2, (5, 6.0, 'bar')) as A(B, C, W(X, Y, Z))
      - explain: "EXPLODE array((@c12 AS B, @c14 AS C, (@c17 AS X, promote(@c19 AS DOUBLE) AS Y, @c21 AS Z) AS W), (@c26 AS B, @c28 AS C, (@c31 AS X, @c33 AS Y, @c35 AS Z) AS W)) | MAP (_.B AS B, _.C AS C, _.W AS W)"
      - result: [{B: 1, C: 2.0, W: {X: 3, Y: 4.0, Z: 'foo'}},
                 {B: 10, C: 90.2, W: {X: 5, Y: 6.0, Z: 'bar'}}]
    -
      - query: select A.B, C as Q, W.X from values (1, 2.0, (3, 4, 'foo')), (10, 90.2, (5, 6.0, 'bar')) as A(B, C, W(X, Y, Z))
      - explain: "EXPLODE array((@c16 AS B, @c18 AS C, (@c21 AS X, promote(@c23 AS DOUBLE) AS Y, @c25 AS Z) AS W), (@c30 AS B, @c32 AS C, (@c35 AS X, @c37 AS Y, @c39 AS Z) AS W)) | MAP (_.B AS B, _.C AS Q, _.W.X AS X)"
      - result: [{B: 1, Q: 2.0, X: 3},
                 {B: 10, Q: 90.2, X: 5}]
    -
      - query: select * from (select A.B, C as Q, W.X from values (1, 2.0, (3, 4, 'foo')), (10, 90.2, (5, 6.0, 'bar')) as A(B, C, W(X, Y, Z))) as u
      - explain: "EXPLODE array((@c20 AS B, @c22 AS C, (@c25 AS X, promote(@c27 AS DOUBLE) AS Y, @c29 AS Z) AS W), (@c34 AS B, @c36 AS C, (@c39 AS X, @c41 AS Y, @c43 AS Z) AS W)) | MAP (_.B AS B, _.C AS Q, _.W.X AS X)"
      - result: [{B: 1, Q: 2.0, X: 3},
                 {B: 10, Q: 90.2, X: 5}]
    -
      - query: select * from (select A.B, C as Q, W.X from values (1, 2.0, (3, 4, 'foo')), (10, 90.2, (5, 6.0, 'bar')) as A(B, C, W(X, Y, Z))) as u where b < 8
      - explain: "EXPLODE array((@c20 AS B, @c22 AS C, (@c25 AS X, promote(@c27 AS DOUBLE) AS Y, @c29 AS Z) AS W), (@c34 AS B, @c36 AS C, (@c39 AS X, @c41 AS Y, @c43 AS Z) AS W)) | FILTER _.B LESS_THAN @c68 | MAP (_.B AS B, _.C AS Q, _.W.X AS X)"
      - result: [{B: 1, Q: 2.0, X: 3}]
    -
      - query: select * from range(1, 4)
      - result: [{ID: 1}, {ID: 2}, {ID: 3}]
    -
      - query: select * from range(-1)
      - error: XXXXX
    -
      - query: select * from range(-1, 4)
      - error: XXXXX
    -
      - query: select * from range(1, 4, -1)
      - error: XXXXX
    -
      - query: select * from range(1, 4, 0)
      - error: XXXXX
    -
      - query: select * from range(0, 12, 5)
      - result: [{ID: 0}, {ID: 5}, {ID: 10}]
    -
      - query: select * from range(0, 11, 5)
      - explain: "TF range(promote(@c6 AS LONG), promote(@c8 AS LONG), STEP promote(@c10 AS LONG))"
      - result: [{ID: 0}, {ID: 5}, {ID: 10}]
    -
      - query: select * from range(6 - 6, 14 + 6 + 1, 20 - 10)
      - explain: "TF range(promote(@c6 - @c6 AS LONG), promote(@c10 + @c6 + @c14 AS LONG), STEP promote(@c16 - @c18 AS LONG))"
      - result: [{ID: 0}, {ID: 10}, {ID: 20}]
    -
      - query: select ID as X from range(3) as Y
      - explain: "TF range(0l, promote(@c8 AS LONG), STEP 1l) | MAP (_.ID AS X)"
      - result: [{X: 0}, {X: 1}, {X: 2}]
    -
      - query: select X.ID as A, Y.ID as B from range(3) as X, range(4) as Y
      - explain: "TF range(0l, promote(@c16 AS LONG), STEP 1l) | FLATMAP q0 -> { TF range(0l, promote(@c23 AS LONG), STEP 1l) AS q1 RETURN (q0.ID AS A, q1.ID AS B) }"
      - result: [{A: 0, B: 0},
                 {A: 0, B: 1},
                 {A: 0, B: 2},
                 {A: 0, B: 3},
                 {A: 1, B: 0},
                 {A: 1, B: 1},
                 {A: 1, B: 2},
                 {A: 1, B: 3},
                 {A: 2, B: 0},
                 {A: 2, B: 1},
                 {A: 2, B: 2},
                 {A: 2, B: 3}]
    -
      - query: select a.id as x, a.col1 as y, b.id as z from t1 as a, range(a.id) as b
      - explain: "SCAN(<,>) | FLATMAP q0 -> { TF range(0l, q0.ID, STEP 1l) AS q1 RETURN (q0.ID AS X, q0.COL1 AS Y, q1.ID AS Z) }"
      - result: [{X: 1, Y: 'a', Z: 0},
                 {X: 2, Y: 'b', Z: 0},
                 {X: 2, Y: 'b', Z: 1},
                 {X: 3, Y: 'c', Z: 0},
                 {X: 3, Y: 'c', Z: 1},
                 {X: 3, Y: 'c', Z: 2}]
...
