#
# aggregate-index-tests.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table t1(id bigint, col1 bigint, col2 bigint, primary key(id))
    create index mv1 as select sum(col2) from t1 group by col1
    create index mv6 as select max_ever(col2) from t1 group by col1
    create index mv8 as select col1, max(col2) from t1 group by col1 order by col1
    create table t2(id bigint, col1 bigint, col2 bigint, col3 bigint, primary key(id))
    create index mv2 as select col1, col2 from t2 order by col1, col2
    create index mv3 as select col1, col3 from t2 order by col1, col3
    create index mv4 as select min_ever(col3) from T2 group by col1, col2
    create index mv5 as select max_ever(col3) from t2 group by col1, col2
    create index mv12 as select min_ever(col2) from t1 group by col1 with attributes LEGACY_EXTREMUM_EVER
    create index mv13 as select max_ever(col2) from t1 group by col1 with attributes LEGACY_EXTREMUM_EVER
    create index mv9 as select col1, max(col2), col3 from T2 group by col1, col3 order by col1, max(col2), col3
    create index vi1 as select col1 from t1
    create index mv7 as select min_ever(col3) from t2
    create table t3(id bigint, a bigint, b bigint, primary key(id))
    create index mv10 as select a+3, max(b) from t3 group by a+3
    create index mv11 as select a+b, b+10, min(b) from t3 group by a+b, b+10
    create table t4(id bigint, col1 string, col2 bigint, primary key(id))
    create index mv14 as select min_ever(col1) from t4 group by col2
    create index mv15 as select max_ever(col1) from t4 group by col2
    create table t5(id bigint, a bigint, b string, c bigint, d bigint, e string, x bigint, primary key(id))
    create index mv16 as select a, b, max(x), c, d, e from t5 group by a, b, c, d, e order by a, b, max(x), c, d, e
    create index mv17 as select a, b, min(x), c, d, e from t5 group by a, b, c, d, e order by a, b, min(x), c, d, e
    create index mv18 as select a, b, c, max(x), d, e from t5 group by a, b, c, d, e order by a, b, c, max(x), d, e
    create index mv19 as select a, b, c, min(x), d, e from t5 group by a, b, c, d, e order by a, b, c, min(x), d, e
---
setup:
  steps:
    - query: INSERT INTO T1
        VALUES (1, 10, 1),
               (2, 10, 2),
               (3, 10, 3),
               (4, 10, 4),
               (5, 10, 5),
               (6, 20, 6),
               (7, 20, 7),
               (8, 20, 8),
               (9, 20, 9),
               (10, 20, 10),
               (11, 20, 11),
               (12, 20, 12),
               (13, 20, 13)
    - query: INSERT INTO T2(ID, COL1, COL2, COL3)
        VALUES (1, 1, 1, 100),
               (2, 1, 1, 1),
               (3, 1, 2, 2),
               (4, 1, 2, 200),
               (5, 2, 1, 200),
               (6, 2, 1, 3),
               (7, 2, 1, 400),
               (8, 2, 1, 400),
               (9, 2, 1, 400)
    - query: INSERT INTO T3
        VALUES (1, 10, 3),
               (2, 10, 3),
               (3, 10, 500),
               (4, 20, 2),
               (5, 20, 200),
               (6, 20, 2),
               (7, 20, 2),
               (8, 30, 6),
               (9, 30, 900),
               (10, 30, 6)
    - query: INSERT INTO T4
        VALUES (1, 'value1', 10),
               (2, 'value2', 10),
               (3, 'value3', 10),
               (4, 'value4', 10),
               (5, 'valueA', 20),
               (6, 'valueZ', 20)
    - query: INSERT INTO T5
        VALUES ( 1, 0, 'foo', 0, 1, 'e1', 1),
               ( 2, 0, 'foo', 0, 1, 'e1', 10),
               ( 3, 0, 'foo', 0, 1, 'e1', 2),
               ( 4, 0, 'foo', 0, 1, 'e1', 9),
               ( 5, 0, 'foo', 0, 1, 'e2', 1),
               ( 6, 0, 'foo', 0, 1, 'e2', 10),
               ( 7, 0, 'foo', 0, 2, 'e1', 2),
               ( 8, 0, 'foo', 0, 2, 'e1', 9),
               ( 9, 0, 'foo', 0, 2, 'e2', 3),
               (10, 0, 'foo', 0, 2, 'e2', 8),
               (11, 0, 'foo', 3, 1, 'e1', 3),
               (12, 0, 'foo', 3, 1, 'e1', 8),
               (13, 0, 'foo', 3, 2, 'e2', 2),
               (14, 0, 'foo', 3, 2, 'e2', 9),
               (15, 0, 'bar', 0, 1, 'e1', 0),
               (16, 0, 'bar', 0, 1, 'e1', 11),
               (17, 0, 'bar', 0, 1, 'e2', 0),
               (18, 0, 'bar', 0, 1, 'e2', 11)
---
test_block:
  name: agg-index-tests
  tests:
    -
      - query: select col1, sum(col2) from T1 group by col1;
      - explain: "AISCAN(MV1 <,> BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL1, _._1 AS _1)"
      - result: [{!l 10, !l 15}, {!l 20, !l 76}]
    -
      - query: select col1 from T1 group by col1;
      - explain: "ISCAN(VI1 <,>) | MAP (_ AS _0) | AGG () GROUP BY (_._0.COL1 AS _0) | MAP (_._0._0 AS COL1)"
      - result: [{!l 10}, {!l 20}]
    -
      - query: select sum(col2) from T1 group by col1;
      - explain: "AISCAN(MV1 <,> BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._1 AS _0)"
      - result: [{!l 15}, {!l 76}]
    -
      - query: select col1, sum(col2) from T1 group by col1 order by col1 asc;
      - explain: "AISCAN(MV1 <,> BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL1, _._1 AS _1)"
      - result: [{!l 10, !l 15}, {!l 20, !l 76}]
    -
      - query: select col1, sum(col2) from T1 group by col1 order by col1 desc;
      - explain: "AISCAN(MV1 <,> BY_GROUP REVERSE -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL1, _._1 AS _1)"
      - result: [{!l 20, !l 76}, {!l 10, !l 15}]
    -
      - query: select col1, sum(col2) + 1 from T1 group by col1;
      - explain: "AISCAN(MV1 <,> BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL1, _._1 + 1 AS _1)"
      - result: [{!l 10, !l 16}, {!l 20, !l 77}]
    -
       - query: select col1, max(col2) from T1 group by col1;
       - explain: "AISCAN(MV8 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[1]]) | MAP (_._0 AS COL1, _._1 AS _1)"
       - result: [{!l 10, !l 5}, {!l 20, !l 13}]
    -
       - query: select col1, max(col2) from T1 group by col1 order by col1;
       - explain: "AISCAN(MV8 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[1]]) | MAP (_._0 AS COL1, _._1 AS _1)"
       - result: [{!l 10, !l 5}, {!l 20, !l 13}]
    -
       - query: select col1, max(col2) from T1 group by col1 order by col1 desc;
       - explain: "AISCAN(MV8 <,> BY_GROUP REVERSE -> [_0: KEY:[0], _1: KEY:[1]]) | MAP (_._0 AS COL1, _._1 AS _1)"
       - result: [{!l 20, !l 13}, {!l 10, !l 5}]
    -
       - query: select col1, max(col2) from T1 where col1 = 10 group by col1;
       - explain: "AISCAN(MV8 [EQUALS promote(@c13 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1]]) | MAP (_._0 AS COL1, _._1 AS _1)"
       - result: [{!l 10, !l 5}]
    -
       # At some point, should be able to roll up values from the aggregate index. However, even
       # controlling for that, it can still use the index
       - query: select max(col2) from T1 use index (mv8);
       - supported_version: 4.1.9.0
       - explain: "ISCAN(MV8 <,>) | MAP (_ AS _0) | AGG (max_l(_._0.COL2) AS _0) | ON EMPTY NULL | MAP (_._0._0 AS _0)"
       - result: [{!l 13}]
    -
       - query: select max(col2) from T1 use index (mv8);
       - maxRows: 1
       # Cannot use FORCE_CONTINUATIONS with older versions due to: https://github.com/FoundationDB/fdb-record-layer/issues/3096
       # (Extra values being produced after exhausting source of an aggregate cursor)
       # Can remove once we do not care about backwards compatibility before 4.1.9.0
       - initialVersionLessThan: 4.1.9.0
       # Different (incorrect) behavior for different past versions
       - initialVersionAtLeast: 4.1.9.0
       - result: [{!l 13}]
       - result: []
    -
       # Min/max indexes need keep what amounts to a standard value index on their keys (in order to properly look up
       # the min/max). That index should be usable for normal queries just like a value index. Note that the scan is
       # NOT by group
       - query: select col2 from T1 where col1 = 10;
       - explain: "COVERING(MV8 [EQUALS promote(@c8 AS LONG)] -> [COL1: KEY[0], COL2: KEY[1], ID: KEY[3]]) | MAP (_.COL2 AS COL2)"
       - result: [{!l 1}, {!l 2}, {!l 3}, {!l 4}, {!l 5}]
    -
       - query: select col2 from T1 where col1 = 10 order by col2 desc;
       - explain: "COVERING(MV8 [EQUALS promote(@c8 AS LONG)] REVERSE -> [COL1: KEY[0], COL2: KEY[1], ID: KEY[3]]) | MAP (_.COL2 AS COL2)"
       - result: [{!l 5}, {!l 4}, {!l 3}, {!l 2}, {!l 1}]
    -
      - query: select min(col3) from T2 group by col1, col2;
      - supported_version: 4.1.9.0
      - explain: "ISCAN(MV2 <,>) | MAP (_ AS _0) | AGG (min_l(_._0.COL3) AS _0) GROUP BY (_._0.COL1 AS _0, _._0.COL2 AS _1) | MAP (_._1._0 AS _0)"
      - result: [{!l 1}, {!l 2}, {!l 3}]
    -
      - query: select min(col3) from T2 group by col1, col2;
       # Cannot use FORCE_CONTINUATIONS with older versions due to: https://github.com/FoundationDB/fdb-record-layer/issues/3096
       # (Extra values being produced after exhausting source of an aggregate cursor)
       # Can remove once we do not care about backwards compatibility before 4.1.9.0
      - maxRows: 1
      - initialVersionLessThan: 4.1.9.0
       # Different (incorrect) behavior for different past versions
      - initialVersionAtLeast: 4.1.9.0
      - result: [{!l 1}]
      - result: [{!l 2}]
      - result: [{!l 3}]
      - result: []
    -
      # this should use the aggregate index in the future, for now, it is using streaming aggregate
      # over base table scan.
      - query: select max(col2) from t2;
      - supported_version: 4.1.9.0
      - explain: "ISCAN(MV3 <,>) | MAP (_ AS _0) | AGG (max_l(_._0.COL2) AS _0) | ON EMPTY NULL | MAP (_._0._0 AS _0)"
      - result: [{!l 2}]
    -
      - query: select max(col2) from t2;
       # Cannot use FORCE_CONTINUATIONS with older versions due to: https://github.com/FoundationDB/fdb-record-layer/issues/3096
       # (Extra values being produced after exhausting source of an aggregate cursor)
       # Can remove once we do not care about backwards compatibility before 4.1.9.0
      - supported_version: 4.1.9.0
      - maxRows: 1
      - initialVersionLessThan: 4.1.9.0
      - result: [{!l 2}]
      - result: [{!null _}]
      - result: [{!l 2}] # ad infinitum
      - initialVersionAtLeast: 4.1.9.0
      - result: [{!l 2}]
      - result: []
    -
      - query: select col1, sum(col2) from T1 USE INDEX (vi1) group by col1;
      - explain: "ISCAN(VI1 <,>) | MAP (_ AS _0) | AGG (sum_l(_._0.COL2) AS _0) GROUP BY (_._0.COL1 AS _0) | MAP (_._0._0 AS COL1, _._1._0 AS _1)"
    -
      - query: select max(col2) from t2 group by col1, col3;
      - explain: "AISCAN(MV9 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._2 AS _0)"
      - result: [{!l 1}, {!l 1}, {!l 2}, {!l 2}, {!l 1}, {!l 1}, {!l 1}]
    -
      - query: select col1, col3, max(col2) from t2 group by col1, col3;
      - explain: "AISCAN(MV9 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._0 AS COL1, _._1 AS COL3, _._2 AS _2)"
      - result: [{COL1: 1, COL3: 1, !l 1}, {COL1: 1, COL3: 100, !l 1}, {COL1: 1, COL3: 2, !l 2}, {COL1: 1, COL3: 200, !l 2}, {COL1: 2, COL3: 3, !l 1}, {COL1: 2, COL3: 200, !l 1}, {COL1: 2, Col3: 400, !l 1}]
    -
      - query: select col3, max(col2) from t2 where col1 = 2 group by col1, col3;
      - explain: "AISCAN(MV9 [EQUALS promote(@c13 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._1 AS COL3, _._2 AS _1)"
      - result: [{COL3: 3, !l 1}, {COL3: 200, !l 1}, {COL3: 400, !l 1}]
    -
      - query: select col3, max(col2) from t2 where col1 = 1 group by col1, col3 order by max(col2) desc;
      - explain: "AISCAN(MV9 [EQUALS promote(@c13 AS LONG)] BY_GROUP REVERSE -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._1 AS COL3, _._2 AS _1)"
      - result: [{COL3: 200, !l 2}, {COL3: 2, !l 2}, {COL3: 100, !l 1}, {COL3: 1, !l 1}]
    -
      - query: select col3, max(col2) from t2 where col1 = 1 group by col1, col3 order by max(col2) desc;
      - maxRows: 3
      - explain: "AISCAN(MV9 [EQUALS promote(@c13 AS LONG)] BY_GROUP REVERSE -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._1 AS COL3, _._2 AS _1)"
      - result: [{COL3: 200, !l 2}, {COL3: 2, !l 2}, {COL3: 100, !l 1}]
      - result: [{COL3: 1, !l 1}]
    -
      - query: select col3, max(col2) from t2 where col1 = 1 group by col1, col3 having max(col2) < 2 order by max(col2) desc;
      - explain: "AISCAN(MV9 [EQUALS promote(@c13 AS LONG), [LESS_THAN promote(@c25 AS LONG)]] BY_GROUP REVERSE -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._1 AS COL3, _._2 AS _1)"
      - result: [{COL3: 100, !l 1}, {COL3: 1, !l 1}]
    -
      - query: select col3, max(col2) from t2 where col1 = 1 group by col1, col3 having max(col2) < 2 and max(col2) >= 1 order by max(col2) desc;
      - explain: "AISCAN(MV9 [EQUALS promote(@c13 AS LONG), [GREATER_THAN_OR_EQUALS promote(@c13 AS LONG) && LESS_THAN promote(@c25 AS LONG)]] BY_GROUP REVERSE -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._1 AS COL3, _._2 AS _1)"
      - result: [{COL3: 100, !l 1}, {COL3: 1, !l 1}]
    -
      - query: select t.* from (select col3, max(col2) as m from t2 where col1 = 1 group by col1, col3) as t where m < 2 order by m desc;
      - explain: "AISCAN(MV9 [EQUALS promote(@c21 AS LONG)] BY_GROUP REVERSE -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._1 AS COL3, _._2 AS M) | FILTER _.M LESS_THAN promote(@c33 AS LONG)"
      - result: [{COL3: 100, !l 1}, {COL3: 1, !l 1}]
    -
      - query: select col3, m from (select col3, max(col2) as m from t2 where col1 = 1 group by col1, col3) as t order by m desc;
      - explain: "AISCAN(MV9 [EQUALS promote(@c21 AS LONG)] BY_GROUP REVERSE -> [_0: KEY:[0], _1: KEY:[2], _2: KEY:[1]]) | MAP (_._1 AS COL3, _._2 AS M) | MAP (_.COL3 AS COL3, _.M AS M)"
      - result: [{COL3: 200, M: 2}, {COL3: 2, M: 2}, {COL3: 100, M: 1}, {COL3: 1, M: 1}]
    -
      # Permuted max index can be used as a value index on the underlying columns
      - query: select col3, col2 from t2 where col1 = 1 order by col3 asc;
      - explain: "COVERING(MV9 [EQUALS promote(@c10 AS LONG)] -> [COL1: KEY[0], COL2: KEY[2], COL3: KEY[1], ID: KEY[4]]) | MAP (_.COL3 AS COL3, _.COL2 AS COL2)"
      - result: [{COL3: 1, COL2: 1}, {COL3: 2, COL2: 2}, {COL3: 100, COL2: 1}, {COL3: 200, COL2: 2}]
    -
      - query: select col3, col2 from t2 where col1 = 1 order by col3 desc;
      - explain: "COVERING(MV9 [EQUALS promote(@c10 AS LONG)] REVERSE -> [COL1: KEY[0], COL2: KEY[2], COL3: KEY[1], ID: KEY[4]]) | MAP (_.COL3 AS COL3, _.COL2 AS COL2)"
      - result: [{COL3: 200, COL2: 2}, {COL3: 100, COL2: 1}, {COL3: 2, COL2: 2}, {COL3: 1, COL2: 1}]
    -
      # Permuted max index can also be used to evaluate other aggregate functions via aggregation and roll-up
      - query: select col3, sum(col2) as s from t2 use index (mv9) where col1 = 1 group by col1, col3 order by col3 asc;
      - supported_version: 4.1.9.0
      - explain: "ISCAN(MV9 [EQUALS promote(@c20 AS LONG)]) | MAP (_ AS _0) | AGG (sum_l(_._0.COL2) AS _0) GROUP BY (_._0.COL1 AS _0, _._0.COL3 AS _1) | MAP (_._0._1 AS COL3, _._1._0 AS S)"
      - result: [{COL3: 1, S: 1}, {COL3: 2, S: 2}, {COL3: 100, S: 1}, {COL3: 200, S: 2}]
    -
      - query: select col3, sum(col2) as s from t2 use index (mv9) where col1 = 1 group by col1, col3 order by col3 asc;
      # Cannot use FORCE_CONTINUATIONS with older versions due to: https://github.com/FoundationDB/fdb-record-layer/issues/3096
      # (Extra values being produced after exhausting source of an aggregate cursor)
      # Can remove once we do not care about backwards compatibility before 4.1.9.0
      - maxRows: 1
      - result: [{COL3: 1, S: 1}]
      - result: [{COL3: 2, S: 2}]
      - result: [{COL3: 100, S: 1}]
      - result: [{COL3: 200, S: 2}]
      - result: []
    -
      - query: select col3, sum(col2) as s from t2 use index (mv9) where col1 = 1 group by col1, col3 order by col3 desc;
      - supported_version: 4.1.9.0
      - explain: "ISCAN(MV9 [EQUALS promote(@c20 AS LONG)] REVERSE) | MAP (_ AS _0) | AGG (sum_l(_._0.COL2) AS _0) GROUP BY (_._0.COL1 AS _0, _._0.COL3 AS _1) | MAP (_._0._1 AS COL3, _._1._0 AS S)"
      - result: [{COL3: 200, S: 2}, {COL3: 100, S: 1}, {COL3: 2, S: 2}, {COL3: 1, S: 1}]
    -
      - query: select col3, sum(col2) as s from t2 use index (mv9) where col1 = 1 group by col1, col3 order by col3 desc;
      # Cannot use FORCE_CONTINUATIONS with older versions due to: https://github.com/FoundationDB/fdb-record-layer/issues/3096
      # (Extra values being produced after exhausting source of an aggregate cursor)
      # Can remove once we do not care about backwards compatibility before 4.1.9.0
      - maxRows: 1
      - result: [{COL3: 200, S: 2}]
      - result: [{COL3: 100, S: 1}]
      - result: [{COL3: 2, S: 2}]
      - result: [{COL3: 1, S: 1}]
      - result: []
#    -
#      # grouping by constant is not yet supported.
#      - query: select sum(col2) from t1 group by 3,2,1;
#      - result: [{!l 220}]
    -
      # make sure we're not choosing the aggregate index (because we aggregate by col3 not col2)
      - query: select max(col3) from t2 group by col1, col3;
      - explain: "ISCAN(MV3 <,>) | MAP (_ AS _0) | AGG (max_l(_._0.COL3) AS _0) GROUP BY (_._0.COL1 AS _0, _._0.COL3 AS _1) | MAP (_._1._0 AS _0)"
    -
      - query: select min_ever(col3) from T2 group by col1, col2;
      - result: [{!l 1}, {!l 2}, {!l 3}]
    -
      - query: select max_ever(col3) from T2 group by col1, col2;
      - result: [{!l 100}, {!l 200}, {!l 400}]
    -
      - query: select min_ever(col3) from t2
       # Cannot enable FORCE_CONTINUATIONS with ungrouped aggregate scan because of: https://github.com/FoundationDB/fdb-record-layer/issues/3206
      - maxRows: 0
      - explain: "AISCAN(MV7 <,> BY_GROUP -> [_0: VALUE:[0]]) | MAP (_ AS _0) | ON EMPTY NULL | MAP (_._0._0 AS _0)"
      - result: [{!l 1}]
    -
      - query: select min_ever(col3) from t2
      - explain: "AISCAN(MV7 <,> BY_GROUP -> [_0: VALUE:[0]]) | MAP (_ AS _0) | ON EMPTY NULL | MAP (_._0._0 AS _0)"
    -
      - query: select col1, max_ever(col2) from T1 group by col1;
      - explain: "AISCAN(MV6 <,> BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL1, _._1 AS _1)"
      - result: [{!l 10, !l 5}, {!l 20, !l 13}]
    -
      - query: select col1, min_ever(col2) from T1 group by col1;
      - explain: "AISCAN(MV12 <,> BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL1, _._1 AS _1)"
      - result: [{!l 10, !l 1}, {!l 20, !l 6}]
    -
      # TODO, check how this aligns with COLLATION support
      - query: select col2, max_ever(col1) from T4 group by col2;
      - explain: "AISCAN(MV15 <,> BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL2, _._1 AS _1)"
      - result: [{!l 10, 'value4'}, {!l 20, 'valueZ'}]
    -
      # TODO, check how this aligns with COLLATION support
      - query: select col2, min_ever(col1) from T4 group by col2;
      - explain: "AISCAN(MV14 <,> BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL2, _._1 AS _1)"
      - result: [{!l 10, 'value1'}, {!l 20, 'valueA'}]
    -
      - query: select col1, sum(col2) from T1 where col1 > 15 group by col1;
      - explain: "AISCAN(MV1 [[GREATER_THAN promote(@c13 AS LONG)]] BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._0 AS COL1, _._1 AS _1)"
      - result: [{!l 20, !l 76}]
    -
      - query: select sum(col2) from T1 where col1  = 10 group by col1
      - explain: "AISCAN(MV1 [EQUALS promote(@c11 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._1 AS _0)"
      - result: [{!l 15}]
    -
      - query: select sum(col2) from T1 where col1 <= 10 group by col1 having col1 > 0;
      - explain: "AISCAN(MV1 [[GREATER_THAN promote(@c19 AS LONG) && LESS_THAN_OR_EQUALS promote(@c12 AS LONG)]] BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._1 AS _0)"
      - result: [{!l 15}]
    -
      - query: select max(b) as x1, a+3 as x2 from t3 group by a+3;
      - explain: "AISCAN(MV10 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[1]]) | MAP (_._1 AS X1, _._0 AS X2)"
      - result: [{x1: 500, x2: 13}, {x1: 200, x2: 23}, {x1: 900, x2: 33}]
    -
      - query: select a+3 as x1, max(b) as x2 from t3 group by a+3;
      - explain: "AISCAN(MV10 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[1]]) | MAP (_._0 AS X1, _._1 AS X2)"
      - result: [{x1: 13, x2: 500}, {x1: 23, x2: 200}, {x1: 33, x2: 900}]
    -
      - query: select a+b as x1, min(b) as x2 from t3 group by a+b, b+10;
      - explain: "AISCAN(MV11 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2]]) | MAP (_._0 AS X1, _._2 AS X2)"
      - result: [{x1: 13, x2: 3}, {x1: 22, x2: 2}, {x1: 36, x2: 6}, {220, 200}, {510, 500}, {930, 900}]
    -
      - query: select M as x1, min(b) as x2 from t3 group by a+b as M, b+10;
      - explain: "AISCAN(MV11 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2]]) | MAP (_._0 AS X1, _._2 AS X2)"
      - result: [{x1: 13, x2: 3}, {x1: 22, x2: 2}, {x1: 36, x2: 6}, {220, 200}, {510, 500}, {930, 900}]
    -
      - query: select M as x1, min(b) as x2 from t3 group by a+b as M, b+10 as N;
      - explain: "AISCAN(MV11 <,> BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2]]) | MAP (_._0 AS X1, _._2 AS X2)"
      - result: [{x1: 13, x2: 3}, {x1: 22, x2: 2}, {x1: 36, x2: 6}, {220, 200}, {510, 500}, {930, 900}]
    -
      - query: select max(b) as x1, a+3 as x2 from t3 where a + 3 < 10000 group by a+3;
      - explain: "AISCAN(MV10 [[LESS_THAN promote(@c21 AS LONG)]] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1]]) | MAP (_._1 AS X1, _._0 AS X2)"
      - maxRows: 1
      - result: [{x1: 500, x2: 13}]
      - result: [{x1: 200, x2: 23}]
      - result: [{x1: 900, x2: 33}]
      - result: []
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 group by a, b, c, d, e order by b, max(x), c, d, e
      - explain: "AISCAN(MV16 [EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4)"
      - initialVersionLessThan: !current_version
      - error: "0AF00"
      - initialVersionAtLeast: !current_version
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  8},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  8},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  9},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  9},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                ]
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 group by a, b, c, d, e order by b, max(x)
      - explain: "AISCAN(MV16 [EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4)"
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  8},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  8},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  9},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  9},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 group by a, b, c, d, e order by b, min(x), c, d, e
      - explain: "AISCAN(MV17 [EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4)"
      - initialVersionLessThan: !current_version
      - error: "0AF00"
      - initialVersionAtLeast: !current_version
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  2},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  2},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  3},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  3},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 group by a, b, c, d, e order by b, min(x)
      - explain: "AISCAN(MV17 [EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4)"
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  2},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  2},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  3},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  3},
                ]
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 group by a, b, c, d, e order by b, c, max(x), d, e
      - explain: "AISCAN(MV18 [EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2], _3: KEY:[4], _4: KEY:[5], _5: KEY:[3]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4)"
      - initialVersionLessThan: !current_version
      - error: "0AF00"
      - initialVersionAtLeast: !current_version
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  8},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  9},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  8},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  9},
                ]
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 group by a, b, c, d, e order by b, c, max(x)
      - explain: "AISCAN(MV18 [EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2], _3: KEY:[4], _4: KEY:[5], _5: KEY:[3]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4)"
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  8},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  9},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  8},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  9},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 group by a, b, c, d, e order by b, c, min(x), d, e
      - explain: "AISCAN(MV19 [EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2], _3: KEY:[4], _4: KEY:[5], _5: KEY:[3]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4)"
      - initialVersionLessThan: !current_version
      - error: "0AF00"
      - initialVersionAtLeast: !current_version
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  2},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  3},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  2},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  3},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 group by a, b, c, d, e order by b, c, min(x)
      - explain: "AISCAN(MV19 [EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2], _3: KEY:[4], _4: KEY:[5], _5: KEY:[3]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4)"
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  2},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  3},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  2},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  3},
                ]
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 group by a, b, c, d, e having b IN ('foo', 'bar') order by max(x), c
      - explain: "[IN @c34] INUNION q0 -> { AISCAN(MV16 [EQUALS promote(@c19 AS LONG), EQUALS q0] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.C, _.B, _.D, _.E)"
      - result: [
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  8},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  8},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  9},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  9},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 group by a, b, c, d, e having b IN ('foo', 'bar') order by min(x), c
      - explain: "[IN @c34] INUNION q0 -> { AISCAN(MV17 [EQUALS promote(@c19 AS LONG), EQUALS q0] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.C, _.B, _.D, _.E)"
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  2},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  2},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  3},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  3},
                ]
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 group by a, b, c, d, e having b IN ('foo', 'bar') and d = 1 order by max(x), c
      - explain: "[IN @c34] INUNION q0 -> { AISCAN(MV16 [EQUALS promote(@c19 AS LONG), EQUALS q0] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | FILTER _._3 EQUALS promote(@c42 AS LONG) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.C, _.B, _.D, _.E)"
      - result: [
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  8},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 group by a, b, c, d, e having b IN ('foo', 'bar') and d = 1 order by min(x), c
      - explain: "[IN @c34] INUNION q0 -> { AISCAN(MV17 [EQUALS promote(@c19 AS LONG), EQUALS q0] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | FILTER _._3 EQUALS promote(@c42 AS LONG) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.C, _.B, _.D, _.E)"
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  3},
                ]
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 group by a, b, c, d, e having b IN ('foo', 'bar') and d IN (1, 2) order by max(x), c
      - explain: "[IN @c34] INUNION q0 -> { [IN promote(@c42 AS ARRAY(LONG))] INUNION q1 -> { AISCAN(MV16 [EQUALS promote(@c19 AS LONG), EQUALS q0] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | FILTER _._3 EQUALS q1 | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.C, _.D, _.E) } COMPARE BY (_._4, _.C, _.B, _.E)"
      - result: [
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  8},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  8},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  9},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  9},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 group by a, b, c, d, e having b IN ('foo', 'bar') and d IN (1, 2) order by min(x), c
      - explain: "[IN @c34] INUNION q0 -> { [IN promote(@c42 AS ARRAY(LONG))] INUNION q1 -> { AISCAN(MV17 [EQUALS promote(@c19 AS LONG), EQUALS q0] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | FILTER _._3 EQUALS q1 | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.C, _.D, _.E) } COMPARE BY (_._4, _.C, _.B, _.E)"
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  2},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  2},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  3},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  3},
                ]
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 group by a, b, c, d, e having b IN ('foo', 'bar') and d IN (1, 2) order by max(x), c, e
      - explain: "[IN @c34] INUNION q0 -> { [IN promote(@c42 AS ARRAY(LONG))] INUNION q1 -> { AISCAN(MV16 [EQUALS promote(@c19 AS LONG), EQUALS q0] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | FILTER _._3 EQUALS q1 | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.C, _.E, _.D) } COMPARE BY (_._4, _.C, _.E, _.B)"
      - initialVersionLessThan: !current_version
      - error: "0AF00"
      - initialVersionAtLeast: !current_version
      - result: [
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  8},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  8},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  9},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  9},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 group by a, b, c, d, e having b IN ('foo', 'bar') and d IN (1, 2) order by min(x), c, e
      - explain: "[IN @c34] INUNION q0 -> { [IN promote(@c42 AS ARRAY(LONG))] INUNION q1 -> { AISCAN(MV17 [EQUALS promote(@c19 AS LONG), EQUALS q0] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[3], _3: KEY:[4], _4: KEY:[5], _5: KEY:[2]]) | FILTER _._3 EQUALS q1 | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.C, _.E, _.D) } COMPARE BY (_._4, _.C, _.E, _.B)"
      - initialVersionLessThan: !current_version
      - error: "0AF00"
      - initialVersionAtLeast: !current_version
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  2},
                   {b: "foo", c: 3, d: 2, e: "e2", _4:  2},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  3},
                   {b: "foo", c: 3, d: 1, e: "e1", _4:  3},
                ]
    -
      - query: select b, c, d, e, max(x) from t5 where a = 0 and c = 0 group by a, b, c, d, e having b IN ('foo', 'bar') order by max(x), d
      - explain: "[IN @c38] INUNION q0 -> { AISCAN(MV18 [EQUALS promote(@c19 AS LONG), EQUALS q0, EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2], _3: KEY:[4], _4: KEY:[5], _5: KEY:[3]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.D, _.B, _.C, _.E)"
      - result: [
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  8},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  9},
                   {b: "foo", c: 0, d: 1, e: "e1", _4: 10},
                   {b: "foo", c: 0, d: 1, e: "e2", _4: 10},
                   {b: "bar", c: 0, d: 1, e: "e1", _4: 11},
                   {b: "bar", c: 0, d: 1, e: "e2", _4: 11},
                ]
    -
      - query: select b, c, d, e, min(x) from t5 where a = 0 and c = 0 group by a, b, c, d, e having b IN ('foo', 'bar') order by min(x), d
      - explain: "[IN @c38] INUNION q0 -> { AISCAN(MV19 [EQUALS promote(@c19 AS LONG), EQUALS q0, EQUALS promote(@c19 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: KEY:[1], _2: KEY:[2], _3: KEY:[4], _4: KEY:[5], _5: KEY:[3]]) | MAP (_._1 AS B, _._2 AS C, _._3 AS D, _._4 AS E, _._5 AS _4) } COMPARE BY (_._4, _.D, _.B, _.C, _.E)"
      - result: [
                   {b: "bar", c: 0, d: 1, e: "e1", _4:  0},
                   {b: "bar", c: 0, d: 1, e: "e2", _4:  0},
                   {b: "foo", c: 0, d: 1, e: "e1", _4:  1},
                   {b: "foo", c: 0, d: 1, e: "e2", _4:  1},
                   {b: "foo", c: 0, d: 2, e: "e1", _4:  2},
                   {b: "foo", c: 0, d: 2, e: "e2", _4:  3},
                ]
...
