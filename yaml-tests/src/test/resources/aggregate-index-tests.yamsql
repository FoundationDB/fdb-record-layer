#
# aggregate-index-tests.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table t1(id bigint, col1 bigint, col2 bigint, primary key(id))
    create index mv1 as select sum(col2) from t1 group by col1
    create index mv6 as select max_ever(col2) from t1 group by col1
    create index mv8 as select col1, max(col2) from t1 group by col1 order by col1
    create table t2(id bigint, col1 bigint, col2 bigint, col3 bigint, primary key(id))
    create index mv2 as select col1, col2 from t2 order by col1, col2
    create index mv3 as select col1, col3 from t2 order by col1, col3
    create index mv4 as select min_ever(col3) from T2 group by col1, col2
    create index mv5 as select max_ever(col3) from t2 group by col1, col2
    create index mv12 as select min_ever(col2) from t1 group by col1 with attributes LEGACY_EXTREMUM_EVER
    create index mv13 as select max_ever(col2) from t1 group by col1 with attributes LEGACY_EXTREMUM_EVER
    create index mv9 as select col1, max(col2), col3 from T2 group by col1, col3 order by col1, max(col2), col3
    create index vi1 as select col1 from t1
    create index mv7 as select min_ever(col3) from t2
    create table t3(id bigint, a bigint, b bigint, primary key(id))
    create index mv10 as select a+3, max(b) from t3 group by a+3
    create index mv11 as select a+b, b+10, min(b) from t3 group by a+b, b+10
    create table t4(id bigint, col1 string, col2 bigint, primary key(id))
    create index mv14 as select min_ever(col1) from t4 group by col2
    create index mv15 as select max_ever(col1) from t4 group by col2
    create table t5(id bigint, a bigint, b string, c bigint, d bigint, e string, x bigint, primary key(id))
    create index mv16 as select a, b, max(x), c, d, e from t5 group by a, b, c, d, e order by a, b, max(x), c, d, e
    create index mv17 as select a, b, min(x), c, d, e from t5 group by a, b, c, d, e order by a, b, min(x), c, d, e
    create index mv18 as select a, b, c, max(x), d, e from t5 group by a, b, c, d, e order by a, b, c, max(x), d, e
    create index mv19 as select a, b, c, min(x), d, e from t5 group by a, b, c, d, e order by a, b, c, min(x), d, e
---
setup:
  steps:
    - query: INSERT INTO T1
        VALUES (1, 10, 1),
               (2, 10, 2),
               (3, 10, 3),
               (4, 10, 4),
               (5, 10, 5),
               (6, 20, 6),
               (7, 20, 7),
               (8, 20, 8),
               (9, 20, 9),
               (10, 20, 10),
               (11, 20, 11),
               (12, 20, 12),
               (13, 20, 13)
    - query: INSERT INTO T2(ID, COL1, COL2, COL3)
        VALUES (1, 1, 1, 100),
               (2, 1, 1, 1),
               (3, 1, 2, 2),
               (4, 1, 2, 200),
               (5, 2, 1, 200),
               (6, 2, 1, 3),
               (7, 2, 1, 400),
               (8, 2, 1, 400),
               (9, 2, 1, 400)
    - query: INSERT INTO T3
        VALUES (1, 10, 3),
               (2, 10, 3),
               (3, 10, 500),
               (4, 20, 2),
               (5, 20, 200),
               (6, 20, 2),
               (7, 20, 2),
               (8, 30, 6),
               (9, 30, 900),
               (10, 30, 6)
    - query: INSERT INTO T4
        VALUES (1, 'value1', 10),
               (2, 'value2', 10),
               (3, 'value3', 10),
               (4, 'value4', 10),
               (5, 'valueA', 20),
               (6, 'valueZ', 20)
    - query: INSERT INTO T5
        VALUES ( 1, 0, 'foo', 0, 1, 'e1', 1),
               ( 2, 0, 'foo', 0, 1, 'e1', 10),
               ( 3, 0, 'foo', 0, 1, 'e1', 2),
               ( 4, 0, 'foo', 0, 1, 'e1', 9),
               ( 5, 0, 'foo', 0, 1, 'e2', 1),
               ( 6, 0, 'foo', 0, 1, 'e2', 10),
               ( 7, 0, 'foo', 0, 2, 'e1', 2),
               ( 8, 0, 'foo', 0, 2, 'e1', 9),
               ( 9, 0, 'foo', 0, 2, 'e2', 3),
               (10, 0, 'foo', 0, 2, 'e2', 8),
               (11, 0, 'foo', 3, 1, 'e1', 3),
               (12, 0, 'foo', 3, 1, 'e1', 8),
               (13, 0, 'foo', 3, 2, 'e2', 2),
               (14, 0, 'foo', 3, 2, 'e2', 9),
               (15, 0, 'bar', 0, 1, 'e1', 0),
               (16, 0, 'bar', 0, 1, 'e1', 11),
               (17, 0, 'bar', 0, 1, 'e2', 0),
               (18, 0, 'bar', 0, 1, 'e2', 11)
---
test_block:
  name: agg-index-tests
  tests:
    -
      - query: select sum(col2) from T1 where col1  = 10 group by col1
      - explain: "AISCAN(MV1 [EQUALS promote(@c11 AS LONG)] BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._1 AS _0)"
      - result: [{!l 15}]
...
