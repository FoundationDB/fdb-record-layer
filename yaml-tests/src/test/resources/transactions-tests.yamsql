#
# transacitons-tests.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2025 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This test serves as an example of using transaction setup, both via references and inline.
---
options:
    supported_version: !current_version
---
schema_template:
    create table table_t1(id bigint, col1 bigint, primary key(id))
---
# This document type creates a map of transaction setups that can be referenced in individual queries
# This helps to reduce duplication.
# The map is basically from a name (e.g. t1_less_than_50) to a statement to run at the start of every query.
# They're referenced in the query using `setupReference`. Right now it only supports a single statement as a string, but
# it could be expanded to support an array in the future.
transaction_setups:
  t1_less_than_50: create temporary function t1() on commit drop function AS
   SELECT * FROM table_t1 where id < 50
---
setup:
  connect: 1
  steps:
    - query: INSERT INTO table_T1 VALUES (10, 20), (30, 40), (50, 60)
---
test_block:
  name: transactions-tests
  tests:
    -
      # This query uses an inline transaction setup. It will execute the given statement when it executes the initial
      # query. If continuations are used (either explicitly, or via force-continuations), the setup will only
      # run on the initial query, not when executing the continuation.
      # Right now it only supports a single statement as a string, but it could be expanded to support an arra in the
      # future.
      - query: select * from t1 where id > 15;
      - setup: create temporary function t1() on commit drop function AS
               SELECT * FROM table_t1 where id < 30;
      - result: []
    -
      # This query references the transaction setup from above. This behaves exactly the same as the inline version
      # it just allows easier use of the same setup for many queries.
      - query: select * from t1 where id > 15;
      - setupReference: t1_less_than_50
      - result: [{id: 30, col1: 40}]
...
