#
# union.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table t1(id bigint, col1 bigint, col2 bigint, primary key(id))
    create table t2(id bigint, col1 bigint, col2 bigint, col3 bigint, primary key(id))
    create index vi1 as select col1 from t1
    create table t3(id bigint, a double, b bigint, primary key(id))
    create index mv10 as select count(*) from t3 group by a
    create table t4(id bigint, a bigint, b double, primary key(id))
    create table t5(id bigint, a string, b string, primary key(id))
    create table t6(id bigint, col1 bigint, col2 bigint, primary key(id))
    create table t7(id bigint, col1 bigint, col2 bigint, primary key(id))
    create index mv11 as select count(*) from t6
    create index mv12 as select count(*) from t7
---
setup:
  steps:
    - query: INSERT INTO T1
        VALUES (1, 10, 1),
               (2, 10, 2),
               (6, 20, 6),
               (7, 20, 7)
    - query: INSERT INTO T2(ID, COL1, COL2, COL3)
        VALUES (1, 1, 1, 100),
               (2, 1, 1, 1),
               (3, 1, 2, 2),
               (4, 1, 2, 200),
               (5, 2, 1, 200),
               (6, 2, 1, 3),
               (7, 2, 1, 400),
               (8, 2, 1, 400),
               (9, 2, 1, 400)
    - query: INSERT INTO T3(ID, A, B)
        VALUES (1, 1.0f, 2)
    - query: INSERT INTO T4(ID, A, B)
        VALUES (10, 10, 20.0f)
---
test_block:
  name: union-tests
  tests:
    -
      - query: select sum(a) as a, sum(b) as b from (select sum(col1) as a, count(*) as b from t1 union all select sum(col1) as a, count(*) as b from t2) as x
      # Versions prior to !current_version, this would infinite loop in a hard to assert about way due to: https://github.com/FoundationDB/fdb-record-layer/issues/3096
      - supported_version: !current_version
      - explain: "ISCAN(VI1 <,>) | MAP (_ AS _0) | AGG (sum_l(_._0.COL1) AS _0, count_star(*) AS _1) | ON EMPTY NULL | MAP (_._0._0 AS A, coalesce_long(_._0._1, promote(0l AS LONG)) AS B) ⊎ SCAN(<,>) | TFILTER T2 | MAP (_ AS _0) | AGG (sum_l(_._0.COL1) AS _0, count_star(*) AS _1) | ON EMPTY NULL | MAP (_._0._0 AS A, coalesce_long(_._0._1, promote(0l AS LONG)) AS B) | MAP (_ AS _0) | AGG (sum_l(_._0.A) AS _0, sum_l(_._0.B) AS _1) | ON EMPTY NULL | MAP (_._0._0 AS A, _._0._1 AS B)"
      - unorderedResult: [{A: 74 , B: 13}]
    -
      - query: select col1, col2 from t1 union all select col1, col2 from t1
      - unorderedResult: [{COL1: 10, COL2: 1},
                          {COL1: 10, COL2: 2},
                          {COL1: 20, COL2: 6},
                          {COL1: 20, COL2: 7},
                          {COL1: 10, COL2: 1},
                          {COL1: 10, COL2: 2},
                          {COL1: 20, COL2: 6},
                          {COL1: 20, COL2: 7}]
    -
      - query: select * from t1 union all select * from t1;
      - unorderedResult: [{ID: 1, COL1: 10, COL2: 1},
                          {ID: 2, COL1: 10, COL2: 2},
                          {ID: 6, COL1: 20, COL2: 6},
                          {ID: 7, COL1: 20, COL2: 7},
                          {ID: 1, COL1: 10, COL2: 1},
                          {ID: 2, COL1: 10, COL2: 2},
                          {ID: 6, COL1: 20, COL2: 6},
                          {ID: 7, COL1: 20, COL2: 7}]
    -
      - query: select * from t1 union all select id, col1, col2 from t1;
      - unorderedResult: [{ID: 1, COL1: 10, COL2: 1},
                          {ID: 2, COL1: 10, COL2: 2},
                          {ID: 6, COL1: 20, COL2: 6},
                          {ID: 7, COL1: 20, COL2: 7},
                          {ID: 1, COL1: 10, COL2: 1},
                          {ID: 2, COL1: 10, COL2: 2},
                          {ID: 6, COL1: 20, COL2: 6},
                          {ID: 7, COL1: 20, COL2: 7}]
    -
      - query: select id, col1, col2 from t1 union all select * from t1;
      - unorderedResult: [{ID: 1, COL1: 10, COL2: 1},
                          {ID: 2, COL1: 10, COL2: 2},
                          {ID: 6, COL1: 20, COL2: 6},
                          {ID: 7, COL1: 20, COL2: 7},
                          {ID: 1, COL1: 10, COL2: 1},
                          {ID: 2, COL1: 10, COL2: 2},
                          {ID: 6, COL1: 20, COL2: 6},
                          {ID: 7, COL1: 20, COL2: 7}]
    -
      - query: select id as W, col1 as X, col2 as Y from t1 union all select * from t1;
      - unorderedResult: [{W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7},
                          {W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7}]
    -
      - query: (select id as W, col1 as X, col2 as Y from t1) union all select * from t1;
      - unorderedResult: [{W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7},
                          {W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7}]
    -
      - query: select id as W, col1 as X, col2 as Y from t1 union all (select * from t1);
      - unorderedResult: [{W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7},
                          {W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7}]
    -
      - query: (select id as W, col1 as X, col2 as Y from t1 union all (select * from t1));
      - unorderedResult: [{W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7},
                          {W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7}]
    -
      - query: ((select id as W, col1 as X, col2 as Y from t1) union all select * from t1);
      - unorderedResult: [{W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7},
                          {W: 1, X: 10, Y: 1},
                          {W: 2, X: 10, Y: 2},
                          {W: 6, X: 20, Y: 6},
                          {W: 7, X: 20, Y: 7}]
    -
      - query: select a, b from t3 union all select a, b from t4
      - unorderedResult: [{A: 1.0, B: 2.0},
                          {A: 10.0, B: 20.0}]
    -
      - query: select sum(Y) as S from (select count(*) as Y from t3 where a < 10 group by a union all select count(*) from t4) as X
      # Does not work in force continuations mode on prior versions due to: https://github.com/FoundationDB/fdb-record-layer/issues/3096
      # Hard to write asserts for on older versions, but no unexpected mixed mode issues when running with older versions
      - supported_version: !current_version
      - explain: "AISCAN(MV10 [[LESS_THAN promote(@c22 AS DOUBLE)]] BY_GROUP -> [_0: KEY:[0], _1: VALUE:[0]]) | MAP (_._1 AS Y) | MAP (_.Y AS Y) ⊎ SCAN(<,>) | TFILTER T4 | MAP (_ AS _0) | AGG (count_star(*) AS _0) | ON EMPTY NULL | MAP (coalesce_long(_._0._0, promote(0l AS LONG)) AS _0) | MAP (_ AS _0) | AGG (sum_l(_._0.Y) AS _0) | ON EMPTY NULL | MAP (_._0._0 AS S)"
      - result: [{S: 2}]
    -
      - query: select sum(Y) as S from (select count(*) as Y from t3 union all select count(*) from t1) as X
      - supported_version: !current_version
      - explain: "SCAN(<,>) | TFILTER T3 | MAP (_ AS _0) | AGG (count_star(*) AS _0) | ON EMPTY NULL | MAP (coalesce_long(_._0._0, promote(0l AS LONG)) AS Y) | MAP (_.Y AS Y) ⊎ ISCAN(VI1 <,>) | MAP (_ AS _0) | AGG (count_star(*) AS _0) | ON EMPTY NULL | MAP (coalesce_long(_._0._0, promote(0l AS LONG)) AS _0) | MAP (_ AS _0) | AGG (sum_l(_._0.Y) AS _0) | ON EMPTY NULL | MAP (_._0._0 AS S)"
      - result: [{S: 5}]
    -
      - query: select col2 from t1 where exists (select a from t3 where col2 <= id union all select b from t4 where col2 <= id)
      - supported_version: !current_version
      - result: [{1}, {2}, {6}, {7}]
    -
      - query: select col1, col2 from t1 union all select col1 from t1
      - error: "42F64"
    -
      - query: select col1, col2 from t1 union select col1 from t1
      - error: "0AF00"
    -
      - query: select col1, col2 from t1 union all select a, b from t5
      - error: "42F65"
    -
      - query: select sum(Y) as S from (select count(*) as Y from t6 union all select count(*) from t7) as X
      - explain: "AISCAN(MV11 <,> BY_GROUP -> [_0: VALUE:[0]]) | MAP (_ AS _0) | ON EMPTY NULL | MAP (coalesce_long(_._0._0, promote(0l AS LONG)) AS Y) | MAP (_.Y AS Y) ⊎ AISCAN(MV12 <,> BY_GROUP -> [_0: VALUE:[0]]) | MAP (_ AS _0) | ON EMPTY NULL | MAP (coalesce_long(_._0._0, promote(0l AS LONG)) AS _0) | MAP (_ AS _0) | AGG (sum_l(_._0.Y) AS _0) | ON EMPTY NULL | MAP (_._0._0 AS S)"
      - maxRows: 0 # Disable force_continuations until we no longer care about versions before !current_version
      # Value returned on empty changed in 4.0.561.0 due to: https://github.com/FoundationDB/fdb-record-layer/pull/3029
      - initialVersionLessThan: 4.0.561.0
      - result: [{!null _ }]
      - initialVersionAtLeast: 4.0.561.0
      - result: [{0}]
    -
      # Copy of above query to simulate force_continuations before !current_version due to: https://github.com/FoundationDB/fdb-record-layer/issues/3096
      # Can remove once we no longer care about mixed mode with older versions
      - query: select sum(Y) as S from (select count(*) as Y from t6 union all select count(*) from t7) as X
      - supported_version: 4.1.4.0
      - maxRows: 1
      - initialVersionLessThan: !current_version
      - result: [{0}]
      - result: [{!null _}]
      - result: [{0}] # ad infinitum
      - initialVersionAtLeast: !current_version
      - result: [{0}]
      - result: []
...
