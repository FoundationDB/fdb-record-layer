#
# join-tests.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table emp(id bigint, fname string, lname string, dept_id bigint, primary key(id))
    create table dept(id bigint, name string, primary key(id))
    create table project(id bigint, name string, dsc string, emp_id bigint, primary key(id))
    create table a(ida bigint, a1 bigint, a2 bigint, a3 bigint, primary key(ida))
    create table b(idb bigint, b1 bigint, b2 bigint, b3 bigint, primary key(idb))
---
setup:
  steps:
    - query: INSERT INTO EMP
        VALUES (1, 'Jack', 'Williams', 1),
               (2, 'Thomas', 'Johnson', 1),
               (3, 'Emily', 'Martinez', 1),
               (4, 'Amelia', 'Johnson', 1),
               (5, 'Daniel', 'Miller', 2),
               (6, 'Chloe', 'Jones', 2),
               (7, 'Charlotte', 'Garcia', 2),
               (8, 'Megan', 'Miller', 3),
               (9, 'Harry', 'Smith', 3)
    - query: INSERT INTO DEPT
        VALUES (1, 'Engineering'),
               (2, 'Sales'),
               (3, 'Marketing')

    - query: INSERT INTO PROJECT
        VALUES (1, 'OLAP', 'Support OLAP queries', 3),
               (2, 'SEO', 'Increase visibility on popular search engines', 8),
               (3, 'Feedback', 'Turn customer feedback into actionable items', 5)
    - query: INSERT INTO A VALUES(1, 0, 100,0)
    - query: INSERT INTO B VALUES (4, 0, 0, 200)
---
test_block:
  tests:
    -
      - query: select ida from a where exists (select ida from a where ida = 1);
      - result: [{!l 1}]
    -
      - query: select sq2.y, sq1.x from (select ida as x from a) sq1, (select idb as y from b) sq2;
      - result: [{!l 4, !l 1}]
    -
      # Get names of people working in Engineering:
      - query: select fname, lname from emp, dept where emp.dept_id = dept.id and dept.name = 'Engineering';
      - unorderedResult: [{"Jack", "Williams"},
                          {"Thomas", "Johnson"},
                          {"Emily", "Martinez"},
                          {"Amelia", "Johnson"}]
    -
      # Get names of people working on a project
      - query: select fname, lname from emp where exists (select * from project where emp_id = emp.id);
      - unorderedResult: [{"Emily", "Martinez"},
                          {"Daniel", "Miller"},
                          {"Megan", "Miller"}]
    -
      # Get names of people working on a project in Sales department
      - query: select fname, lname from
                  (select fname, lname, dept_id from emp where exists (select * from project where emp_id = emp.id)) as sq,
                  dept
               where sq.dept_id = dept.id and dept.name = 'Sales';
      - unorderedResult: [{"Daniel", "Miller"}]
    -
      # three-way join to find which departments' corresponding projects.
      - query: select dept.name, project.name from emp, dept, project where emp.dept_id = dept.id and project.emp_id = emp.id;
      - unorderedResult: [{"Engineering", "OLAP"},
                          {"Sales", "Feedback"},
                          {"Marketing", "SEO"}]
    -
      # two-level left-nested join to find which departments' corresponding projects.
      - query: select sq.name, project.name from (select dept.name, emp.id from emp, dept where emp.dept_id = dept.id) as sq, project where project.emp_id = sq.id;
      - unorderedResult: [{"Engineering", "OLAP"},
                          {"Sales", "Feedback"},
                          {"Marketing", "SEO"}]
    -
      # two-level right-nested join to find which departments' corresponding projects.
      - query: select sq.name, project.name from project, (select dept.name, emp.id from emp, dept where emp.dept_id = dept.id) as sq where project.emp_id = sq.id;
      - unorderedResult: [{"Engineering", "OLAP"},
                          {"Sales", "Feedback"},
                          {"Marketing", "SEO"}]
    -
      # Join with NOT IN - get employees in Engineering excluding specific employee ids
      - query: select emp.id, fname, lname from emp, dept where emp.dept_id = dept.id and dept.name = 'Engineering' and emp.id not in (1, 3)
      - supported_version: 4.5.13.0
      - unorderedResult: [{ID: 2, FNAME: "Thomas", LNAME: "Johnson"},
                          {ID: 4, FNAME: "Amelia", LNAME: "Johnson"}]
    -
      # Join with NOT IN - get projects excluding certain project ids
      - query: select project.id, project.name from emp, project where project.emp_id = emp.id and project.id not in (1, 2)
      - supported_version: 4.5.13.0
      - unorderedResult: [{ID: 3, NAME: "Feedback"}]
    -
      # Three-way join with NOT IN - departments with projects, excluding specific departments
      - query: select dept.id, dept.name, project.name from emp, dept, project where emp.dept_id = dept.id and project.emp_id = emp.id and dept.id not in (1)
      - supported_version: 4.5.13.0
      - unorderedResult: [{ID: 2, "Sales", "Feedback"},
                          {ID: 3, "Marketing", "SEO"}]
    -
      # Join with NOT IN - employees in Sales department excluding specific ids
      - query: select emp.id from emp, dept where emp.dept_id = dept.id and dept.id = 2 and emp.id not in (5, 6)
      - supported_version: 4.5.13.0
      - unorderedResult: [{7}]
    -
      # Join with NOT IN - all employees except those in excluded departments
      - query: select emp.id, fname from emp, dept where emp.dept_id = dept.id and dept.id not in (1, 3)
      - supported_version: 4.5.13.0
      - unorderedResult: [{ID: 5, FNAME: "Daniel"},
                          {ID: 6, FNAME: "Chloe"},
                          {ID: 7, FNAME: "Charlotte"}]
    -
      # Join with NOT IN on non-existent values (should return all matching rows)
      - query: select emp.id from emp, dept where emp.dept_id = dept.id and dept.id = 1 and emp.id not in (10, 20, 30)
      - supported_version: 4.5.13.0
      - unorderedResult: [{1}, {2}, {3}, {4}]
    -
      # Subquery join with NOT IN
      - query: select fname, lname from (select fname, lname, emp.id from emp, dept where emp.dept_id = dept.id and dept.name = 'Engineering') as sq where sq.id not in (1, 4)
      - supported_version: 4.5.13.0
      - unorderedResult: [{"Thomas", "Johnson"},
                          {"Emily", "Martinez"}]
    -
      # Join with multiple NOT IN conditions
      - query: select project.id, project.name from emp, dept, project where emp.dept_id = dept.id and project.emp_id = emp.id and dept.id not in (3) and project.id not in (3)
      - supported_version: 4.5.13.0
      - unorderedResult: [{ID: 1, NAME: "OLAP"}]
    -
      # Join with IN - get specific employees in Engineering
      - query: select emp.id, fname, lname from emp, dept where emp.dept_id = dept.id and dept.name = 'Engineering' and emp.id in (1, 3)
      - unorderedResult: [{ID: 1, FNAME: "Jack", LNAME: "Williams"},
                          {ID: 3, FNAME: "Emily", LNAME: "Martinez"}]
    -
      # Join with IN - get specific projects
      - query: select project.id, project.name from emp, project where project.emp_id = emp.id and project.id in (1, 2)
      - unorderedResult: [{ID: 1, NAME: "OLAP"},
                          {ID: 2, NAME: "SEO"}]
    -
      # Three-way join with IN - departments with projects, including only specific departments
      - query: select dept.id, dept.name, project.name from emp, dept, project where emp.dept_id = dept.id and project.emp_id = emp.id and dept.id in (1, 2)
      - unorderedResult: [{ID: 1, "Engineering", "OLAP"},
                          {ID: 2, "Sales", "Feedback"}]
    -
      # Join with IN - employees in specific departments
      - query: select emp.id, fname from emp, dept where emp.dept_id = dept.id and dept.id in (2, 3)
      - unorderedResult: [{ID: 5, FNAME: "Daniel"},
                          {ID: 6, FNAME: "Chloe"},
                          {ID: 7, FNAME: "Charlotte"},
                          {ID: 8, FNAME: "Megan"},
                          {ID: 9, FNAME: "Harry"}]
    -
      # Join with IN - single value in list
      - query: select emp.id, fname, lname from emp, dept where emp.dept_id = dept.id and dept.id = 1 and emp.id in (2)
      - unorderedResult: [{ID: 2, FNAME: "Thomas", LNAME: "Johnson"}]
    -
      # Join with IN - employees in Sales department with specific ids
      - query: select emp.id from emp, dept where emp.dept_id = dept.id and dept.id = 2 and emp.id in (5, 6, 7)
      - unorderedResult: [{5}, {6}, {7}]
    -
      # Subquery join with IN
      - query: select fname, lname from (select fname, lname, emp.id from emp, dept where emp.dept_id = dept.id and dept.name = 'Engineering') as sq where sq.id in (1, 4)
      - unorderedResult: [{"Jack", "Williams"},
                          {"Amelia", "Johnson"}]
    -
      # Join with both IN and NOT IN conditions
      - query: select emp.id, fname from emp, dept where emp.dept_id = dept.id and dept.id in (1, 2) and emp.id not in (1, 5)
      - supported_version: 4.5.13.0
      - unorderedResult: [{ID: 2, FNAME: "Thomas"},
                          {ID: 3, FNAME: "Emily"},
                          {ID: 4, FNAME: "Amelia"},
                          {ID: 6, FNAME: "Chloe"},
                          {ID: 7, FNAME: "Charlotte"}]
    -
      # Join with IN on non-existent values (should return empty)
      - query: select emp.id from emp, dept where emp.dept_id = dept.id and dept.id = 1 and emp.id in (10, 20, 30)
      - result: []
...
