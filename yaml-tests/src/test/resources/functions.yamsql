#
# functions.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create type as struct T(T1 integer)
    create table A(a1 bigint, a2 integer, a3 string, a4 boolean, a5 integer array, a6 T, a7 float, a8 double, a9 bytes, primary key(a1))
    create table B(b1 bigint, b2 double, primary key(b1, b2))
    create type as struct U(T1 integer, A string, B double)
    create table C(c1 bigint, st U, primary key(c1))
---
setup:
  steps:
    # TODO a5 integer array add support
    # TODO a7 float add insert support
    # TODO a9 bytes add insert support
    - query: insert into A(a1, a2, a3, a4, a6(t1), a8) values (1, 1, '1', true, (1), 1.0)
    - query: insert into B values (1, 2), (3, null), (null, 4), (null, null)
    - query: insert into C values (1, (2, 'b', 2.0)), (2, (3, 'c', 3.0)), (3, (4, 'd', 4.0)), (4, null)
---
test_block:
  tests:
    -
      - query: select greatest(a3, '0'), greatest(a3, '1'), greatest(a3, '2'), greatest(a3, null) from A
      - result: [{_0: '1', _1: '1', _2: '2', !null _}]
    -
      - query: select greatest(a4, false), greatest(a4, true), greatest(a4, null), greatest(false, false) from A
      - result: [{_0: true, _1: true, _2: !null _, false}]
    -
      - query: select greatest(a5, a5) from A
      - error: '22F00'
    -
      - query: select greatest(a6, a6) from A
      - error: '22F00'
      # Note: the following query has been disabled since July 2023
#    -
#      - query: select greatest(a7, 0), greatest(a7, 1), greatest(a7, 2), greatest(a7, null) from A
#       - result: [{_0: 1.0, _1: 1.0, _2: 2.0, !null _}]
    -
      - query: select greatest(a8, 0), greatest(a8, 1), greatest(a8, 2), greatest(a8, null) from A
      - result: [{_0: 1.0, _1: 1.0, _2: 2.0, !null _}]
    -
      - query: select greatest(a9, '0'), greatest(a9, '1'), greatest(a9, '2'), greatest(a9, null) from A
      - error: '22000'
    -
      - query: select greatest(a1, a2, a8), greatest(1, 2, 3.0, 4, 5) from A
      - result: [{_0: 1.0, _1: 5.0}]
    -
      - query: select least(a1, 0), least(a1, 1), least(a1, 2), least(a1, null) from A
      - result: [{_0: 0, _1: 1, _2: 1, !null _}]
    -
      - query: select least(a2, 0), least(a2, 1), least(a2, 2), least(a2, null) from A
      - result: [{_0: 0, _1: 1, _2: 1, !null _}]
    -
      - query: select least(a3, '0'), least(a3, '1'), least(a3, '2'), least(a3, null) from A
      - result: [{_0: '0', _1: '1', _2: '1', !null _}]
    -
      - query: select least(a4, false), least(a4, true), least(a4, null), least(false, false), least(true, true) from A
      - result: [{_0: false, _1: true, _2: !null _, _3: false, _4: true}]
    -
      - query: select least(a5, a5) from A
      - error: '22F00'
    -
      - query: select least(a6, a6) from A
      - error: '22F00'
      # Note: the following query has been disabled since July 2023
#    -
#      - query: select least(a7, 0), least(a7, 1), least(a7, 2), least(a7, null) from A
#      - result: [{_0: 0.0, _1: 1.0, _2: 1.0, !null _}]
    -
      - query: select least(a8, 0), least(a8, 1), least(a8, 2), least(a8, null) from A
      - result: [{_0: 0.0, _1: 1.0, _2: 1.0, !null _}]
    -
      - query: select least(a9, '0'), least(a9, '1'), least(a9, '2'), least(a9, null) from A
      - error: '22000'
    -
      - query: select least(a1, a2, a8), least(1, 2, 3.0, 4, 5) from A
      - result: [{_0: 1.0, _1: 1.0}]
    -
      - query: select coalesce(null, null, 5), coalesce(null, 1, null), coalesce(null, a1, a8) from A
      - supported_version: 4.1.9.0 # Force continuations does not work on older versions due to: https://github.com/FoundationDB/fdb-record-layer/issues/3218
      - result: [{_0: 5, _1: 1, _2: 1.0}]
    -
      - query: select b1, b2, coalesce(b1, b2, 42) from B
      - unorderedResult: [
          {b1: 1, b2: 2.0, 1.0},
          {b1: 3, b2: !null _, 3.0},
          {b1: !null _, b2: 4.0, 4.0},
          {b1: !null _, b2: !null _, 42.0}]
    -
      - query: select coalesce(null, null, st, null) from C
      - unorderedResult: [
          {{ T1: 2, A: 'b', B: 2.0}},
          {{ T1: 3, A: 'c', B: 3.0}},
          {{ T1: 4, A: 'd', B: 4.0}},
          {!null _}]
    -
      - query: select coalesce(st, st) from C
      - unorderedResult: [
          {{ T1: 2, A: 'b', B: 2.0}},
          {{ T1: 3, A: 'c', B: 3.0}},
          {{ T1: 4, A: 'd', B: 4.0}},
          {!null _}]
    -
      - query: select coalesce(null, st) from C
      - unorderedResult: [
          {{ T1: 2, A: 'b', B: 2.0}},
          {{ T1: 3, A: 'c', B: 3.0}},
          {{ T1: 4, A: 'd', B: 4.0}},
          {!null _}]
    -
      - query: select coalesce(null, (1, 1.0, 'a', true)) from C
      - supported_version: 4.1.9.0 # Force continuations does not work on older versions due to: https://github.com/FoundationDB/fdb-record-layer/issues/3218
      - unorderedResult: [
          {{ _0: 1, _1: 1.0, _2: 'a', _3: true}},
          {{ _0: 1, _1: 1.0, _2: 'a', _3: true}},
          {{ _0: 1, _1: 1.0, _2: 'a', _3: true}},
          {{ _0: 1, _1: 1.0, _2: 'a', _3: true}}]
---
test_block:
  preset: single_repetition_ordered
  tests:
    -
      - query: select coalesce(st, (5, 'e', 5.0)) from C where c1 = 4
      - unorderedResult: [
          {{ _0: 5, _1: 'e', _2: 5.0}}]
    -
      # "new" should not be quoted. TODO ([Post] Fix identifiers case-sensitivity matching in plan generator)
      - query: update C set st = coalesce(st, null) where c1 = 4 returning "new".st
      - unorderedResult: [
          {!null _}]
    -
      # "new" should not be quoted. TODO ([Post] Fix identifiers case-sensitivity matching in plan generator)
      - query: update C set st = coalesce(st, (5, 'e', 5.0)) where c1 = 4 returning "new".st
      - unorderedResult: [
            {{ T1: 5, A: 'e', B: 5.0}}]
...


