#
# nested-with-nulls.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2025 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    # TODO: When we have support for nullability constraints, add not null to the a columns.
    #       Then validate that we can still handle queries where nested a's (through nullable Bs) are null
    create type as struct s1( a string, b bigint )
    create type as struct s2( a s1, b s1 NULL )
    create table t1(id bigint, a s2, b s2 NULL, primary key(id))
    create index i1 as select a.b.a from t1
    create index i2 as select a.a.b from t1 where a.a.b is not null
---
setup:
  steps:
    - query: INSERT INTO T1 VALUES
       (100,  ( ('a1', 1), ('a2', 2) ), ( ('a3', 3), ('a4', 4) ) ),
       (101,  ( ('a1', 1), ('a2', 2) ), ( ('a3', 3), null ) ),
       (102,  ( ('a1', 1), ('a2', 2) ), null ),
       (103,  ( ('a1', 1), null ), null ),
       (104,  ( ('a1p', null), ('a2p', null) ), ( ('a3p', null), ('a4p', null) ) ),
       (105,  ( ('a1p', null), ('a2p', null) ), ( ('a3p', null), null ) ),
       (106,  ( ('a1p', null), ('a2p', null) ), null ),
       (107,  ( ('a1p', null), null ), null )
---
test_block:
  name: nested-with-nulls-tests
  options:
    connection_options:
      DISABLE_PLANNER_REWRITING: true
  tests:
    -
      - query: select id from t1 where a.a.a IS NULL
      - explain: "ISCAN(I1) | FILTER _.A.A.A IS_NULL | MAP (_.ID AS ID)"
      - result: []
    -
      - query: select id from t1 where a.a.b IS NULL
      - explain: "ISCAN(I1) | FILTER _.A.A.B IS_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
    -
      - query: select id from t1 where a.b.a IS NULL
      - explain: "COVERING(I1) | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 103 }, { ID: 107 }]
    -
      - query: select id from t1 where a.b.b IS NULL
      - explain: "ISCAN(I1) | FILTER _.A.B.B IS_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
    -
      - query: select id from t1 where b.a.a IS NULL
      - explain: "ISCAN(I1) | FILTER _.B.A.A IS_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 102 }, { ID: 103 }, { ID: 106 }, { ID: 107 } ]
    -
      - query: select id from t1 where b.a.b IS NULL
      - explain: "ISCAN(I1) | FILTER _.B.A.B IS_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 } ]
    -
      - query: select id from t1 where b.b.a IS NULL
      - explain: "ISCAN(I1) | FILTER _.B.B.A IS_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 105 }, { ID: 106 }, { ID: 107 } ]
    -
      - query: select id from t1 where b.b.b IS NULL
      - explain: "ISCAN(I1) | FILTER _.B.B.B IS_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 } ]
    -
      - query: select id from t1 where a.a.a IS NOT NULL
      - explain: "ISCAN(I1) | FILTER _.A.A.A NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 } ]
    -
      - query: select id from t1 where a.a.b IS NOT NULL
      - explain: "COVERING(I2) | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }]
    -
      - query: select id from t1 where a.b.a IS NOT NULL
      - explain: "COVERING(I1) | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 104 }, { ID: 105 }, { ID: 106 }]
    -
      - query: select id from t1 where a.b.b IS NOT NULL
      - explain: "ISCAN(I1) | FILTER _.A.B.B NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }]
    -
      - query: select id from t1 where b.a.a IS NOT NULL
      - explain: "ISCAN(I1) | FILTER _.B.A.A NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 104 }, { ID: 105 }]
    -
      - query: select id from t1 where b.a.b IS NOT NULL
      - explain: "ISCAN(I1) | FILTER _.B.A.B NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }]
    -
      - query: select id from t1 where b.b.a IS NOT NULL
      - explain: "ISCAN(I1) | FILTER _.B.B.A NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 104 } ]
    -
      - query: select id from t1 where b.b.b IS NOT NULL
      - explain: "ISCAN(I1) | FILTER _.B.B.B NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }]
    -
      - query: select id from t1 where coalesce(a.a.a, 'blah') = 'a1'
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.A.A, promote(@c14 AS STRING)) EQUALS promote(@c17 AS STRING) | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }]
    -
      - query: select id from t1 where coalesce(a.a.a, 'blah') = 'a1p'
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.A.A, promote(@c14 AS STRING)) EQUALS promote(@c17 AS STRING) | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
    -
      # As 'blah' is not nullable, so this predicate could be simplified to TRUE
      - query: select id from t1 where coalesce(a.a.a, 'blah') IS NOT NULL
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.A.A, promote(@c14 AS STRING)) NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
    -
      # The coalesce could be removed and replaced with a simple field access
      - query: select id from t1 where coalesce(a.a.a, null) IS NOT NULL
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.A.A, NULL) NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
    -
      - query: select id from t1 where coalesce(a.b.a, 'a2') = 'a2'
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.B.A, promote(@c14 AS STRING)) EQUALS promote(@c14 AS STRING) | MAP (_.ID AS ID)"
      - unorderedResult: [ { ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 107 }]
    -
      - query: select id from t1 where coalesce(a.b.a, 'foo') = 'foo'
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.B.A, promote(@c14 AS STRING)) EQUALS promote(@c14 AS STRING) | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 103 }, { ID: 107 }]
    -
      # One of the two coalesce values is not null, so this could be simplified to FALSE
      - query: select id from t1 where coalesce(a.b.a, 'foo') IS NULL
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.B.A, promote(@c14 AS STRING)) IS_NULL | MAP (_.ID AS ID)"
      - result: []
    -
      # This cannot be simplified to FALSE, as both of the coalesce values are nullable. We could however remove the coalesce entirely
      - query: select id from t1 where coalesce(a.b.a, null) IS NULL
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.B.A, NULL) IS_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 103 }, { ID: 107 }]
    -
      # One of the two coalesce values is not null, so this could be simplified to TRUE
      - query: select id from t1 where coalesce(a.b.a, 'foo') IS NOT NULL
      - explain: "ISCAN(I1) | FILTER coalesce_string(_.A.B.A, promote(@c14 AS STRING)) NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
    -
      - query: select id from t1 where coalesce(b.a.b, 3) = 3
      - explain: "ISCAN(I1) | FILTER coalesce_long(_.B.A.B, promote(@c14 AS LONG)) EQUALS promote(@c14 AS LONG) | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
    -
      - query: select id from t1 where coalesce(b.a.b, 42) = 42
      - explain: "ISCAN(I1) | FILTER coalesce_long(_.B.A.B, promote(@c14 AS LONG)) EQUALS promote(@c14 AS LONG) | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
    -
      # One of the two coalesce values is not null, so this could be simplified to FALSE
      - query: select id from t1 where coalesce(b.a.b, 42) IS NULL
      - explain: "ISCAN(I1) | FILTER coalesce_long(_.B.A.B, promote(@c14 AS LONG)) IS_NULL | MAP (_.ID AS ID)"
      - result: []
    -
      # One of the two coalesce values is not null, so this could be simplified to TRUE
      - query: select id from t1 where coalesce(b.a.b, 42) IS NOT NULL
      - explain: "ISCAN(I1) | FILTER coalesce_long(_.B.A.B, promote(@c14 AS LONG)) NOT_NULL | MAP (_.ID AS ID)"
      - unorderedResult: [{ ID: 100 }, { ID: 101 }, { ID: 102 }, { ID: 103 }, { ID: 104 }, { ID: 105 }, { ID: 106 }, { ID: 107 }]
...
