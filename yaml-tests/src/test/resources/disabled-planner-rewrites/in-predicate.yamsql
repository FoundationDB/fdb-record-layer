#
# in-predicate.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create type as struct ts(sa bigint, sb bigint)
    create type as struct fruit_type(name string, color string)
    create table ta(a bigint, b bigint, c double, d boolean, e string, f ts, primary key(a))
    create table array_table(id bigint, fruits string array, numbers bigint array, fruit_records fruit_type array, primary key(id))
    create index f1 as select f.sa, f.sb from ta order by f.sa, f.sb
---
setup:
  steps:
    - query: INSERT INTO TA
        VALUES (0, 9, 1.23, true,  'foo', (90 as sa, 9 as sb)),
               (1, 8, 4.56, false, 'bar', (81 as sa, 18 as sb)),
               (2, 7, 7.89, true,  'doe', (72 as sa, 27 as sb)),
               (3, 6, 0.12, false, 'arc', (63 as sa, 36 as sb)),
               (4, 5, 3.45, true,  'per', (54 as sa, 45 as sb))
    # with target fields and reorderings
    - query: INSERT INTO TA(a, b, c, d, e, f(sa, sb))
        VALUES (5, 4, 6.78, false, 'doe', (45, 54)),
               (6, 3, 9.01, true,  'foo', (36, 63)),
               (7, 2, 2.34, false, 'arc', (27, 72)),
               (8, 1, 5.67, true , 'bar', (18, 81)),
               (9, 0, 8.90, false, 'doe', (9, 90))
    # Array table data
    - query: INSERT INTO array_table
        VALUES (1, ['apple', 'banana', 'cherry'], [10, 20, 30], [('apple' as name, 'red' as color), ('banana' as name, 'yellow' as color)]),
               (2, ['grape', 'orange'], [40, 50], [('grape' as name, 'purple' as color)]),
               (3, ['apple', 'grape', 'mango'], [10, 60, 70], [('mango' as name, 'orange' as color), ('apple' as name, 'green' as color)]),
               (4, ['kiwi'], [80], [('kiwi' as name, 'brown' as color)]),
               (5, ['banana', 'cherry', 'date'], [20, 90, 100], [('date' as name, 'brown' as color), ('cherry' as name, 'red' as color)])
---
test_block:
  tests:
    -
      # LONG value matched against IN list of only LONG values
      - query: select a, b from ta where b in (1, 3, 5, 7)
      - unorderedResult: [{A: 2, 7}, {A: 4, 5}, {A: 6, 3}, {A: 8, 1}]
    -
      # LONG value matched against singleton IN list
      - query: select a, b from ta where b in (6)
      - result: [{A: 3, 6}]
    -
      # LONG value matched against empty IN list
      - query: select a, b from ta where b in ()
      - error: "42601"
    -
      # LONG value matched against IN list with no matches
      - query: select a, b from ta where b in (10, 33, 66)
      - result: []
    -
      # LONG value matched against IN list of LONG-resultant arithmetic values
      - query: select a, b from ta where b in (1 + 0, 3 + 0, 5, 7)
      - unorderedResult: [{A: 2, 7}, {A: 4, 5}, {A: 6, 3}, {A: 8, 1}]
    -
      # LONG value matched against IN list of repeated LONG values
      - query: select a, b from ta where b in (1, 1, 1, 1)
      - explain: "ISCAN(F1 <,>) | FLATMAP q0 -> { EXPLODE arrayDistinct(promote(@c10 AS ARRAY(LONG))) | FILTER q0.B EQUALS _ AS q1 RETURN (q0.A AS A, q0.B AS B) }"
      - initialVersionAtLeast: !current_version
      - result: [{A: 8, 1}]
      # Duplicate values in in-lists lead to duplicate results if the IN predicate is planned as a nested loop join in earlier versions
      - initialVersionLessThan: !current_version
      - result: [{A: 8, 1}, {A: 8, 1}, {A: 8, 1}, {A: 8, 1}]
    -
      # LONG value matched against IN list of repeated LONG values
      - query: select a, b from ta where b in (1, 2, 1, 3)
      - explain: "ISCAN(F1 <,>) | FLATMAP q0 -> { EXPLODE arrayDistinct(promote(@c10 AS ARRAY(LONG))) | FILTER q0.B EQUALS _ AS q1 RETURN (q0.A AS A, q0.B AS B) }"
      - initialVersionAtLeast: !current_version
      - unorderedResult: [{A: 6, 3}, {A: 7, 2}, {A: 8, 1}]
      # Duplicate values in in-lists lead to duplicate results if the IN predicate is planned as a nested loop join in earlier versions
      - initialVersionLessThan: !current_version
      - unorderedResult: [{A: 6, 3}, {A: 7, 2}, {A: 8, 1}, {A: 8, 1}]
    -
      # LONG value matched against IN list of repeated LONG-resultant simple arithmetic values
      - query: select a, b from ta where b in (1 + 0, 1 + 0, 1 + 0, 1 + 0)
      - explain: "ISCAN(F1 <,>) | FLATMAP q0 -> { EXPLODE arrayDistinct(promote(array(@c11 + @c13, @c11 + @c13, @c11 + @c13, @c11 + @c13) AS ARRAY(LONG))) | FILTER q0.B EQUALS _ AS q1 RETURN (q0.A AS A, q0.B AS B) }"
      - initialVersionAtLeast: !current_version
      - result: [{A: 8, 1}]
      # Duplicate values in in-lists lead to duplicate results if the IN predicate is planned as a nested loop join in earlier versions
      - initialVersionLessThan: !current_version
      - result: [{A: 8, 1}, {A: 8, 1}, {A: 8, 1}, {A: 8, 1}]
    -
      # LONG value matched against IN list of repeated LONG-resultant simple expressions
      - query: select a, b from ta where b in (1 + 0, 0 + 1)
      - explain: "ISCAN(F1 <,>) | FLATMAP q0 -> { EXPLODE arrayDistinct(promote(array(@c11 + @c13, @c13 + @c11) AS ARRAY(LONG))) | FILTER q0.B EQUALS _ AS q1 RETURN (q0.A AS A, q0.B AS B) }"
      - initialVersionAtLeast: !current_version
      - result: [ { A: 8, 1 } ]
      # Duplicate values in in-lists lead to duplicate results if the IN predicate is planned as a nested loop join in earlier versions
      - initialVersionLessThan: !current_version
      - result: [{A: 8, 1}, {A: 8, 1}]
    -
      # _ matched against IN list containing NULL value
      - query: select a, b from ta where b in (1, null, 2, 1, 3, null)
      - error: "42809"
    -
      # DOUBLE value matched against IN list of DOUBLE values
      - query: select a, c from ta where c in (4.56, 3.45, 2.34)
      - explain: "ISCAN(F1 <,>) | FLATMAP q0 -> { EXPLODE arrayDistinct(@c10) | FILTER q0.C EQUALS _ AS q1 RETURN (q0.A AS A, q0.C AS C) }"
      - unorderedResult: [{A: 1, 4.56}, {A: 4, 3.45}, {A: 7, 2.34}]
    -
      # DOUBLE value matched against singleton IN list of DOUBLE value
      - query: select a, c from ta where c in (9.01)
      - result: [{A: 6, 9.01}]
    -
      # DOUBLE value matched against singleton IN list of DOUBLE-resultant simple expressions
      - query: select a, c from ta where c in (3.01 + 6)
      - result: [{A: 6, 9.01}]
    -
      # BOOLEAN value matched against IN list of BOOLEAN values
      - query: select a, d from ta where d in (true, false)
      - unorderedResult: [{A: 0, !ignore x}, {A: 2, !ignore x}, {A: 4, !ignore x}, {A: 6, !ignore x}, {A: 8, !ignore x},
                    {A: 1, !ignore x}, {A: 3, !ignore x}, {A: 5, !ignore x}, {A: 7, !ignore x}, {A: 9, !ignore x}]
    -
      # BOOLEAN value matched against singleton IN list of BOOLEAN values
      - query: select a, d from ta where d in (true)
      - unorderedResult: [{A: 0, !ignore x}, {A: 2, !ignore x}, {A: 4, !ignore x}, {A: 6, !ignore x}, {A: 8, !ignore x}]
    -
      # BOOLEAN value matched against singleton IN list of BOOLEAN-resultant simple expressions
      - query: select a, d from ta where d in (3 < 4)
      - unorderedResult: [{A: 0, !ignore x}, {A: 2, !ignore x}, {A: 4, !ignore x}, {A: 6, !ignore x}, {A: 8, !ignore x}]
    -
      # STRING value matched against IN list of STRING values
      - query: select a, e from ta where e in ('bar', 'doe')
      - unorderedResult: [{ A: 1, !ignore x }, { A: 8, !ignore x }, { A: 2, !ignore x }, { A: 5, !ignore x }, { A: 9, !ignore x }]
    -
      # STRING value matched against singleton IN list of STRING values
      - query: select a, e from ta where e in ('foo')
      - unorderedResult: [ { A: 0, !ignore x }, { A: 6, !ignore x }]
    -
      # STRING value matched against IN list of BOOLEAN-resultant simple expressions
      - query: select a, e from ta where e in ('b' + 'a' + 'r', 'doe')
      - unorderedResult: [{ A: 1, !ignore x }, { A: 8, !ignore x }, { A: 2, !ignore x }, { A: 5, !ignore x }, { A: 9, !ignore x }]
    -
      # struct value matched against IN list of Tuple values
      - query: select a, b from ta where (a, b) in ((0L, 9L), (1L, 8L))
      - explain: "ISCAN(F1 <,>) | FILTER (_.A AS A, _.B AS B) IN array((@c16 AS _0, @c18 AS _1), (@c22 AS _0, @c24 AS _1)) | MAP (_.A AS A, _.B AS B)"
      - unorderedResult: [ { A: 0, 9 }, { A: 1, 8 } ]
    -
      # struct column with an index matched against IN list of Tuple values
      - query: select a, b from ta where f in ((90L, 9L), (81L, 18L))
      - unorderedResult: [ { A: 0, 9 }, { A: 1, 8 } ]
    -
      # struct column with an index matched against IN list of repeated Tuple values
      - query: select a, b from ta where f in ((90L, 9L), (81L, 18L), (81L, 18L), (90L, 9L))
      - explain: "EXPLODE arrayDistinct(array((@c12 AS _0, @c14 AS _1), (@c18 AS _0, @c20 AS _1), (@c18 AS _0, @c20 AS _1), (@c12 AS _0, @c14 AS _1))) | FLATMAP q0 -> { ISCAN(F1 [EQUALS promote(q0._0 AS LONG), EQUALS promote(q0._1 AS LONG)]) AS q1 RETURN (q1.A AS A, q1.B AS B) }"
      - initialVersionAtLeast: !current_version
      - unorderedResult: [ { A: 0, 9 }, { A: 1, 8 } ]
      # Duplicate values in in-lists lead to duplicate results if the IN predicate is planned as a nested loop join in earlier versions
      - initialVersionLessThan: !current_version
      - unorderedResult: [ { A: 0, 9 }, { A: 0, 9 }, { A: 1, 8 }, { A: 1, 8 } ]
    -
      # `NOT IN`
      - query: select e, a from ta where e not in ('foo' , 'bar', 'doe', 'arc', 'something')
      - supported_version: 4.5.13.0
      - unorderedResult: [{ E: "per", A: 4 }]
    -
      # `NOT IN` with incompatible types
      - query: select a, e from ta where e not in ('foo' , 35)
      - initialVersionAtLeast: 4.5.13.0
      - error: "42804"
      - initialVersionLessThan: 4.5.13.0
      - error: "42601"
    -
      # Values of incompatible types in the IN list
      - query: select a, e from ta where e in ('foo' , 35 + 4)
      - error: "22000"
    -
      # constant LONG value matched against IN list of LONG values
      - query: select a, e from ta where 1 in (2, 3)
      - result: []
    -
      # constant LONG value matched against IN list of LONG values.
      - query: select a from ta where 1 in (1, 2, 3)
      - unorderedResult: [{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}]
    -
      # Test IN predicate with primitive array column - string in string array
      - query: select id from array_table where 'apple' in fruits
      - unorderedResult: [{1}, {3}]
    -
      # Test IN predicate with primitive array column - multiple matches
      - query: select id from array_table where 'banana' in fruits
      - unorderedResult: [{1}, {5}]
    -
      # Test IN predicate with primitive array column - no match
      - query: select id from array_table where 'pineapple' in fruits
      - result: []
    -
      # Test IN predicate with primitive array column - bigint in bigint array
      - query: select id from array_table where 10 in numbers
      - unorderedResult: [{1}, {3}]
    -
      # Test IN predicate with primitive array column - bigint no match
      - query: select id from array_table where 15 in numbers
      - result: []
    -
      # Test IN predicate with record array column - struct in struct array
      - query: select id from array_table where ('apple', 'red') in fruit_records
      - unorderedResult: [{1}]
    -
      # Test IN predicate with record array column - different struct match
      - query: select id from array_table where ('mango', 'orange') in fruit_records
      - unorderedResult: [{3}]
    -
      # Test IN predicate with record array column - no match
      - query: select id from array_table where ('apple', 'blue') in fruit_records
      - result: []
    -
      # Test IN predicate with record array column - partial field match (should not match)
      - query: select id from array_table where ('grape', 'green') in fruit_records
      - result: []
    -
      # Test NOT IN predicate with primitive array column
      - query: select id from array_table where 'apple' not in fruits
      - unorderedResult: [{2}, {4}, {5}]
    -
      # Test NOT IN predicate with record array column
      - query: select id from array_table where ('apple', 'red') not in fruit_records
      - unorderedResult: [{2}, {3}, {4}, {5}]
---
# Following tests are run once because running them the second time around causes the error to be different. This is
# "expected" as the point of error is different in both the cases.
# https://github.com/FoundationDB/fdb-record-layer/issues/3583
test_block:
  tests:
      -
        # LONG value matched against IN list of LONG and DOUBLE values
        # this is not supported at the moment. We do not support
        # promotions within a prepared parameter array, it is not
        # clear whether we want to support it as it would probably
        # make plan lookup in the cache much more expensive.
        - query: select a, b from ta where b in (1, 3.0, 5, 7.0)
        - error: "XX000"
      -
        # Values of incompatible types in the IN list
        - query: select a, e from ta where e in ('foo' , 35)
        - error: "XX000"
      -
        # Values of incompatible types in the IN list
        - query: select a, e from ta where e in (35, '23')
        - error: "XX000"
      -
        # Values of incompatible types in the IN list
        - query: select a, e from ta where e in (true, 75.34)
        - error: "XX000"
      -
        # Left type (STRING) is not compatible with right type (type of the IN List)
        - query: select a, e from ta where e in (35, 75.34)
        - error: "XX000"
      -
        # Left type (STRING) is not compatible with right type (type of the IN List)
        - query: select a, e from ta where e in (35.34, 32)
        - error: "XX000"
      -
        # Complex (STRUCT) left type matched against IN list
        - query: select a, e from ta where f in (34, 23)
        - error: "22000"
...
