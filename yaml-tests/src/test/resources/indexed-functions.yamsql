#
# indexed-functions.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table t(a bigint, b bigint, c bigint, d bigint, e string, primary key(a))
    create index bPlusC as select b + c from t order by b + c
    create index bPlusCByE as select e, b + c from t order by e, b + c
    create index dMask2 as select d & 2 from t
    create index dMask1 as select d & 1 from t
---
setup:
  steps:
    - query: INSERT INTO T
        VALUES (1, 1, 10, 3, 'alpha'),
               (2, 2, 8, 2, 'beta'),
               (3, 3, 6, 1, 'alpha'),
               (4, 4, 4, 0, 'beta'),
               (5, 5, 2, 3, 'alpha'),
               (6, 6, 0, 2, 'beta'),
               (7, 7, -2, 1, 'alpha'),
               (8, 8, -4, 0, 'beta'),
               (9, 9, -6, 3, 'alpha')
---
test_block:
  tests:
    -
      - query: select * from t where b + c > 7;
      - explain: "ISCAN(BPLUSC [[GREATER_THAN promote(@c10 AS LONG)]])"
      - unorderedResult: [
          {A: 1, B: 1, C: 10, D: 3, E: 'alpha'},
          {A: 2, B: 2, C:  8, D: 2, E: 'beta'},
          {A: 3, B: 3, C:  6, D: 1, E: 'alpha'},
          {A: 4, B: 4, C:  4, D: 0, E: 'beta'},
        ]
    -
      - query: select a, b + c AS sum from t where e = 'alpha' order by b + c;
      - explain: "ISCAN(BPLUSCBYE [EQUALS promote(@c14 AS STRING)]) | MAP (_.A AS A, _.B + _.C AS SUM)"
      - result: [
          { A: 9, SUM:  3 },
          { A: 7, SUM:  5 },
          { A: 5, SUM:  7 },
          { A: 3, SUM:  9 },
          { A: 1, SUM: 11 },
        ]
    # Query currently stack overflows: TODO (StackOverflow when trying to plan a streaming aggregate with a group by that is an arithmetic function)
    # -
    #   - query: select b + c AS sum, count(*) AS "count" from t group by b + c;
    #   - explain: "map(Index(BPLUSCBYE x [EQUALS promote(@c14 as STRING)])[($q2.A as A, add_ll($q2.B, $q2.C) as SUM)])"
    #   - result: [
    #       { SUM:  0, count: 1 },
    #       { SUM:  2, count: 1 },
    #       { SUM:  3, count: 1 },
    #       { SUM:  4, count: 1 },
    #       { SUM:  5, count: 1 },
    #       { SUM:  6, count: 1 },
    #       { SUM:  7, count: 1 },
    #       { SUM:  8, count: 1 },
    #       { SUM:  9, count: 1 },
    #       { SUM: 10, count: 1 },
    #       { SUM: 11, count: 1 },
    #     ]
    -
      - query: select * from t where d & 1 = 1;
      - explainContains: "ISCAN(DMASK1 [EQUALS promote"
      - unorderedResult: [
          {A: 1, B: 1, C: 10, D: 3, E: 'alpha'},
          {A: 3, B: 3, C:  6, D: 1, E: 'alpha'},
          {A: 5, B: 5, C:  2, D: 3, E: 'alpha'},
          {A: 7, B: 7, C: -2, D: 1, E: 'alpha'},
          {A: 9, B: 9, C: -6, D: 3, E: 'alpha'},
        ]
    -
      - query: select * from t where d & 1 = 0;
      - explain: "ISCAN(DMASK1 [EQUALS promote(@c10 AS LONG)]) ∩ SCAN(<,>) COMPARE BY (recordType(_), _.A)"
      - unorderedResult: [
          {A: 2, B: 2, C:  8, D: 2, E: 'beta'},
          {A: 4, B: 4, C:  4, D: 0, E: 'beta'},
          {A: 6, B: 6, C:  0, D: 2, E: 'beta'},
          {A: 8, B: 8, C: -4, D: 0, E: 'beta'},
        ]
    -
      - query: select * from t where d & 2 = 2;
      - explainContains: "ISCAN(DMASK2 [EQUALS promote"
      - unorderedResult: [
          {A: 1, B: 1, C: 10, D: 3, E: 'alpha'},
          {A: 2, B: 2, C:  8, D: 2, E: 'beta'},
          {A: 5, B: 5, C:  2, D: 3, E: 'alpha'},
          {A: 6, B: 6, C:  0, D: 2, E: 'beta'},
          {A: 9, B: 9, C: -6, D: 3, E: 'alpha'},
        ]
    -
      - query: select * from t where d & 2 = 0;
      - explain: "ISCAN(DMASK2 [EQUALS promote(@c10 AS LONG)]) ∩ SCAN(<,>) COMPARE BY (recordType(_), _.A)"
      - unorderedResult: [
          {A: 3, B: 3, C:  6, D: 1, E: 'alpha'},
          {A: 4, B: 4, C:  4, D: 0, E: 'beta'},
          {A: 7, B: 7, C: -2, D: 1, E: 'alpha'},
          {A: 8, B: 8, C: -4, D: 0, E: 'beta'},
        ]
...
