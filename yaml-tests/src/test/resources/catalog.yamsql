#
# catalog.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
setup:
  connect: "jdbc:embed:/__SYS?schema=CATALOG"
  steps:
    - query: drop schema template if exists test_template_1;
    - query: create schema template test_template_1
          create table t(a string, b string, primary key(a));
    - query: drop schema template if exists test_template_2;
    - query: create schema template test_template_2
          create table t(a string, b string, c string, primary key(a, b));
    - query: drop database if exists /FRL/TEST_DB_1;
    - query: create database /FRL/TEST_DB_1;
    - query: create schema /FRL/TEST_DB_1/S_11 with template test_template_1;
    - query: create schema /FRL/TEST_DB_1/S_12 with template test_template_1;
    - query: create schema /FRL/TEST_DB_1/S_13 with template test_template_2;
    - query: create schema /FRL/TEST_DB_1/S_14 with template test_template_2;
    - query: drop database if exists /FRL/TEST_DB_2;
    - query: create database /FRL/TEST_DB_2;
    - query: create schema /FRL/TEST_DB_2/S_21 with template test_template_1;
    - query: create schema /FRL/TEST_DB_2/S_22 with template test_template_1;
    - query: create schema /FRL/TEST_DB_2/S_23 with template test_template_2;
    - query: create schema /FRL/TEST_DB_2/S_24 with template test_template_2;
---
test_block:
  connect: "jdbc:embed:/__SYS?schema=CATALOG"
  tests:
    -
      # How many databases exist in this cluster?
      - query: select count(*) from databases;
      - explainContains: 'map(AggregateIndexScan(Index(DATABASES_COUNT_INDEX'
    -
      # How many schemas exist in this cluster?
      - query: select sum(cnt) from (select count(*) as cnt, template_name, template_version from schemas
            group by template_name, template_version) as t;
      - explainContains: 'map(map(map(AggregateIndexScan(Index(TEMPLATES_COUNT_INDEX'
    -
      # How many schemas with the specified schemaTemplateName exist in this cluster?
      - query: select sum(cnt) from (select count(*) as cnt, template_name, template_version from schemas
              group by template_name, template_version having template_name = 't') as t;
      - explainContains: 'map(map(map(AggregateIndexScan(Index(TEMPLATES_COUNT_INDEX'
    -
      - query: select sum(cnt) from (select count(*) as cnt, template_name, template_version from schemas
          group by template_name, template_version having template_name = 'TEST_TEMPLATE_1') as t;
      - result: [{4}]
    -
      # How many schemas with the specified schemaTemplateName and schemaTemplateVersion exist in this cluster?
      - query: select sum(cnt) from (select count(*) as cnt, template_name, template_version from schemas
            group by template_name, template_version having template_name = 't' and template_version = 1) as t;
      - explainContains: 'map(map(map(AggregateIndexScan(Index(TEMPLATES_COUNT_INDEX'
    -
      - query: select sum(cnt) from (select count(*) as cnt, template_name, template_version from schemas
          group by template_name, template_version having template_name = 'TEST_TEMPLATE_1' and template_version = 1) as t;
      - result: [{4}]
    -
      # how many unique templates in a cluster?
      - query: select count(*) from (select count(*), template_name, template_version from schemas
            group by template_name, template_version) as t;
      - explainContains: 'map(map(map(AggregateIndexScan(Index(TEMPLATES_COUNT_INDEX'
#    -
#      # Which templates are used in a cluster?
#      - query: select distinct(template_name) from (select count(*) as count, template_name, template_version from T
#          group by template_name, template_version) as t;
#      - result: [{t}, {u}]
    -
      # Which templates are used in a cluster?
      - query: select template_name, template_version from (select count(*) as cnt, template_name, template_version from schemas
          group by template_name, template_version) as t;
      - explainContains: 'map(map(AggregateIndexScan(Index(TEMPLATES_COUNT_INDEX'
    -
      # which schemas have the specified schemaTemplateName?
      - query: select database_id, schema_name from schemas where template_name = 't';
      - explainContains: 'map(Covering(Index(TEMPLATES_VALUE_INDEX'
    -
      - query: select database_id, schema_name from schemas where template_name = 'TEST_TEMPLATE_1';
      - result: [{/FRL/TEST_DB_1, S_11}, {/FRL/TEST_DB_1, S_12}, {/FRL/TEST_DB_2, S_21}, {/FRL/TEST_DB_2, S_22}]
    -
      # which schemas have the specified schemaTemplateName and a schemaTemplateVersion lower than X?
      - query: select database_id, schema_name from schemas where template_name = 't' and template_version = 3;
      - explainContains: 'map(Covering(Index(TEMPLATES_VALUE_INDEX'
    -
      - query: select database_id, schema_name from schemas where template_name = 'TEST_TEMPLATE_1' and template_version < 2;
      - result: [{/FRL/TEST_DB_1, S_11}, {/FRL/TEST_DB_1, S_12}, {/FRL/TEST_DB_2, S_21}, {/FRL/TEST_DB_2, S_22}]
    -
      - query: select database_id, schema_name from schemas where template_name = 'TEST_TEMPLATE_1' and template_version < 1;
      - result: []
---
destruct:
  connect: "jdbc:embed:/__SYS?schema=CATALOG"
  steps:
    - query: drop database /FRL/TEST_DB_2;
    - query: drop database /FRL/TEST_DB_1;
    - query: drop schema template test_template_2;
    - query: drop schema template test_template_1;
...
