#
# orderby.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table t1(a bigint, b bigint, c bigint, primary key(a))
    create index i1 as select b, c from t1 order by b
    create index i2 as select b, c from t1 order by c
    create index i3 as select b, c from t1 order by c, b
    CREATE TYPE AS STRUCT st_1(a bigint, b bigint)
    create table t2(p bigint, q st_1, primary key(p))
    create index i4 as select q.b, q.a from t2 order by q.a
    create index i5 as select q.b, q.a from t2 order by q.b, q.a
    create table t3(a bigint, b bigint, c bigint, d bigint, p bigint, primary key(p))
    create index i6 as select d, c, b, a from t3 order by a, b, c, d
    CREATE TYPE AS STRUCT st_2(ast st_1)
    CREATE TYPE AS STRUCT st_3(bst st_2)
    CREATE TYPE AS STRUCT st_4(cst st_3)
    CREATE TYPE AS STRUCT st_5(dst st_4)
    CREATE TYPE AS STRUCT st_6(est st_5)
    create table t4(p bigint, q st_6, primary key(p))
    create index i7 as select q.est.dst.cst.bst.ast.a, q.est.dst.cst.bst.ast.b from t4 order by q.est.dst.cst.bst.ast.a
    create table t5(a bigint, b bigint, c bigint, primary key(a))
    create index i8 as select b, c from t5 order by c, b DESC
---
setup:
  steps:
    - query: INSERT INTO T1
        VALUES (1, 10, 5),
               (2, 9, 5),
               (3, 8, 5),
               (4, 7, 8),
               (5, 6, 8),
               (6, 5, 8),
               (7, 4, 1),
               (8, 3, 1),
               (9, 2, 0),
               (10, 1, 0)
    - query: INSERT INTO T2
        VALUES (1, (8, 1)),
               (2, (7, 2)),
               (3, (6, 1)),
               (4, (5, 2)),
               (5, (4, 1)),
               (6, (3, 2)),
               (7, (2, 1)),
               (8, (1, 2))
    - query: INSERT INTO T3
        VALUES (9, 5, 7, 2, 1),
               (9, 5, 7, 1, 2),
               (9, 5, 6, 0, 3),
               (9, 5, 6, 8, 4),
               (9, 0, 1, 2, 5),
               (9, 0, 1, 8, 6),
               (9, 0, 5, 1, 7),
               (9, 0, 5, 4, 8),
               (3, 8, 2, 1, 9),
               (3, 8, 2, 5, 10),
               (3, 8, 5, 0, 11),
               (3, 8, 5, 9, 12),
               (3, 6, 9, 2, 13),
               (3, 6, 9, 0, 14),
               (3, 6, 7, 0, 15),
               (3, 6, 7, 4, 16)
    - query: INSERT INTO T4
        VALUES (0, ((((((9, 0))))))),
               (1, ((((((8, 2))))))),
               (2, ((((((7, 4))))))),
               (3, ((((((6, 6))))))),
               (4, ((((((5, 8))))))),
               (5, ((((((4, 1))))))),
               (6, ((((((3, 3))))))),
               (7, ((((((2, 5))))))),
               (8, ((((((1, 7))))))),
               (9, ((((((0, 9)))))))
    - query: INSERT INTO T5
        VALUES (1, 10, 5),
               (2, 9, 5),
               (3, 8, 5),
               (4, 7, 8),
               (5, 6, 8),
               (6, 5, 8),
               (7, 4, 1),
               (8, 3, 1),
               (9, 2, 0),
               (10, 1, 0)
---
test_block:
  tests:
    -
      - query: select b, c from t1 order by b, b
      - error: "42701"
    -
      # Simple ordering on 1 variable
      - query: select b, c from t1 order by b
      - result: [{1, 0}, {2, 0}, {3, 1}, {4, 1}, {5, 8}, {6, 8}, {7, 8}, {8, 5}, {9, 5}, {10, 5}]
    -
      # Simple ordering on 1 variable, reversed
      - query: select b, c from t1 order by b desc
      - result: [{10, 5}, {9, 5}, {8, 5}, {7, 8}, {6, 8}, {5, 8}, {4, 1}, {3, 1}, {2, 0}, {1, 0}]
    -
      # Simple ordering on 1 variable, range filter on index key value
      - query: select b, c from t1 where b >= 5 order by b;
      - result: [{5, 8}, {6, 8}, {7, 8}, {8, 5}, {9, 5}, {10, 5}]
    -
      # Simple ordering on 1 variable, range filter on index key value, reversed
      - query: select b, c from t1 where b >= 5 order by b desc;
      - result: [{10, 5}, {9, 5}, {8, 5}, {7, 8}, {6, 8}, {5, 8}]
    -
      # Simple ordering on 1 variable, point filter on index key value
      - query: select b, c from t1 where b = 5 order by b;
      - result: [{5, 8}]
    -
      # Simple ordering on 1 variable, with limit
      - query: select b, c from t1 order by b;
      - maxRows: 4
      - result: [{1, 0}, {2, 0}, {3, 1}, {4, 1}]
      - result: [{5, 8}, {6, 8}, {7, 8}, {8, 5}]
      - result: [{9, 5}, {10, 5}]
    -
      # Simple ordering on 1 variable, with continuation
      - query: select b, c from t1 order by b;
      - maxRows: 1
      - result: [{1, 0}]
      - result: [{2, 0}]
      - result: [{3, 1}]
      - result: [{4, 1}]
      - result: [{5, 8}]
      - result: [{6, 8}]
      - result: [{7, 8}]
      - result: [{8, 5}]
      - result: [{9, 5}]
      - result: [{10, 5}]
      - result: [] # even multiple requires another fetch to confirm no-more results
    -
      # Simple ordering on 1 variable, range filter on index key value, filter on other field
      - query: select b, c from t1 where b >= 5 and c = 5 order by b;
      - result: [{8, 5}, {9, 5}, {10, 5}]
    -
      # Simple ordering on 1 variable, range filter on index key value, filter on other field, reversed
      - query: select b, c from t1 where b >= 5 and c = 5 order by b desc;
      - result: [{10, 5}, {9, 5}, {8, 5}]
    -
      # Simple ordering on 1 variable with repetitive values
      - query: select c, b from t1 order by c;
      - result: [{0, !ignore x}, {0, !ignore x}, {1, !ignore x}, {1, !ignore x}, {5, !ignore x}, {5, !ignore x}, {5, !ignore x}, {8, !ignore x}, {8, !ignore x}, {8, !ignore x}]
    -
      # Simple ordering on 2 variable
      - query: select c, b from t1 order by c, b;
      - result: [{0, 1}, {0, 2}, {1, 3}, {1, 4}, {5, 8}, {5, 9}, {5, 10}, {8, 5}, {8, 6}, {8, 7}]
    -
      # Simple ordering on 2 variable, explicit ascending
      - query: select c, b from t1 order by c asc, b asc;
      - result: [{0, 1}, {0, 2}, {1, 3}, {1, 4}, {5, 8}, {5, 9}, {5, 10}, {8, 5}, {8, 6}, {8, 7}]
    -
      # Simple ordering on 2 variable, reversed
      - query: select c, b from t1 order by c desc, b desc;
      - result: [{8, 7}, {8, 6}, {8, 5}, {5, 10}, {5, 9}, {5, 8}, {1, 4}, {1, 3}, {0, 2}, {0, 1}]
    -
      # Simple ordering on 2 variable, arbitrary ordering exception
      - query: select c, b from t1 order by c, b desc;
      - error: 0AF00
    -
      # Simple ordering on 2 variable, arbitrary ordering exception
      - query: select c, b from t1 order by c asc, b desc;
      - error: 0AF00
    -
      # Simple ordering on 2 variable, arbitrary ordering exception
      - query: select c, b from t1 order by c desc, b;
      - error: 0AF00
    -
      # Simple ordering on 2 variable, point filter on outer
      - query: select c, b from t1 where c = 8 order by c, b;
      - result: [{8, 5}, {8, 6}, {8, 7}]
    -
      # Simple ordering on 2 variable, range filter on outer, reversed
      - query: select c, b from t1 where c < 5 order by c desc, b desc;
      - result: [{1, 4}, {1, 3}, {0, 2}, {0, 1}]
    -
      # Simple ordering on 2 variable, point filter on outer, range filter on inner
      - query: select c, b from t1 where c < 5 and b > 2 order by c desc, b desc;
      - result: [{1, 4}, {1, 3}]
    -
      # Simple ordering on 1 nested struct variable
      - query: select q.a, p from t2 order by q.a
      - result: [{1, 8}, {2, 7}, {3, 6}, {4, 5}, {5, 4}, {6, 3}, {7, 2}, {8, 1}]
    -
      # Simple ordering on 2 nested struct variable
      - query: select p, q.a, q.b from t2 order by q.b, q.a
      - result: [{7, 2, 1}, {5, 4, 1}, {3, 6, 1}, {P: 1, A: 8, B: 1}, {8, 1, 2}, {6, 3, 2}, {4, 5, 2}, {P: 2, A: 7, B: 2}]
    -
      # Simple ordering that uses a more strictly ordered index to satisfy less strict ordering requirement
      - query: select a from t3 order by a
      - result: [{3}, {3}, {3}, {3}, {3}, {3}, {3}, {3}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}]
    -
      # Simple ordering that uses a more strictly ordered index to satisfy less strict ordering requirement
      - query: select a, b from t3 order by a, b
      - result: [{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 8}, {3, 8}, {3, 8}, {3, 8},
                 {9, 0}, {9, 0}, {9, 0}, {9, 0}, {9, 5}, {9, 5}, {9, 5}, {9, 5}]
    -
      # Simple ordering that uses a more strictly ordered index to satisfy less strict ordering requirement
      - query: select a, b, c from t3 order by a, b, c
      - result: [{3, 6, 7}, {3, 6, 7}, {3, 6, 9}, {3, 6, 9}, {3, 8, 2}, {3, 8, 2}, {3, 8, 5}, {3, 8, 5},
                 {9, 0, 1}, {9, 0, 1}, {9, 0, 5}, {9, 0, 5}, {9, 5, 6}, {9, 5, 6}, {9, 5, 7}, {9, 5, 7}]
    -
      # Simple ordering with select *
      - query: select * from t3 order by a, b, c, d
      - result: [{3, 6, 7, 0, 15}, {3, 6, 7, 4, 16}, {3, 6, 9, 0, 14}, {3, 6, 9, 2, 13},
                 {3, 8, 2, 1, 9},  {3, 8, 2, 5, 10}, {3, 8, 5, 0, 11}, {3, 8, 5, 9, 12},
                 {9, 0, 1, 2, 5}, {9, 0, 1, 8, 6}, {9, 0, 5, 1, 7}, {9, 0, 5, 4, 8},
                 {9, 5, 6, 0, 3}, {9, 5, 6, 8, 4}, {9, 5, 7, 1, 2}, {9, 5, 7, 2, 1}]
    -
      # Ordering by variable in nested struct of arbitrary depth
      - query: select q.est.dst.cst.bst.ast.a, q.est.dst.cst.bst.ast.b from t4 order by q.est.dst.cst.bst.ast.a
      - result: [{A: 0, B: 9}, {A: 1, B: 7}, {A: 2, B: 5}, {A: 3, B: 3}, {A: 4, B: 1},
                 {A: 5, B: 8}, {A: 6, B: 6}, {A: 7, B: 4}, {A: 8, B: 2}, {A: 9, B: 0}]
    -
      # Ordering in nested select is not allowed
      - query: select b from t1, (select * from t1 order by b) as n
      - error: "0A000"
    -
      # Ordering in nested select is not allowed
      - query: select b from t1 where exists (select * from t1 order by b limit 1)
      - error: "0AF00"
    -
      # Ordering by a non projected column
      - query: select c from t1 order by b
      - explain: "map(map(Covering(Index(I1 <,>) -> [A: KEY[2], B: KEY[0], C: VALUE[0]])[($q37.C as C, $q37.B as B)])[($q6.C as C)])"
      - result: [ {0}, {0}, {1}, {1}, {8}, {8}, {8}, {5}, {5}, {5} ]
    -
      - query: select b from t1 order by c
      - explain: "map(map(Covering(Index(I2 <,>) -> [A: KEY[2], B: VALUE[0], C: KEY[0]])[($q40.B as B, $q40.C as C)])[($q6.B as B)])"
      - result: [ {2}, {1}, {4}, {3}, {10}, {9}, {8}, {7}, {6}, {5} ]
    -
      # Ordering by a non projected column desc
      - query: select c from t1 order by b desc
      - explain: "map(map(Covering(Index(I1 <,> REVERSE) -> [A: KEY[2], B: KEY[0], C: VALUE[0]])[($q37.C as C, $q37.B as B)])[($q6.C as C)])"
      - result: [ {5}, {5}, {5}, {8}, {8}, {8}, {1}, {1}, {0}, {0} ]
    -
      - query: select b from t1 order by c desc
      - explain: "map(map(Covering(Index(I2 <,> REVERSE) -> [A: KEY[2], B: VALUE[0], C: KEY[0]])[($q40.B as B, $q40.C as C)])[($q6.B as B)])"
      - result: [ {5}, {6}, {7}, {8}, {9}, {10}, {3}, {4}, {1}, {2} ]
    -
      # Simple ordering on 2 variable, mixed ordering
      - query: select c, b from t5 order by c, b desc;
      - explain: "map(Covering(Index(I8 <,>) -> [A: KEY[3], B: from_ordered_bytes(%KEY:[1], DESC_NULLS_LAST, LONG), C: KEY[0]])[($q23.C as C, $q23.B as B)])"
      - result: [{0, 2}, {0, 1}, {1, 4}, {1, 3}, {5, 10}, {5, 9}, {5, 8}, {8, 7}, {8, 6}, {8, 5}]
...
