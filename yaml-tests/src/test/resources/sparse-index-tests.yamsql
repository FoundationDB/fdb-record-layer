#
# sparse-index-tests.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table t1(id integer, col1 integer, col2 integer, primary key(id))
    create index i1 as select col1 from t1 where col1 < 200
    create index i2 as select col1 from t1 where col1 < 500

    create table t2(id integer, tombstone boolean, primary key(id))
    create index i3 as select tombstone from t2 where tombstone = true or tombstone is not null

    create table t3(id integer, tombstone boolean, primary key(id))
    create index i4 as select id from t3 where tombstone = true or tombstone is not null

    create table t5(id integer, col1 integer, primary key(id))
    create index i6 as select id from t5 where col1 < 40 or col1 > 90
---
test_block:
  tests:
    -
      - query: select id from t3 where tombstone = true or tombstone is not null
      - explainContains: "COVERING(I4) | MAP (_.ID AS ID)"
    -
      - query: select id from t3 where tombstone = true or tombstone is not null
      - explainContains: "COVERING(I4) | MAP (_.ID AS ID)"
    -
      - query: select id from t3 where tombstone = true or tombstone is not null
      - explainContains: "COVERING(I4) | MAP (_.ID AS ID)"
    -
      - query: select tombstone from t2 where tombstone is null
      - explainContains: "SCAN("
    -
      - query: select tombstone from t2 where tombstone is not null
      - explainContains: "COVERING(I3) | MAP (_.TOMBSTONE AS TOMBSTONE)"
    -
      - query: select id from t5 where col1 < 40 or col1 > 90
      - explainContains: "COVERING(I6) | MAP (_.ID AS ID)"
    -
      - query: select id from t5 where col1 < 40 or col1 > 90
      - explainContains: "COVERING(I6) | MAP (_.ID AS ID)"
    -
      - query: select id from t5 where col1 < 40 or col1 > 90
      - explainContains: "COVERING(I6) | MAP (_.ID AS ID)"
---
# Following tests are executed in order as the index used depends on which query warms up the cache. In this particular
# scenario, the first query puts the plan in cache, which cannot be used by second query that would use the one with
# index I2. However, if second query is executed first and puts the plan with index I2 in the cache, the other queries
# can use the same.
test_block:
  name: sparse-index-tests
  preset: single_repetition_ordered
  tests:
    -
      - query: select id from t1 where col1 < 100
      - explainContains: "COVERING(I1) | MAP (_.ID AS ID)"
      - result: []
    -
      - query: select id from t1 where col1 < 453
      - explainContains: "COVERING(I2) | MAP (_.ID AS ID)"
      - result: []
    -
      - query: select col1 from t1 where col1 > 55 and col1 < 100
      - explainContains: "COVERING(I1) | MAP (_.COL1 AS COL1)"
    -
      - query: select col1 from t1 where col1 > 55 and col1 < 199
      - explainContains: "COVERING(I1) | MAP (_.COL1 AS COL1)"
    -
      - query: select col1 from t1 where col1 > 50 and col1 < 350
      - explainContains: "COVERING(I2) | MAP (_.COL1 AS COL1)"
---
setup:
  steps:
    - query: insert into T1
        VALUES (1, 100, 7),
               (2, 200, 7),
               (3, 243, 7),
               (4, 499, 7),
               (5, 500, 7),
               (6, 879, 7)
---
test_block:
  name: sparse-index-tests-with-data
  preset: single_repetition_ordered
  tests:
    -
      - query: select id from t1 where col1 < 200
      - explainContains: "COVERING(I1) | MAP (_.ID AS ID)"
      - result: [{ID: 1}]
    -
      - query: select id from t1 where col1 < 201
      - explainContains: "COVERING(I2) | MAP (_.ID AS ID)"
      - result: [{ID: 1}, {ID: 2}]
    -
      - query: select id from t1 where col1 < 250
      - explainContains: "COVERING(I2) | MAP (_.ID AS ID)"
      - result: [{ID: 1}, {ID: 2}, {ID: 3}]
    -
      - query: select id from t1 where col1 < 500
      - explainContains: "COVERING(I2"
      - result: [{ID: 1}, {ID: 2}, {ID: 3}, {ID: 4}]
    -
      - query: select id from t1 use index (i1)
      - error: "0AF00"
    -
      - query: select id from t1 use index (i2)
      - error: "0AF00"
    -
      - query: select id from t1
      # Without a predicate matching any of these sparse indexes, this needs to fall back to a scan
      - explainContains: "SCAN("
      - result: [{ID: 1}, {ID: 2}, {ID: 3}, {ID: 4}, {ID: 5}, {ID: 6}]
...