#
# subquery-tests.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create table a(ida integer, x integer, primary key(ida))
    create table x(idx integer, y integer, primary key(idx))
    CREATE TYPE AS STRUCT s(f integer)
    create table r(idr integer, nr s array, primary key(idr))
    create table b(idb integer, q integer, r integer, primary key(idb))
    create index ib as select q from b
    create index ir as select sq.f from r, (select f from r.nr) sq;
---
setup:
  steps:
    - query: INSERT INTO A VALUES (1, 1), (2, 2), (3, 3)
    - query: INSERT INTO X VALUES (4, 10), (5, 20), (6, 30)
    - query: INSERT INTO R VALUES (1, [(11), (12), (13)]), (2, [(21), (22), (23)]), (3, [(31), (32), (33)])
    - query: INSERT INTO B VALUES (1, 10, 100), (2, 20, 200), (3, 30, 300)
---
test_block:
  name: subquery-tests
  tests:
    -
      # non correlated subquery, resolving alias should be fine.
      - query: select ida from a where exists (select ida from a where ida = 1);
      - result: [{1}, {2}, {3}]
    -
      # this should work albeit being seemingly ambiguous
      # upper query block resolution should kick in _iff_ we fail to resolve
      # the identifier in current query block.
      - query: select idx from x where exists (select x from a where ida = 1);
      - result: [{4}, {5}, {6}]
    -
      # PartiQL resolution.
      - query: select idr from r, r.nr as NEST where NEST.f = 23;
      - result: [{2}]
    -
      # PartiQL resolution, another flavour (TODO check whether this still use the IR index).
      - query: select idr from r, (select * from r.nr) as NEST where NEST.f = 23;
      - result: [{2}]
    -
      # correlation are allowed in from-subquery.
      - query: select x, sq.idr, sq.nr from a, (select * from r where r.idr = a.x) sq;
      - supported_version: !current_version # changes in Proto definition for arrays
      - result: [{x: 1, 1, [{11}, {12}, {13}]}, {x: 2, 2, [{21}, {22}, {23}]}, {x: 3, 3, [{31}, {32}, {33}]}]
    -
      # correlations are allowed inside a nested subquery with group by
      - query: select x from a where exists (select a.x, max(idb) from b where q > a.x group by q)
      - result: [{1}, {2}, {3}]
    -
      # correlations are allowed inside a nested subquery with group by, not necessarily qualified
      - query: select x from a where exists (select x, max(idb) from b where q > x group by q)
      - result: [{1}, {2}, {3}]
    -
      # correlations inside aggregations are allowed inside a nested subquery with group by
      - query: select x from a where exists (select max(x), max(idb) from b where q > x group by q)
      - result: [{1}, {2}, {3}]
    -
      # correlations inside aggregations are allowed inside a nested subquery with group by
      - query: select x from a where exists (select max(a.x), max(idb) from b where q > x group by q)
      - result: [{1}, {2}, {3}]
...
