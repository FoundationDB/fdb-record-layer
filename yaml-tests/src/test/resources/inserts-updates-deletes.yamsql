#
# inserts-updates-deletes.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    create type as struct S(S1 bigint, S2 bigint)
    create table A(A1 bigint, A2 bigint, A3 bigint, primary key(A1))
    create table B(B1 bigint, B2 bigint, B3 S, primary key(B1))
    create index A_idx as select A1, A2, A3 FROM A order by A1, A2, A3
---
test_block:
  preset: single_repetition_ordered
  tests:
    -
      - query: insert into A values (1, 10, 1), (2, 10, 2), (3, 10, 3);
      - count: 3
    -
      - query: select * from A
      - result: [{A1: 1, A2: 10, A3: 1},
                 {A1: 2, A2: 10, A3: 2},
                 {A1: 3, A2: 10, A3: 3}]
    -
      - query: insert into B
          values (1, 20, (4, 40)),
                 (2, 20, (5, 50)),
                 (3, 20, (6, 60)),
                 (4, 20, null);
      - count: 4
    -
      - query: select * from B
      - result: [{B1: 1, B2: 20, B3: {S1: 4, S2: 40}},
                 {B1: 2, B2: 20, B3: {S1: 5, S2: 50}},
                 {B1: 3, B2: 20, B3: {S1: 6, S2: 60}},
                 {B1: 4, B2: 20, B3: !null }]
    -
      - query: insert into B (B2, B1) values (20, 5);
      - count: 1
    -
      - query: select * from B where B1 = 5;
      - result: [{B1: 5, B2: 20, B3: !null }]
    -
      - query: insert into B select b1 * 10, b2, b3 from B where b1 < 10;
      - count: 5
    -
      - query: select * from B where b1 >= 10;
      - result: [{B1: 10, B2: 20, B3: {4, 40}},
                 {B1: 20, B2: 20, B3: {5, 50}},
                 {B1: 30, B2: 20, B3: {6, 60}},
                 {B1: 40, B2: 20, B3: !null },
                 {B1: 50, B2: 20, B3: !null }]
    -
      - query: update B set b2 = 30, b3 = (100, 100) where b1 < 10;
      - count: 5
    -
      - query: select * from B where b2 = 30;
      - result: [{B1: 1, B2: 30, B3: {S1: 100, S2: 100}},
                 {B1: 2, B2: 30, B3: {S1: 100, S2: 100}},
                 {B1: 3, B2: 30, B3: {S1: 100, S2: 100}},
                 {B1: 4, B2: 30, B3: {S1: 100, S2: 100}},
                 {B1: 5, B2: 30, B3: {S1: 100, S2: 100}}]
    -
      - query: delete from B where b1 < 10;
      - count: 5
    -
      - query: select * from B where b1 <10;
      - result: []
    -
      - query: select * from B where b1 >=10;
      - result: [{ B1: 10, B2: 20, B3: { 4, 40 } },
                 { B1: 20, B2: 20, B3: { 5, 50 } },
                 { B1: 30, B2: 20, B3: { 6, 60 } },
                 { B1: 40, B2: 20, B3: !null },
                 { B1: 50, B2: 20, B3: !null }]
    -
      - query: update B set b2 = b2 + 1, b3 = coalesce(b3, (b1, b2), (b3.s1 + b2, b3.s2 + b2));
      - count: 5
    -
      - query: select * from B
      - result: [{ B1: 10, B2: 21, B3: { 4, 40 } },
                 { B1: 20, B2: 21, B3: { 5, 50 } },
                 { B1: 30, B2: 21, B3: { 6, 60 } },
                 { B1: 40, B2: 21, B3: { 40, 20 } },
                 { B1: 50, B2: 21, B3: { 50, 20 } }]
    -
      - query: update B set b2 = b2 + 1, b3 = (b3.s1 + 1, b3.s2 + 1) where b1 < 40
      - count: 3
    -
      - query: select * from B where b1 < 40;
      - result: [{ B1: 10, B2: 22, B3: { 5, 41 } },
                 { B1: 20, B2: 22, B3: { 6, 51 } },
                 { B1: 30, B2: 22, B3: { 7, 61 } } ]
    # 4.1 Triage: [Initial version / set maxRows 0] failed when running against 4.0.559.6 ("expecting '42601' error code, got 'XXXXX' instead" and "java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1")
    # -
      # Case where not all values are provided of A. Still works, since the columns for which no values are provided can be nullable.
    #   - query: insert into A(A1, A2, A3) values (4);
    #   - error: "42601"
    # 4.1 Triage: [Initial version / set maxRows 0] Failed when initial version is 4.0.559.6 (expecting statement to throw an error, however it returned a count)
    # -
      # Case when the number of values is more than the number of columns specified.
    #   - query: insert into A(A1, A2, A3) values (5, 6, 7, 8, 9);
    #   - error: "42601"
    -
      # Case when a nullable column's value is not provided
      - query: insert into A(A1, A3) values (6, 7);
      - count: 1
    -
      # Case when a nullable column's value is not provided and column is the first one
      - query: insert into A(A2, A3) values (6, 7);
      - count: 1
    -
      # Case when a nullable column's value is not provided and column is the last one
      - query: insert into A(A1, A2) values (7, 8);
      - count: 1
    -
      - query: select * from A where A1 = 6
      - result: [{ A1: 6, A2: !null , A3: 7 }]
...
