recursive-cte-tests:
-   query: EXPLAIN with recursive (traversal = preorder) c1 as ( select id, parent,
        0 as level from t1 where id = 250 union all select b.id, b.parent, a.y as
        level from t1 as b, (select id, parent, level + 1 as y from c1) as a  where
        a.parent = b.id) select id, parent, level from c1
    explain: 'RUNION-DFS q0 { COVERING(CHILDIDX [EQUALS promote(@c24 AS LONG)] ->
        [ID: KEY[0], PARENT: KEY[1]]) | MAP (_.ID AS ID, _.PARENT AS PARENT, @c16
        AS LEVEL) } { RECURSIVE COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]])
        | FILTER q0.PARENT EQUALS _.ID | MAP (_.ID AS ID, _.PARENT AS PARENT, q0.LEVEL
        + @c54 AS LEVEL) } | MAP (_.ID AS ID, _.PARENT AS PARENT, _.LEVEL AS LEVEL)'
    task_count: 1845
    task_total_time_ms: 344
    transform_count: 415
    transform_time_ms: 186
    transform_yield_count: 116
    insert_time_ms: 21
    insert_new_count: 261
    insert_reused_count: 11
-   query: EXPLAIN with recursive (traversal = level) c1 as ( select id, parent, 0
        as level from t1 where id = 250 union all select b.id, b.parent, a.y as level
        from (select id, parent, level + 1 as y from c1) as a, t1 as b where a.parent
        = b.id) select id, parent, level from c1
    explain: 'RUNION q0, q1 { INITIAL { COVERING(CHILDIDX [EQUALS promote(@c24 AS
        LONG)] -> [ID: KEY[0], PARENT: KEY[1]]) | MAP (_.ID AS ID, _.PARENT AS PARENT,
        @c16 AS LEVEL) | INSERT INTO TEMP q1 } RECURSIVE  { ISCAN(CHILDIDX <,>) |
        FLATMAP q2 -> { TEMP SCAN base() | FILTER _.PARENT EQUALS q2.ID AS q3 RETURN
        (q2.ID AS ID, q2.PARENT AS PARENT, q3.LEVEL + @c50 AS LEVEL) } | INSERT INTO
        TEMP q1 }} | MAP (_.ID AS ID, _.PARENT AS PARENT, _.LEVEL AS LEVEL)'
    task_count: 1438
    task_total_time_ms: 59
    transform_count: 359
    transform_time_ms: 23
    transform_yield_count: 101
    insert_time_ms: 4
    insert_new_count: 196
    insert_reused_count: 11
-   query: EXPLAIN with recursive c1 as ( select id, parent from t1 where parent =
        -1 union all select b.id, b.parent from c1 as a, t1 as b where a.id = b.parent)
        select id from c1
    explain: 'RUNION-DFS q0 { ISCAN(PARENTIDX [EQUALS promote(@c15 AS LONG)]) } {
        RECURSIVE COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]]) | FILTER
        q0.ID EQUALS _.PARENT | MAP (_.ID AS ID, _.PARENT AS PARENT) } | MAP (_.ID
        AS ID)'
    task_count: 2207
    task_total_time_ms: 67
    transform_count: 440
    transform_time_ms: 19
    transform_yield_count: 132
    insert_time_ms: 5
    insert_new_count: 327
    insert_reused_count: 9
-   query: EXPLAIN with recursive (traversal = level) c1 as ( select id, parent from
        t1 where parent = -1 union all select b.id, b.parent from c1 as a, t1 as b
        where a.id = b.parent) select id from c1
    explain: RUNION q0, q1 { INITIAL { ISCAN(PARENTIDX [EQUALS promote(@c20 AS LONG)])
        | INSERT INTO TEMP q1 } RECURSIVE  { ISCAN(CHILDIDX <,>) | FLATMAP q2 -> {
        TEMP SCAN base() | FILTER _.ID EQUALS q2.PARENT AS q3 RETURN (q2.ID AS ID,
        q2.PARENT AS PARENT) } | INSERT INTO TEMP q1 }} | MAP (_.ID AS ID)
    task_count: 1335
    task_total_time_ms: 47
    transform_count: 320
    transform_time_ms: 20
    transform_yield_count: 98
    insert_time_ms: 2
    insert_new_count: 185
    insert_reused_count: 9
-   query: EXPLAIN with recursive c1 as ( select id, parent from t1 where id = 250
        union all select b.id, b.parent from c1 as a, t1 as b where a.parent = b.id)
        select id from c1
    explain: 'RUNION-DFS q0 { ISCAN(CHILDIDX [EQUALS promote(@c15 AS LONG)]) } { RECURSIVE
        COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]]) | FILTER q0.PARENT
        EQUALS _.ID | MAP (_.ID AS ID, _.PARENT AS PARENT) } | MAP (_.ID AS ID)'
    task_count: 2207
    task_total_time_ms: 72
    transform_count: 440
    transform_time_ms: 18
    transform_yield_count: 132
    insert_time_ms: 5
    insert_new_count: 327
    insert_reused_count: 9
-   query: EXPLAIN with recursive (traversal = level) c1 as ( select id, parent from
        t1 where id = 250 union all select b.id, b.parent from c1 as a, t1 as b where
        a.parent = b.id) select id from c1
    explain: RUNION q0, q1 { INITIAL { ISCAN(CHILDIDX [EQUALS promote(@c20 AS LONG)])
        | INSERT INTO TEMP q1 } RECURSIVE  { ISCAN(CHILDIDX <,>) | FLATMAP q2 -> {
        TEMP SCAN base() | FILTER _.PARENT EQUALS q2.ID AS q3 RETURN (q2.ID AS ID,
        q2.PARENT AS PARENT) } | INSERT INTO TEMP q1 }} | MAP (_.ID AS ID)
    task_count: 1335
    task_total_time_ms: 38
    transform_count: 320
    transform_time_ms: 15
    transform_yield_count: 98
    insert_time_ms: 2
    insert_new_count: 185
    insert_reused_count: 9
-   query: EXPLAIN with recursive (traversal = preorder) c1 as ( select id, parent
        from t1 where id = 250 union all select b.id, b.parent from c1 as a, t1 as
        b where a.parent = b.id) select id from c1
    explain: 'RUNION-DFS q0 { ISCAN(CHILDIDX [EQUALS promote(@c20 AS LONG)]) } { RECURSIVE
        COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]]) | FILTER q0.PARENT
        EQUALS _.ID | MAP (_.ID AS ID, _.PARENT AS PARENT) } | MAP (_.ID AS ID)'
    task_count: 2168
    task_total_time_ms: 52
    transform_count: 434
    transform_time_ms: 14
    transform_yield_count: 129
    insert_time_ms: 4
    insert_new_count: 318
    insert_reused_count: 9
-   query: EXPLAIN with recursive allDescendants as ( with recursive ancestorsOf250
        as ( select id, parent from t1 where id = 250 union all select b.id, b.parent
        from ancestorsOf250 as a, t1 as b where a.parent = b.id) select id, parent
        from ancestorsOf250 union all select b.id, b.parent from allDescendants as
        a, t1 as b where a.id = b.parent) select id, parent from allDescendants
    explain: 'RUNION-DFS q0 { RUNION-DFS q1 { ISCAN(CHILDIDX [EQUALS promote(@c20
        AS LONG)]) } { RECURSIVE COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]])
        | FILTER q1.PARENT EQUALS _.ID | MAP (_.ID AS ID, _.PARENT AS PARENT) } |
        MAP (_.ID AS ID, _.PARENT AS PARENT) } { RECURSIVE COVERING(PARENTIDX <,>
        -> [ID: KEY[1], PARENT: KEY[0]]) | FILTER q0.ID EQUALS _.PARENT | MAP (_.ID
        AS ID, _.PARENT AS PARENT) } | MAP (_.ID AS ID, _.PARENT AS PARENT)'
    task_count: 3441
    task_total_time_ms: 78
    transform_count: 705
    transform_time_ms: 19
    transform_yield_count: 202
    insert_time_ms: 6
    insert_new_count: 516
    insert_reused_count: 15
-   query: EXPLAIN with recursive c1 as ( select id, parent from t1 where parent =
        -1 union all select b.id, b.parent from c1 as a, t1 as b where a.id = b.parent)
        select id from c1
    explain: 'RUNION-DFS q0 { ISCAN(PARENTIDX [EQUALS promote(@c15 AS LONG)]) } {
        RECURSIVE COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]]) | FILTER
        q0.ID EQUALS _.PARENT | MAP (_.ID AS ID, _.PARENT AS PARENT) } | MAP (_.ID
        AS ID)'
    task_count: 2207
    task_total_time_ms: 67
    transform_count: 440
    transform_time_ms: 19
    transform_yield_count: 132
    insert_time_ms: 5
    insert_new_count: 327
    insert_reused_count: 9
-   query: EXPLAIN with recursive c1 as ( select id, parent from t1 where parent =
        -1 union all select b.id, b.parent from c1 as a, t1 as b where a.id = b.parent)
        select id from c1
    explain: 'RUNION-DFS q0 { ISCAN(PARENTIDX [EQUALS promote(@c15 AS LONG)]) } {
        RECURSIVE COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]]) | FILTER
        q0.ID EQUALS _.PARENT | MAP (_.ID AS ID, _.PARENT AS PARENT) } | MAP (_.ID
        AS ID)'
    task_count: 2207
    task_total_time_ms: 67
    transform_count: 440
    transform_time_ms: 19
    transform_yield_count: 132
    insert_time_ms: 5
    insert_new_count: 327
    insert_reused_count: 9
-   query: EXPLAIN with recursive allDescendants as ( with recursive ancestorsOf250
        as ( select id, parent from t1 where id = 250 union all select b.id, b.parent
        from ancestorsOf250 as a, t1 as b where a.parent = b.id) select id, parent
        from ancestorsOf250 union all select b.id, b.parent from allDescendants as
        a, t1 as b where a.id = b.parent) select id, parent from allDescendants
    explain: 'RUNION-DFS q0 { RUNION-DFS q1 { ISCAN(CHILDIDX [EQUALS promote(@c20
        AS LONG)]) } { RECURSIVE COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]])
        | FILTER q1.PARENT EQUALS _.ID | MAP (_.ID AS ID, _.PARENT AS PARENT) } |
        MAP (_.ID AS ID, _.PARENT AS PARENT) } { RECURSIVE COVERING(PARENTIDX <,>
        -> [ID: KEY[1], PARENT: KEY[0]]) | FILTER q0.ID EQUALS _.PARENT | MAP (_.ID
        AS ID, _.PARENT AS PARENT) } | MAP (_.ID AS ID, _.PARENT AS PARENT)'
    task_count: 3441
    task_total_time_ms: 78
    transform_count: 705
    transform_time_ms: 19
    transform_yield_count: 202
    insert_time_ms: 6
    insert_new_count: 516
    insert_reused_count: 15
-   query: EXPLAIN with recursive allDescendants as ( with recursive ancestorsOf250
        as ( select id, parent from t1 where id = 250 union all select b.id, b.parent
        from ancestorsOf250 as a, t1 as b where a.parent = b.id) select id, parent
        from ancestorsOf250 union all select b.id, b.parent from allDescendants as
        a, t1 as b where a.id = b.parent) select id, parent from allDescendants
    explain: 'RUNION-DFS q0 { RUNION-DFS q1 { ISCAN(CHILDIDX [EQUALS promote(@c20
        AS LONG)]) } { RECURSIVE COVERING(PARENTIDX <,> -> [ID: KEY[1], PARENT: KEY[0]])
        | FILTER q1.PARENT EQUALS _.ID | MAP (_.ID AS ID, _.PARENT AS PARENT) } |
        MAP (_.ID AS ID, _.PARENT AS PARENT) } { RECURSIVE COVERING(PARENTIDX <,>
        -> [ID: KEY[1], PARENT: KEY[0]]) | FILTER q0.ID EQUALS _.PARENT | MAP (_.ID
        AS ID, _.PARENT AS PARENT) } | MAP (_.ID AS ID, _.PARENT AS PARENT)'
    task_count: 3441
    task_total_time_ms: 78
    transform_count: 705
    transform_time_ms: 19
    transform_yield_count: 202
    insert_time_ms: 6
    insert_new_count: 516
    insert_reused_count: 15
