#
# distinct-from.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


---
options:
  supported_version: 4.5.6.0
---
schema_template:
    create table t1(id integer, col1 integer, col2 integer, primary key(id))
    create index i1 as select col1 from t1
    create index cnt as select count(*) from t1
    create index i2 as select col2 from t1
---
setup:
  steps:
    - query: INSERT INTO T1
        VALUES (1, 10, 1),
               (2, 10, null),
               (3, 10, 3),
               (4, 10, null),
               (5, 10, 5),
               (6, 20, null),
               (7, 20, null),
               (8, 20, null),
               (9, 20, 9),
               (10, 20, 10)
---
test_block:
  name: distinct-from-tests
  tests:
    -
      - query: select * from t1 WHERE col2 is   distinct    from null
      - explain: "COVERING(I2 <,> -> [COL2: KEY[0], ID: KEY[2]]) | FILTER _.COL2 IS_DISTINCT_FROM NULL | FETCH"
      - result: [{ID: 1, 10, 1}, {ID: 3, 10, 3}, {ID: 5, 10, 5}, {ID: 9, 20, 9}, {ID: 10, 20, 10}]
    -
      - query: select * from t1 WHERE col1 is DISTINCT from 10
      - explain: "COVERING(I1 <,> -> [COL1: KEY[0], ID: KEY[2]]) | FILTER _.COL1 IS_DISTINCT_FROM promote(@c10 AS INT) | FETCH"
      - result: [{ID: 6, 20, !null }, {ID: 7, 20, !null }, {ID: 8, 20, !null }, {ID: 9, 20, 9}, {ID: 10, 20, 10}]
    -
      - query: select * from t1 WHERE null is distinct from col2
      - explain: "COVERING(I2 <,> -> [COL2: KEY[0], ID: KEY[2]]) | FILTER _.COL2 IS_DISTINCT_FROM NULL | FETCH"
      - result: [{ID: 1, 10, 1}, {ID: 3, 10, 3}, {ID: 5, 10, 5}, {ID: 9, 20, 9}, {ID: 10, 20, 10}]
    -
      - query: select * from t1 WHERE 10 is distinct from col1
      - explain: "COVERING(I1 <,> -> [COL1: KEY[0], ID: KEY[2]]) | FILTER _.COL1 IS_DISTINCT_FROM promote(@c6 AS INT) | FETCH"
      - result: [{ID: 6, 20, !null }, {ID: 7, 20, !null }, {ID: 8, 20, !null }, {ID: 9, 20, 9}, {ID: 10, 20, 10}]
    -
      - query: select * from t1 WHERE null is distinct from null
      - explain: "COVERING(I1 <,> -> [COL1: KEY[0], ID: KEY[2]]) | FILTER NULL IS_DISTINCT_FROM NULL | FETCH"
      - result: []
    -
      - query: select * from t1 WHERE 10 is distinct from 10
      - explain: "COVERING(I1 <,> -> [COL1: KEY[0], ID: KEY[2]]) | FILTER @c6 IS_DISTINCT_FROM @c6 | FETCH"
      - result: []

---
test_block:
  name: not-distinct-from-tests
  tests:
    -
      - query: select * from t1 WHERE col2 is      not distinct from null
      - explain: "COVERING(I2 <,> -> [COL2: KEY[0], ID: KEY[2]]) | FILTER _.COL2 NOT_DISTINCT_FROM NULL | FETCH"
      - result: [{ID: 2, 10, !null }, {ID: 4, 10, !null }, {ID: 6, 20, !null }, {ID: 7, 20, !null }, {ID: 8, 20, !null }]
    -
      - query: select * from t1 WHERE col1 is not distinct from 20
      - explain: "COVERING(I1 <,> -> [COL1: KEY[0], ID: KEY[2]]) | FILTER _.COL1 NOT_DISTINCT_FROM promote(@c11 AS INT) | FETCH"
      - result: [{ID: 6, 20, !null }, {ID: 7, 20, !null }, {ID: 8, 20, !null }, {ID: 9, 20, 9}, {ID: 10, 20, 10}]
    -
      - query: select * from t1 WHERE null is not distinct from col2
      - explain: "COVERING(I2 <,> -> [COL2: KEY[0], ID: KEY[2]]) | FILTER _.COL2 NOT_DISTINCT_FROM NULL | FETCH"
      - result: [{ID: 2, 10, !null }, {ID: 4, 10, !null }, {ID: 6, 20, !null }, {ID: 7, 20, !null }, {ID: 8, 20, !null }]
    -
      - query: select * from t1 WHERE 20 is not distinct from col1
      - explain: "COVERING(I1 <,> -> [COL1: KEY[0], ID: KEY[2]]) | FILTER _.COL1 NOT_DISTINCT_FROM promote(@c6 AS INT) | FETCH"
      - result: [{ID: 6, 20, !null }, {ID: 7, 20, !null }, {ID: 8, 20, !null }, {ID: 9, 20, 9}, {ID: 10, 20, 10}]
    -
      - query: select count(*) from t1 WHERE null is not distinct from null
        # Cannot support FORCE_CONTINUATIONS due to non-empty aggregate scan returning a begin continuation.
        # See: https://github.com/FoundationDB/fdb-record-layer/issues/3206
      - maxRows: 0
      - explain: "AISCAN(CNT <,> BY_GROUP -> [_0: VALUE:[0]]) | MAP (_ AS _0) | ON EMPTY NULL | MAP (coalesce_long(_._0._0, promote(0l AS LONG)) AS _0)"
      - result: [{10}]
    -
      - query: select count(*) from t1 WHERE 10 is not distinct from 10
        # Cannot support FORCE_CONTINUATIONS due to non-empty aggregate scan returning a begin continuation.
        # See: https://github.com/FoundationDB/fdb-record-layer/issues/3206
      - maxRows: 0
      - explain: "AISCAN(CNT <,> BY_GROUP -> [_0: VALUE:[0]]) | MAP (_ AS _0) | ON EMPTY NULL | MAP (coalesce_long(_._0._0, promote(0l AS LONG)) AS _0)"
      - result: [{10}]
...
