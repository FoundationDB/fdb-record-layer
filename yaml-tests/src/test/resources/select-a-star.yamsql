#
# select-a-star.yamsql
#
# This source file is part of the FoundationDB open source project
#
# Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
schema_template:
    CREATE TYPE AS STRUCT S(S1 bigint, S2 bigint)
    create table A(A1 bigint, A2 bigint, A3 bigint, primary key(A1))
    create table B(B1 bigint, B2 bigint, B3 S, primary key(B1))
    create index A_idx as select A1, A2, A3 FROM A order by A1, A2, A3
---
setup:
  steps:
    - query: INSERT INTO A
        VALUES (1, 10, 1),
               (2, 10, 2),
               (3, 10, 3)
    - query: INSERT INTO B
        VALUES (1, 20, (4, 40)),
               (2, 20, (5, 50)),
               (3, 20, (6, 60))
---
test_block:
  name: select-star-tests
  tests:
    -
      - query: select B1 from B where exists (select A.*, B1 from A group by A1,A2,A3);
      - supported_version: !current_version
      - explain: "SCAN(<,>) | TFILTER B | FLATMAP q0 -> { ISCAN(A_IDX <,>) | MAP (_ AS _0) | AGG () GROUP BY (_._0.A1 AS _0, _._0.A2 AS _1, _._0.A3 AS _2) | MAP (_._0._0 AS A1, _._0._1 AS A2, _._0._2 AS A3, q0.B1 AS B1) | DEFAULT NULL | FILTER _ NOT_NULL AS q0 RETURN (q0.B1 AS B1) }"
      - result: [{1}, {2}, {3}]
    -
      # Version of above query to simulate force_continuations with older versions.
      # Can remove once we do not care about cross-version compatibility before !current_version
      # See: https://github.com/FoundationDB/fdb-record-layer/issues/3219
      - query: select B1 from B where exists (select A.*, B1 from A group by A1,A2,A3);
      - maxRows: 1
      - initialVersionLessThan: !current_version
      - result: [{1}]
      - result: [{2}]
      - result: [{2}]
      - result: [{3}]
      - result: [{3}]
      - result: []
      - initialVersionAtLeast: !current_version # Handled by above query in force_continuations mode
    -
      - query: select A.* from A;
      - result: [{A1: 1 , A2: 10, A3: 1}, {A1: 2, A2: 10, A3: 2}, {A1: 3, A2: 10, A3: 3}]
    -
      - query: select A.* from A where A3 >= 2;
      - result: [{A1: 2, A2: 10, A3: 2}, {A1: 3, A2: 10, A3: 3}]
    -
      - query: select X.* from A as X;
      - result: [{A1: 1 , 10, 1}, {A1: 2, 10, 2}, {A1: 3, 10, 3}]
    -
      - query: select A.* from A group by A1;
      - error: "42803"
    -
      - query: select * from A, B where A.A1 = B.B1;
      - result: [{A1: 1 , A2: 10, A3: 1, B1: 1, B2: 20, B3: {4, 40}},
                 {A1: 2, A2: 10, A3: 2, B1: 2, B2: 20, B3: {5, 50}},
                 {A1: 3, A2: 10, A3: 3, B1: 3, B2: 20, B3: {6, 60}}]
    -
      - query: select A.*, B.* from A, B where A.A1 = B.B1;
      - result: [{A1: 1 , A2: 10, A3: 1, B1: 1, B2: 20, B3: {4, 40}},
                 {A1: 2, A2: 10, A3: 2, B1: 2, B2: 20, B3: {5, 50}},
                 {A1: 3, A2: 10, A3: 3, B1: 3, B2: 20, B3: {6, 60}}]
    -
      - query: select X.*, Y.* from A as X, B as Y where X.A1 = Y.B1;
      - result: [{A1: 1 , A2: 10, A3: 1, B1: 1, B2: 20, B3: {4, 40}},
                 {A1: 2, A2: 10, A3: 2, B1: 2, B2: 20, B3: {5, 50}},
                 {A1: 3, A2: 10, A3: 3, B1: 3, B2: 20, B3: {6, 60}}]
    -
      - query: select Y.*, X.* from A as X, B as Y where X.A1 = Y.B1;
      - result: [{B1: 1, B2: 20, B3: {4, 40}, A1: 1 , A2: 10, A3: 1},
                 {B1: 2, B2: 20, B3: {5, 50}, A1: 2, A2: 10, A3: 2},
                 {B1: 3, B2: 20, B3: {6, 60}, A1: 3, A2: 10, A3: 3}]
    -
      - query: select A.*, B.* from A, B where A.A1 = B.B1 group by A1;
      - error: "42803"
    -
      - query: select B1 from B where exists (select A.*, B1 from A group by A1,A2,A3);
      - supported_version: !current_version
      - explain: "SCAN(<,>) | TFILTER B | FLATMAP q0 -> { ISCAN(A_IDX <,>) | MAP (_ AS _0) | AGG () GROUP BY (_._0.A1 AS _0, _._0.A2 AS _1, _._0.A3 AS _2) | MAP (_._0._0 AS A1, _._0._1 AS A2, _._0._2 AS A3, q0.B1 AS B1) | DEFAULT NULL | FILTER _ NOT_NULL AS q0 RETURN (q0.B1 AS B1) }"
      - result: [{1}, {2}, {3}]
    -
      # Version of above query to simulate force_continuations with older versions.
      # Can remove once we do not care about cross-version compatibility before !current_version
      # See: https://github.com/FoundationDB/fdb-record-layer/issues/3219
      - query: select B1 from B where exists (select A.*, B1 from A group by A1,A2,A3);
      - maxRows: 1
      - initialVersionLessThan: !current_version
      - result: [{1}]
      - result: [{2}]
      - result: [{2}]
      - result: [{3}]
      - result: [{3}]
      - result: []
      - initialVersionAtLeast: !current_version # Handled by above query in force_continuations mode
    -
      - query: select B.* from B where exists (select A.*, B.* from A group by A1,A2,A3);
      - supported_version: !current_version
      - explain: "SCAN(<,>) | TFILTER B | FLATMAP q0 -> { ISCAN(A_IDX <,>) | MAP (_ AS _0) | AGG () GROUP BY (_._0.A1 AS _0, _._0.A2 AS _1, _._0.A3 AS _2) | MAP (_._0._0 AS A1, _._0._1 AS A2, _._0._2 AS A3, q0.B1 AS B1, q0.B2 AS B2, q0.B3 AS B3) | DEFAULT NULL | FILTER _ NOT_NULL AS q0 RETURN q0 }"
      - result: [{1, 20, {4, 40}},
                 {2, 20, {5, 50}},
                 {3, 20, {6, 60}}]
    -
      # Version of above query to simulate force_continuations with older versions.
      # Can remove once we do not care about cross-version compatibility before !current_version
      # See: https://github.com/FoundationDB/fdb-record-layer/issues/3219
      - query: select B.* from B where exists (select A.*, B.* from A group by A1,A2,A3);
      - maxRows: 1
      - initialVersionLessThan: !current_version
      - result: [{1, 20, {4, 40}}]
      - result: [{2, 20, {5, 50}}]
      - result: [{2, 20, {5, 50}}]
      - result: [{3, 20, {6, 60}}]
      - result: [{3, 20, {6, 60}}]
      - result: []
      - initialVersionAtLeast: !current_version # Handled by above query in force_continuations mode
    -
      # Not yet supported
      - query: select B.B3.* from B;
      - error: "42601"
    -
      # Should never be supported
      - query: select B.*.S1 from B;
      - error: "42601"
    -
      # Ambiguous column A1 (error code is now correct).
      - query: select A1 from (select A.*, A.* from A) as nested
      - error: "42702"
#    -
#      - query: select A.*, SUM(B1) from A, B where A.A1 = B.B1 group by A1, A2, A3;
#      - result: [{A1: 1 , A2: 10, A3: 1, 1},
#                 {A1: 2, A2: 10, A3: 2, 2},
#                 {A1: 3, A2: 10, A3: 3, 3}]
...
