/*
 * PrimitiveFieldGenerator.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.relational.autotest.datagen;

import com.apple.foundationdb.relational.api.DynamicMessageBuilder;

import com.google.protobuf.Descriptors;

import java.sql.SQLException;

public class PrimitiveFieldGenerator implements FieldGenerator {
    private final String fieldName;
    private final Descriptors.FieldDescriptor.JavaType fieldType;
    private final RandomDataSource dataSource;
    private final boolean isRepeated;

    public PrimitiveFieldGenerator(String fieldName,
                                   Descriptors.FieldDescriptor.JavaType fieldType,
                                   RandomDataSource dataSource,
                                   boolean isRepeated) {
        this.fieldName = fieldName;
        this.fieldType = fieldType;
        this.dataSource = dataSource;
        this.isRepeated = isRepeated;
    }

    @Override
    public void generateValue(DynamicMessageBuilder destination) throws SQLException {
        Object o;
        switch (fieldType) {
            case INT:
                o = dataSource.nextInt();
                break;
            case LONG:
                o = dataSource.nextLong();
                break;
            case FLOAT:
                o = dataSource.nextFloat();
                break;
            case DOUBLE:
                o = dataSource.nextDouble();
                break;
            case BOOLEAN:
                o = dataSource.nextBoolean();
                break;
            case STRING:
                o = dataSource.nextUtf8();
                break;
            case BYTE_STRING:
                o = dataSource.nextBytes();
                break;
            default:
                throw new IllegalStateException("Only primitive fields can be generated by this generator");
        }

        if (isRepeated) {
            destination.addRepeatedField(fieldName, o);
        } else {
            destination.setField(fieldName, o);
        }
    }
}
