/*
 * PrimitiveFieldGenerator.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2024 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.relational.autotest.datagen;

import com.apple.foundationdb.relational.api.RelationalStructBuilder;

import java.sql.SQLException;
import java.sql.Types;

public class PrimitiveFieldGenerator implements FieldGenerator {
    private final String fieldName;
    private final int fieldSqlType;
    private final RandomDataSource dataSource;

    public PrimitiveFieldGenerator(String fieldName,
                                   int fieldSqlType,
                                   RandomDataSource dataSource) {
        this.fieldName = fieldName;
        this.fieldSqlType = fieldSqlType;
        this.dataSource = dataSource;
    }

    @Override
    public void generateValue(RelationalStructBuilder builder) throws SQLException {
        Object o;
        switch (fieldSqlType) {
            case Types.INTEGER:
                o = dataSource.nextInt();
                break;
            case Types.BIGINT:
                o = dataSource.nextLong();
                break;
            case Types.FLOAT:
                o = dataSource.nextFloat();
                break;
            case Types.DOUBLE:
                o = dataSource.nextDouble();
                break;
            case Types.BOOLEAN:
                o = dataSource.nextBoolean();
                break;
            case Types.VARCHAR:
                o = dataSource.nextUtf8();
                break;
            case Types.BINARY:
                o = dataSource.nextBytes();
                break;
            default:
                throw new IllegalStateException("Only primitive fields can be generated by this generator");
        }
        builder.addObject(fieldName, o, fieldSqlType);
    }
}
