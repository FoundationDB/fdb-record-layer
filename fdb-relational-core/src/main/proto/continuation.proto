/*
 * continuation.proto
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package com.apple.foundationdb.relational.continuation;
import "record_metadata.proto";
import "record_query_plan.proto";

option java_multiple_files = true;
option java_package = "com.apple.foundationdb.relational.continuation";
option java_outer_classname = "ContinuationOuter";

message ContinuationProto {
  enum Reason {
    USER_REQUESTED_CONTINUATION = 0;
    TRANSACTION_LIMIT_REACHED = 1;
    QUERY_EXECUTION_LIMIT_REACHED = 2;
    CURSOR_AFTER_LAST = 3;
  }

  optional int32 version = 1;
  // The underlying (cursor) execution state
  optional bytes execution_state = 2;
  // The parameter binding hash for the given query
  optional int32 binding_hash = 3;
  // The plan hash for the query -- to be deprecated
  optional int32 plan_hash = 4;
  // The serialized package
  optional CompiledStatement compiled_statement = 5;
  optional Reason reason = 6;
}

message TypedQueryArgument {
  optional com.apple.foundationdb.record.planprotos.PType type = 1;
  optional int32 literals_table_index = 2; // index of the corresponding entry in the literals table for the statement
  optional int32 token_index = 3; // index of the token in the statement
  optional int32 unnamed_parameter_index = 4; // parameter index for parameters encoded as ?
  optional string parameter_name = 5;  // parameter name given in the statement
  //
  // Note that if java object is NULL, then this field is set but nothing inside is set. If this field is not set,
  // it means that the argument is not set at all which may or may not be correct depending on the context where this
  // message is used. For instance, when continuing a query, this field should always be set, however, while preparing
  // a query through prepareStatement() the parameters may actually not be known at compile-time and cannot be set.
  // When the prepared statement is executed the necessary arguments for the formal parameters must be bound prior
  // to execution.
  //
  optional LiteralObject object = 6;
}

message LiteralObject {
  message Array {
    repeated LiteralObject element_objects = 2;
  }

  // if none of these are set, we consider the object to be NULL
  optional com.apple.foundationdb.record.planprotos.PComparableObject scalar_object = 1;
  optional Array array_object = 2;
  optional bytes record_object = 3;
}

message CompiledStatement {
  optional string plan_serialization_mode = 1; // same as plan hash mode for the time being
  // the serialized plan
  optional com.apple.foundationdb.record.planprotos.PRecordQueryPlan plan = 2;
  // extracted literals
  repeated TypedQueryArgument extracted_literals = 3;
  // query arguments - depending on context, the actual arguments may not be known, thus only type and inline
  // information is known and can be used.
  repeated TypedQueryArgument arguments = 4;
  // query plan constraints
  optional com.apple.foundationdb.record.planprotos.PQueryPlanConstraint plan_constraint = 5;
}
