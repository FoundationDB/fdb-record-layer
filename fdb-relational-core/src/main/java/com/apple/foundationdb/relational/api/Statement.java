/*
 * Statement.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2021-2024 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.relational.api;

import com.apple.foundationdb.relational.api.exceptions.RelationalException;

import com.google.protobuf.Message;

import java.util.Iterator;

import javax.annotation.Nonnull;

public interface Statement extends AutoCloseable {

    RelationalResultSet executeQuery(@Nonnull String query, @Nonnull Options options, @Nonnull QueryProperties queryProperties) throws RelationalException;

    /**
     * Execute the given Query, and return a ResultSet pointing to the results of the query.
     * <p>
     * If the query is an explain-only (i.e. {@code query.isExplain() == true}), then the returned ResultSet will
     * be a ResultSet with a single row; that row will have only a single entry containing the full Explain Plan
     * generated by the underlying query planner.
     * <p>
     * If the query is not an explain-only, then it will be planned and executed, and the results stored in the
     * returned ResultSet.
     *
     * @param query   the query to execute.
     * @param options options to use during execution. These options differ from {@link Queryable#getQueryOptions()}
     *                in that they are used by the <em>statement</em> to configure the query execution system, transactions,
     *                and so on. Options which configure the behavior of the query itself should be stored in
     *                {@link Queryable#getQueryOptions()}
     * @return A ResultSet for the results of the executed query.
     * @throws RelationalException if something goes wrong during execution.
     */
    @Nonnull
    RelationalResultSet executeQuery(@Nonnull Queryable query, @Nonnull Options options) throws RelationalException;

    @Nonnull
    RelationalResultSet executeScan(@Nonnull TableScan scan, @Nonnull Options options) throws RelationalException;

    default RelationalResultSet executeGet(@Nonnull String tableName, @Nonnull KeySet key, @Nonnull Options options) throws RelationalException {
        return executeGet(tableName, key, options, QueryProperties.DEFAULT);
    }

    @Nonnull
    RelationalResultSet executeGet(@Nonnull String tableName, @Nonnull KeySet key, @Nonnull Options options, @Nonnull QueryProperties queryProperties) throws RelationalException;

    int executeInsert(@Nonnull String tableName, @Nonnull Iterator<? extends Message> data, @Nonnull Options options) throws RelationalException;

    default int executeInsert(@Nonnull String tableName, @Nonnull Iterable<? extends Message> data, @Nonnull Options options) throws RelationalException {
        return executeInsert(tableName, data.iterator(), options);
    }

    int executeDelete(@Nonnull String tableName, @Nonnull Iterator<KeySet> keys, @Nonnull Options options) throws RelationalException;

    default int executeDelete(@Nonnull String tableName, @Nonnull Iterable<KeySet> keys, @Nonnull Options options) throws RelationalException {
        return executeDelete(tableName, keys.iterator(), options);
    }

    Continuation getContinuation();

    @Override
    void close() throws RelationalException;

}
