/*
 * fdb-record-layer-core.gradle
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-test-fixtures'
}

apply from: rootProject.file('gradle/antlr.gradle')
apply from: rootProject.file('gradle/proto.gradle')
apply from: rootProject.file('gradle/publishing.gradle')

def coreProject = ":${ext.coreProjectName}"
dependencies {
    api project(':fdb-extensions')
    annotationProcessor project(':fdb-extensions')

    implementation(project(coreProject))
    implementation project(":fdb-relational-api")

    implementation "io.dropwizard.metrics:metrics-core:${dropwizardVersion}"
    compileOnly "com.google.auto.service:auto-service:undefined"
    annotationProcessor "com.google.auto.service:auto-service:undefined"
    implementation "com.google.code.findbugs:jsr305:${jsr305Version}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.antlr:antlr4:${antlrVersion}"
    implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
    implementation("com.github.ben-manes.caffeine:caffeine:${caffeineVersion}")
    implementation("com.github.ben-manes.caffeine:guava:${caffeineVersion}")

    testImplementation project(path: ':fdb-extensions', configuration: 'tests')
    testImplementation project(path: coreProject, configuration: 'tests')
    testImplementation(testFixtures(project(":fdb-relational-api")))
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("com.google.guava:guava-testlib:${guavaVersion}")
    testImplementation 'com.h2database:h2:1.3.148'
    testImplementation "com.opencsv:opencsv:4.6"
    testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
    testImplementation("org.apache.logging.log4j:log4j-core:${log4jVersion}") // Needed in implementation for LogAppenderRule
    testImplementation("biz.aQute.bnd:biz.aQute.bnd.annotation:6.3.1")

    antlr "org.antlr:antlr4:${antlrVersion}"

    // Support for the fdb-relational-core test fixture.
    testFixturesImplementation(project(":fdb-relational-api"))
    testFixturesImplementation("com.google.protobuf:protobuf-java:${protobufVersion}")
    testFixturesImplementation("org.assertj:assertj-core:${assertjVersion}")
    testFixturesImplementation "com.google.code.findbugs:jsr305:${jsr305Version}"
    // This is included just for ResultSetAssert. It does a bunch of this
    // Type.Record record = ProtobufDdlUtil.recordFromDescriptor(((Message) colValue).getDescriptorForType());
    testFixturesImplementation(project((coreProject)))
}

/*
task autoTest(type: Test){
    description = 'Runs the Automated end-to-end tests.'
    group = 'verification'
//    testClassesDir = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform {
        includeEngines 'auto-test'
        excludeEngines 'junit-jupiter'
    }

    reports {
        junitXml.outputLocation = layout.buildDirectory.dir("autotest-test-results")
    }
}
 */

publishing {
    publications {
        library(MavenPublication) {
            pom {
                description = 'Relational core library containing main API implementation classes.'
            }
        }
    }
}
