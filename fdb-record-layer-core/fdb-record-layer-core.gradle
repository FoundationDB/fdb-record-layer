/*
 * fdb-record-layer-core.gradle
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.github.johnrengelman.shadow'
apply from: rootProject.file('gradle/proto.gradle')
apply from: rootProject.file('gradle/publishing.gradle')

configurations {
    repl.extendsFrom testRuntimeOnly
}

dependencies {
    api project(':fdb-extensions')
    annotationProcessor project(':fdb-extensions')

    api "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    compileOnly "com.google.code.findbugs:jsr305:${jsr305Version}"
    compileOnly "com.google.auto.service:auto-service:undefined"
    annotationProcessor "com.google.auto.service:auto-service:undefined"

    testImplementation project(path: ':fdb-extensions', configuration: 'tests')
    testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
    testImplementation "com.beust:jcommander:${jcommanderVersion}"
    testImplementation "org.apache.commons:commons-math3:${commonsMath3Version}"
    testImplementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    testCompileOnly "com.google.code.findbugs:jsr305:${jsr305Version}"
    testCompileOnly "com.google.auto.service:auto-service:undefined"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}" // binding
    testImplementation "org.apache.logging.log4j:log4j-core:${log4jVersion}" // library

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testAnnotationProcessor "com.google.auto.service:auto-service:undefined"
    testImplementation "org.jline:jline:${jlineVersion}"
    testImplementation "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    repl "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

sourceSets {
    main {
        java.srcDir ".out/generated/sources/annotationProcessor/java/main/"
    }
}

task testShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    classifier = 'standalone-tests'
    from sourceSets.main.output
    from sourceSets.test.output
    configurations = [ project.configurations.testRuntimeOnly ]
    manifest {
        inheritFrom project.tasks.jar.manifest
        attributes 'Main-Class': 'com.apple.foundationdb.record.provider.foundationdb.FDBRecordStorePerformanceTest',
                   'Multi-Release': 'true' // https://github.com/johnrengelman/shadow/issues/449
    }
    mergeServiceFiles()
    exclude 'log4j.properties'
}

task replJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    classifier = 'repl'
    from sourceSets.main.output
    from sourceSets.test.output
    configurations = [ project.configurations.repl ]
    manifest {
        inheritFrom project.tasks.jar.manifest
        attributes 'Main-Class': 'com.apple.foundationdb.record.query.plan.debug.ReplRunner'
    }
    mergeServiceFiles()
}

publishing {
    publications {
        library(MavenPublication) {
            pom {
                // Normally, the variable would be included within the string using variable expansion in a Groovy
                // string. However, the "description" field must be a java.lang.String, hence the use of string
                // concatenation here.
                description = 'A record-oriented layer built for FoundationDB.'
            }
        }
    }
}
