/*
 * record_cursor.proto
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

package com.apple.foundationdb.record;
import "google/protobuf/descriptor.proto";

option java_outer_classname = "RecordCursorProto";

message FlatMapContinuation {
    optional bytes outer_continuation = 1;
    optional bytes inner_continuation = 2;
    optional bytes check_value = 3;
}

// For backwards compatibility reasons, the union and intersection continuations differentiate
// between the first two children and all other children.

message IntersectionContinuation {
    message CursorState {
        optional bytes continuation = 1;
        optional bool started = 2;
    }
    optional bytes first_continuation = 1;
    optional bytes second_continuation = 2;
    optional bool first_started = 3;
    optional bool second_started = 4;
    repeated CursorState other_child_state = 5;
}

message UnionContinuation {
    message CursorState {
        optional bytes continuation = 1;
        optional bool exhausted = 2;
    }
    optional bytes first_continuation = 1;
    optional bytes second_continuation = 2;
    optional bool first_exhausted = 3;
    optional bool second_exhausted = 4;
    repeated CursorState other_child_state = 5;
}

message ProbableIntersectionContinuation {
    message CursorState {
        optional bytes continuation = 1;
        optional bool exhausted = 2;
        optional bytes bloom_filter = 3;
    }
    repeated CursorState child_state = 1;
}

message ConcatContinuation {
    optional bool second = 1; //true if the continuation applies to second cursor
    optional bytes continuation = 3;
}

message SizeStatisticsContinuation {
    optional bytes continuation = 1;
    optional SizeStatisticsPartialResults partialResults = 2;
}

message SizeStatisticsPartialResults {
    optional uint64 keyCount = 1;
    optional uint64 keySize = 2;
    optional uint64 maxKeySize = 3;
    optional uint64 valueSize = 4;
    optional uint64 maxValueSize = 5;
    repeated uint64 sizeBuckets = 6 [packed = true];
}

message OrElseContinuation {
    enum State {
        UNDECIDED = 0;
        USE_INNER = 1;
        USE_OTHER = 2;
    };
    optional State state = 1;
    optional bytes continuation = 2;
}

message ComposedBitmapIndexContinuation {
    message CursorState {
        optional bytes continuation = 1;
        optional bool exhausted = 2;
    }
    repeated CursorState child_state = 1;
}

message SelectorPlanContinuation {
    optional uint64 selected_plan = 1; // The selected plan executing from the list of optional plans
    optional bytes inner_continuation = 2; // The selected plan's continuation
}

message ComparatorContinuation {
    message CursorState {
        optional bytes continuation = 1;
        optional bool started = 2;
    }
    repeated CursorState child_state = 1;
}
