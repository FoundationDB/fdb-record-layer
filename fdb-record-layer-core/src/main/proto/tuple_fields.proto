/*
 * tuple_fields.proto
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package com.apple.foundationdb.record;

option java_outer_classname = "TupleFieldsProto";

/*** Messages used to encode fields that end up being single components in a Tuple. ***/

message UUID {
    // 2 64-bit fields is two tags, the same as 1 bytes field with a length of 16 would be.
    // fixed64 would be closer to how these are really used, but would fail the unsigned validator.
    optional sfixed64 most_significant_bits = 1;
    optional sfixed64 least_significant_bits = 2;
}

// NOTE: Even though this is proto2 syntax, all these Nullable types behave like proto3, in that if
// the message is present at all, the Tuple gets the default value, with no distinction for whether
// the value field was set.

message NullableDouble {
    optional double value = 1;
}

message NullableFloat {
    optional float value = 1;
}

message NullableInt32 {
    optional int32 value = 1;
}

message NullableInt64 {
    optional int64 value = 1;
}

message NullableBool {
    optional bool value = 1;
}

message NullableString {
    optional string value = 1;
}

message NullableBytes {
    optional bytes value = 1;
}
