/*
 * record_query_plan.proto
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2024 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

package com.apple.foundationdb.record.planprotos;
import "google/protobuf/descriptor.proto";
import "google/protobuf/any.proto";
import "record_metadata.proto";
import "record_value.proto";

option java_outer_classname = "RecordQueryPlanProto";
option java_multiple_files = true;


//
// Comparisons
//
message PComparison {
  extensions 5000 to max;
  oneof specific_comparison {
    google.protobuf.Any additional_comparisons = 1;
    PSimpleComparison simple_comparison = 2;
    PParameterComparison parameter_comparison = 3;
    PValueComparison value_comparison = 4;
    PListComparison list_comparison = 5;
    PNullComparison null_comparison = 6;
    POpaqueEqualityComparison opaque_equality_comparison = 7;
    PMultiColumnComparison multi_column_comparison = 8;
    PInvertedFunctionComparison inverted_function_comparison = 9;
    PRecordTypeComparison record_type_comparison = 10;
    PConversionSimpleComparison conversion_simple_comparison = 11;
    PConversionParameterComparison conversion_parameter_comparison = 12;
  }
}

message PSimpleComparison {
  optional PComparisonType type = 1;
  optional PComparableObject object = 2;
}

message PConversionSimpleComparison {
  optional PComparisonType type = 1;
  optional PComparableObject object = 2;
  optional KeyExpression conversion = 3;
}

message PParameterComparison {
  enum PBindingKind {
    IN = 1;
    RANK = 2;
    CORRELATION = 3;
    CONSTANT = 4;
  }

  optional PComparisonType type = 1;
  optional string parameter = 2;
  optional PBindingKind internal = 3;
}

message PConversionParameterComparison {
  optional PComparisonType type = 1;
  optional string parameter = 2;
  optional PParameterComparison.PBindingKind internal = 3;
  optional KeyExpression conversion = 4;
}

message PValueComparison {
  optional PComparisonType type = 1;
  optional PValue comparandValue = 2;
}

message PListComparison {
  optional PComparisonType type = 1;
  repeated PComparableObject comparand = 2;
}

message PNullComparison {
  optional PComparisonType type = 1;
}

message POpaqueEqualityComparison {
  // nothing
}

message PMultiColumnComparison {
  optional PComparison inner = 1;
}

message PInvertedFunctionComparison {
  optional Function function = 1;
  optional PComparison original_comparison = 2;
  optional PComparisonType type = 3;
}

message PRecordTypeComparison {
  optional string record_type_name = 1;
}

//
// Query Predicates
//
message PQueryPredicate {
  extensions 5000 to max;
  oneof specific_predicate {
      google.protobuf.Any additional_query_predicates = 1;
      PAndPredicate and_predicate = 2;
      PConstantPredicate constant_predicate = 3;
      PExistsPredicate exists_predicate = 4;
      PNotPredicate not_predicate = 5;
      POrPredicate or_predicate = 6;
      PPredicateWithValueAndRanges predicate_with_value_and_ranges = 7;
      PValuePredicate value_predicate = 8;
      PCompatibleTypeEvolutionPredicate compatible_type_evolution_predicate = 9;
      PDatabaseObjectDependenciesPredicate database_object_dependencies_predicate = 10;
  }
}

message PAbstractQueryPredicate {  // abstract
  optional bool is_atomic = 1;
}

message PAndOrPredicate {  // abstract
  optional PAbstractQueryPredicate super = 1;
  repeated PQueryPredicate children = 2;
}

message PAndPredicate {
  optional PAndOrPredicate super = 1;
}

message PCompatibleTypeEvolutionPredicate {
  message PRecordTypeNameFieldAccessPair {
    optional string record_type_name = 1;
    optional PFieldAccessTrieNode field_access_trie_node = 2;
  }
  repeated PRecordTypeNameFieldAccessPair record_type_name_field_access_pairs = 1;
}

message PConstantPredicate {
  optional PAbstractQueryPredicate super = 1;
  optional bool value = 2;
}

message PDatabaseObjectDependenciesPredicate {
  message PUsedIndex {
    optional string name = 1;
    optional int32 last_modified_version = 3;
  }
  repeated PUsedIndex used_indexes = 1;
}

message PExistsPredicate {
  optional PAbstractQueryPredicate super = 1;
  optional string existential_alias = 2;
}

message PNotPredicate {
  optional PAbstractQueryPredicate super = 1;
  optional PQueryPredicate child = 2;
}

message POrPredicate {
  optional PAndOrPredicate super = 1;
}

message PPredicateWithValueAndRanges {
  optional PAbstractQueryPredicate super = 1;
  optional PValue value = 2;
  repeated PRangeConstraints ranges = 3;
}

message PRangeConstraints {
  optional PCompilableRange evaluable_range = 1;
  repeated PComparison deferred_ranges = 2;
}

message PCompilableRange {
  repeated PComparison compilable_comparisons = 1;
}

message PValuePredicate {
  optional PAbstractQueryPredicate super = 1;
  optional PValue value = 2;
  optional PComparison comparison = 3;
}

//
// Plans
//

//
// PPhysicalQuantifier - A quantifier ranges over at least one plan reference, however, it could range
// over more than one if we at some point want to serialize variations as well, i.e. the intermediate state that
// a plan structure can be in during planning.
//
message PPhysicalQuantifier {
  optional string alias = 1;
  repeated PPlanReference plan_references = 2;
}

//
// Plan reference holder to assign ids to plans in order to support plan DAGs.
//
message PPlanReference {
  optional int32 reference_id = 1;
  optional PRecordQueryPlan record_query_plan = 2;
}

message PRecordQueryPlan {
  extensions 5000 to max;
  oneof specific_plan {
    google.protobuf.Any additional_plans = 1;
    PRecordQueryAggregateIndexPlan aggregate_index_plan = 2;
    PRecordQueryCoveringIndexPlan covering_index_plan = 3;
    PRecordQueryDamPlan dam_plan = 4;
    PRecordQueryDeletePlan delete_plan = 5;
    PRecordQueryExplodePlan explode_plan = 6;
    PRecordQueryFetchFromPartialRecordPlan fetch_from_partial_record_plan = 7;
    PRecordQueryFirstOrDefaultPlan first_or_default_plan = 8;
    PRecordQueryFlatMapPlan flat_map_plan = 9;
    PRecordQueryInComparandJoinPlan in_comparand_join_plan = 10;
    PRecordQueryIndexPlan record_query_index_plan = 11;
    PRecordQueryInParameterJoinPlan in_parameter_join_plan = 12;
    PRecordQueryInsertPlan insert_plan = 13;
    PRecordQueryIntersectionOnKeyExpressionPlan intersection_on_key_expression_plan = 14;
    PRecordQueryIntersectionOnValuesPlan intersection_on_values_plan = 15;
    PRecordQueryInUnionOnKeyExpressionPlan in_union_on_key_expression_plan = 16;
    PRecordQueryInUnionOnValuesPlan in_union_on_values_plan = 17;
    PRecordQueryInValuesJoinPlan in_values_join_plan = 18;
    PRecordQueryMapPlan map_plan = 19;
    PRecordQueryPredicatesFilterPlan predicates_filter_plan = 20;
    PRecordQueryRangePlan range_plan = 21;
    PRecordQueryScanPlan scan_plan = 22;
    PRecordQueryScoreForRankPlan score_for_rank_plan = 23;
    PRecordQuerySortPlan sort_plan = 24;
    PRecordQueryStreamingAggregationPlan streaming_aggregation_plan = 25;
    PRecordQueryTypeFilterPlan type_filter_plan = 26;
    PRecordQueryUnionOnKeyExpressionPlan union_on_key_expression_plan = 27;
    PRecordQueryUnionOnValuesPlan union_on_values_plan = 28;
    PRecordQueryUnorderedDistinctPlan unordered_distinct_plan = 29;
    PRecordQueryUnorderedPrimaryKeyDistinctPlan unordered_primary_key_distinct_plan = 30;
    PRecordQueryUnorderedUnionPlan unordered_union_plan = 31;
    PRecordQueryUpdatePlan update_plan = 32;
    PRecordQueryDefaultOnEmptyPlan default_on_empty_plan = 33;
    PTempTableScanPlan temp_table_scan_plan = 34;
    PTempTableInsertPlan temp_table_insert_plan = 35;
  }
}

//
// Specific plan operators (in alphabetical order)
//

//
// PRecordQueryAbstractDataModificationPlan
//
message PRecordQueryAbstractDataModificationPlan {
  optional PPhysicalQuantifier inner = 1;
  optional string target_record_type = 2;
  optional PType.PRecordType target_type = 3;
  optional PTransformationTrieNode transformations_trie = 4;
  optional PCoercionTrieNode coercion_trie = 5;
  optional PValue computation_value = 6;
  optional string current_modified_record_alias = 7;
}

//
// PRecordQueryAggregateIndexPlan
//
message PRecordQueryAggregateIndexPlan {
  optional PRecordQueryIndexPlan index_plan = 1;
  optional string record_type_name = 2;
  optional PIndexKeyValueToPartialRecord to_record = 3;
  optional PValue result_value = 4;
  optional PQueryPlanConstraint constraint = 5;
}

//
// PRecordQueryCoveringIndexPlan
//
message PRecordQueryCoveringIndexPlan {
  optional PRecordQueryPlan index_plan = 1;
  optional string record_type_name = 2;
  optional PIndexKeyValueToPartialRecord to_record = 3;
}

message PIndexKeyValueToPartialRecord {
  message PCopier {
    extensions 5000 to max;
    oneof specific_copier {
      google.protobuf.Any additional_copiers = 1;
      PFieldCopier field_copier = 2;
      PMessageCopier message_copier = 3;
      PFieldWithValueCopier field_with_value_copier = 4;
    }
  }

  message PFieldCopier {
    optional string field = 1;
    optional PTupleSource source = 2;
    optional PCopyIfPredicate copy_if_predicate = 3;
    repeated int32 ordinal_path = 4;
    optional string invertible_function = 5;
  }

  message PCopyIfPredicate {
    message PTruePredicate {
      // nothing
    }

    message PConditionalUponPathPredicate {
      repeated int32 ordinal_path = 1;
    }

    extensions 5000 to max;
    oneof specific_copy_if_predicate {
      google.protobuf.Any additional_copy_if_predicate = 101;
      PTruePredicate true_predicate = 1;
       PConditionalUponPathPredicate conditional_upon_path_predicate = 2;
    }
  }

  message PMessageCopier {
    optional string field = 1;
    optional PIndexKeyValueToPartialRecord nested = 2;
  }

  message PFieldWithValueCopier {
    optional string index_entry_alias = 1;
    optional PQueryPredicate copy_if_predicate = 2;
    optional PValue extractFromIndexEntryValue = 3;
    optional string field = 4;
  }

  repeated PCopier copiers = 1;
  optional bool is_required = 2;
}

//
// PRecordQueryDamPlan
//
message PRecordQueryDamPlan {
  optional PPhysicalQuantifier inner = 1;
  optional PRecordQuerySortKey key = 2;
}

//
// PRecordQueryDeletePlan
//
message PRecordQueryDeletePlan {
  optional PPhysicalQuantifier inner = 1;
}

//
// PRecordQueryExplodePlan
//
message PRecordQueryExplodePlan {
  optional PValue collection_value = 1;
}

//
// PRecordQueryFetchFromPartialRecordPlan
//
message PRecordQueryFetchFromPartialRecordPlan {
  optional PPhysicalQuantifier inner = 1;
  optional PType result_type = 2;
  optional PFetchIndexRecords fetch_index_records = 3;
}

//
// PRecordQueryFilterPlanBase
//
message PRecordQueryFilterPlanBase {
  optional PPhysicalQuantifier inner = 1;
}

//
// PRecordQueryFirstOrDefaultPlan
//
message PRecordQueryFirstOrDefaultPlan {
  optional PPhysicalQuantifier inner = 1;
  optional PValue on_empty_result_value = 2;
}

//
// PRecordQueryDefaultOnEmptyPlan
//
message PRecordQueryDefaultOnEmptyPlan {
  optional PPhysicalQuantifier inner = 1;
  optional PValue on_empty_result_value = 2;
}

//
// PRecordQueryFlatMapPlan
//
message PRecordQueryFlatMapPlan {
  optional PPhysicalQuantifier outer_quantifier = 1;
  optional PPhysicalQuantifier inner_quantifier = 2;
  optional PValue result_value = 3;
  optional bool inherit_outer_record_properties = 4;
}

//
// PRecordQueryIndexPlan
//
message PRecordQueryIndexPlan {
  optional string index_name = 1;
  optional KeyExpression common_primary_key = 2;
  optional PIndexScanParameters scan_parameters = 3;
  optional PIndexFetchMethod index_fetch_method = 4;
  optional PFetchIndexRecords fetch_index_records = 5;
  optional bool reverse = 6;
  optional bool strictly_sorted = 7;
  optional PType result_type = 8;
  optional PQueryPlanConstraint constraint = 9;
}

//
// PTempTableScanPlan
//
message PTempTableScanPlan {
  optional PValue temp_table_reference_value = 1;
}

message PIndexScanParameters {
  extensions 5000 to max;
  oneof specific_index_scan_parameters {
    google.protobuf.Any additional_index_scan_parameters = 1;
    PIndexScanComparisons index_scan_comparisons = 2;
    PMultidimensionalIndexScanComparisons multidimensional_index_scan_comparisons = 3;
    PTimeWindowScanComparisons time_window_scan_comparisons = 4;
  }
}

message PIndexScanType {
  optional string name = 1;
}

message PScanComparisons {
  repeated PComparison equality_comparisons = 1;
  repeated PComparison inequality_comparisons = 2;
}

message PIndexScanComparisons {
  optional PIndexScanType scan_type = 1;
  optional PScanComparisons scan_comparisons = 2;
}

message PMultidimensionalIndexScanComparisons {
  optional PScanComparisons prefix_scan_comparisons = 1;
  repeated PScanComparisons dimensions_scan_comparisons = 2;
  optional PScanComparisons suffix_scan_comparisons = 3;
}

message PTimeWindowForFunction {
  optional int32 leaderboard_type = 1;
  optional int64 leaderboard_timestamp = 2;
  optional string leaderboard_type_parameter = 3;
  optional string leaderboard_timestamp_parameter = 4;
}

message PTimeWindowScanComparisons {
 optional PIndexScanComparisons super = 1;
 optional PTimeWindowForFunction time_window = 2;
}

enum PIndexFetchMethod {
  SCAN_AND_FETCH = 1;
  USE_REMOTE_FETCH = 2;
  USE_REMOTE_FETCH_WITH_FALLBACK = 3;
}

enum PFetchIndexRecords {
  PRIMARY_KEY = 1;
  SYNTHETIC_CONSTITUENTS = 2;
}

message PQueryPlanConstraint {
  optional PQueryPredicate predicate = 1;
}

//
// PRecordQueryInComparandJoinPlan
//
message PRecordQueryInComparandJoinPlan {
  optional PRecordQueryInJoinPlan super = 1;
}

//
// PRecordQueryInJoinPlan
//
message PRecordQueryInJoinPlan {
  optional PPhysicalQuantifier physical_quantifier = 1;
  optional PInSource in_source = 2;
  optional PParameterComparison.PBindingKind internal = 3;
}

message PInSource {
  message Super {
    optional string binding_name = 1;
  }

  oneof specific_in_source {
    PInComparandSource in_comparand_source = 1;
    PSortedInComparandSource sorted_in_comparand_source = 2;
    PInParameterSource in_parameter_source = 3;
    PSortedInParameterSource sorted_in_parameter_source = 4;
    PInValuesSource in_values_source = 5;
    PSortedInValuesSource sorted_in_values_source = 6;
  }
}

message PInComparandSource {
  optional PInSource.Super super = 1;
  optional PComparison comparison = 2;
}

message PSortedInComparandSource {
  optional PInComparandSource super = 1;
  optional bool reverse = 2;
}

message PInParameterSource {
  optional PInSource.Super super = 1;
  optional string parameter_name = 2;
}

message PSortedInParameterSource {
  optional PInParameterSource super = 1;
  optional bool reverse = 2;
}

message PInValuesSource {
  optional PInSource.Super super = 1;
  repeated PComparableObject values = 2;
}

message PSortedInValuesSource {
  optional PInValuesSource super = 1;
  optional bool reverse = 2;
}

//
// PRecordQueryInParameterJoinPlan
//
message PRecordQueryInParameterJoinPlan {
  optional PRecordQueryInJoinPlan super = 1;
}

//
// PRecordQueryInsertPlan
//
message PRecordQueryInsertPlan {
  optional PRecordQueryAbstractDataModificationPlan super = 1;
}

//
// PTempTableInsertPlan
//
message PTempTableInsertPlan {
  optional PPhysicalQuantifier inner = 1;
  optional PValue temp_table_reference_value = 2;
  optional bool is_owning_temp_table = 3;
}

//
// PRecordQueryIntersectionPlan
//
message PRecordQueryIntersectionPlan {
  repeated PPhysicalQuantifier quantifiers = 1;
  optional PComparisonKeyFunction comparison_key_function = 2;
  optional bool reverse = 3;
}

message PComparisonKeyFunction {
  message POnKeyExpression {
    optional KeyExpression comparison_key_expression = 1;
  }
  message POnValues {
    optional string base_alias = 1;
    repeated PValue comparison_key_values = 2;
  }
  oneof specific_comparison_key_function {
    POnKeyExpression on_key_expression = 1;
    POnValues on_values = 2;
  }
}

//
// PRecordQueryIntersectionOnKeyExpressionPlan
//
message PRecordQueryIntersectionOnKeyExpressionPlan {
  optional PRecordQueryIntersectionPlan super = 1;
}

//
// PRecordQueryIntersectionOnValuesPlan
//
message PRecordQueryIntersectionOnValuesPlan {
  optional PRecordQueryIntersectionPlan super = 1;
}

//
// PRecordQueryInUnionPlan
//
message PRecordQueryInUnionPlan {
  optional PPhysicalQuantifier inner = 1;
  repeated PInSource in_sources = 2;
  optional PComparisonKeyFunction comparison_key_function = 3;
  optional bool reverse = 4;
  optional int32 max_number_of_values_allowed = 5;
  optional PParameterComparison.PBindingKind internal = 6;
}

//
// PRecordQueryInUnionOnKeyExpressionPlan
//
message PRecordQueryInUnionOnKeyExpressionPlan {
  optional PRecordQueryInUnionPlan super = 1;
}

//
// PRecordQueryInUnionOnValuesPlan
//
message PRecordQueryInUnionOnValuesPlan {
  optional PRecordQueryInUnionPlan super = 1;
}

//
// PRecordQueryInValuesJoinPlan
//
message PRecordQueryInValuesJoinPlan {
  optional PRecordQueryInJoinPlan super = 1;
}

//
// PRecordQueryMapPlan
//
message PRecordQueryMapPlan {
  optional PPhysicalQuantifier inner = 1;
  optional PValue result_value = 2;
}

//
// PRecordQueryPredicatesFilterPlan
//
message PRecordQueryPredicatesFilterPlan {
  optional PRecordQueryFilterPlanBase super = 1;
  repeated PQueryPredicate predicates = 2;
}

//
// PRecordQueryRangePlan
//
message PRecordQueryRangePlan {
  optional PValue exclusive_limit_value = 1;
}

//
// PRecordQuerySortPlan
//
message PRecordQuerySortPlan {
  optional PPhysicalQuantifier inner = 1;
  optional PRecordQuerySortKey key = 2;
}

message PRecordQuerySortKey {
  optional KeyExpression key = 1;
  optional bool reverse = 2;
}

//
// PRecordQueryScanPlan
//
message PRecordQueryScanPlan {
  optional bool has_record_types = 1;
  repeated string record_types = 2;
  optional PType flowed_type = 3;
  optional KeyExpression common_primary_key = 4;
  optional PScanComparisons comparisons = 5;
  optional bool reverse = 6;
  optional bool strictly_sorted = 7;
}

//
// PRecordQueryScoreForRankPlan
//
message PRecordQueryScoreForRankPlan {
  optional PPhysicalQuantifier inner = 1;
  repeated PScoreForRank ranks = 2;
}

message PScoreForRank {
  enum PBindingFunction {
      INT = 1;
      LONG = 2;
      FLOAT = 3;
      DOUBLE = 4;
      BOOLEAN = 5;
      STRING = 6;
      BYTE_STRING = 7;
      TUPLE = 8;
  }

  optional string binding_name = 1;
  optional PBindingFunction binding_function = 2;
  optional PIndexAggregateFunction function = 3;
  repeated PComparison comparisons = 4;
}

message PIndexAggregateFunction {
  optional string name = 1;
  optional KeyExpression operand = 2;
  optional string index = 3;
}

//
// PRecordQueryStreamingAggregationPlan
//
message PRecordQueryStreamingAggregationPlan {
    optional PPhysicalQuantifier inner = 1;
    optional PValue aggregate_value = 2;
    optional PValue grouping_key_value = 3;
    optional string grouping_key_alias = 4;
    optional string aggregate_alias = 5;
    optional PValue complete_result_value = 6;
}

//
// PRecordQueryTypeFilterPlan
//
message PRecordQueryTypeFilterPlan {
  optional PPhysicalQuantifier inner = 1;
  repeated string record_types = 2;
  optional PType result_type = 3;
}

//
// PRecordQueryUnionOnKeyExpressionPlan
//
message PRecordQueryUnionOnKeyExpressionPlan {
  optional PRecordQueryUnionPlan super = 1;
}

//
// PRecordQueryUnionOnValuesPlan
//
message PRecordQueryUnionOnValuesPlan {
  optional PRecordQueryUnionPlan super = 1;
}

//
// PRecordQueryUnionPlan
//
message PRecordQueryUnionPlan {
  optional PRecordQueryUnionPlanBase super = 1;
  optional PComparisonKeyFunction comparison_key_function = 2;
  optional bool show_comparison_key = 3;
}

//
// PRecordQueryUnorderedDistinctPlan
//
message PRecordQueryUnorderedDistinctPlan {
  optional PPhysicalQuantifier inner = 1;
  optional KeyExpression comparison_key = 2;
}

//
// PRecordQueryUnorderedPrimaryKeyDistinctPlan
//
message PRecordQueryUnorderedPrimaryKeyDistinctPlan {
  optional PPhysicalQuantifier inner = 1;
}

//
// PRecordQueryUnorderedUnionPlan
//
message PRecordQueryUnorderedUnionPlan {
  optional PRecordQueryUnionPlanBase super = 1;
}

//
// PRecordQueryUnionPlanBase
//
message PRecordQueryUnionPlanBase {
  repeated PPhysicalQuantifier quantifiers = 1;
  optional bool reverse = 2;
}

//
// PRecordQueryUpdatePlan
//
message PRecordQueryUpdatePlan {
  optional PRecordQueryAbstractDataModificationPlan super = 1;
}
