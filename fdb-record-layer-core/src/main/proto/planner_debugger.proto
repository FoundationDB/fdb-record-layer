/*
 * planner_debugger.proto
 *
 * This source file is part of the FoundationDB open source projectsour
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

package com.apple.foundationdb.record.query.plan.cascades.debug.eventprotos;
import "google/protobuf/descriptor.proto";

option java_outer_classname = "PlannerDebuggerProto";
option java_multiple_files = true;

message PEvent {
  optional string description = 1;
  optional string shorthand = 2;

  oneof specific_event {
    POptimizeInputsEvent optimize_inputs_event = 3;
    PAdjustMatchEvent adjust_match_event = 4;
    PExploreGroupEvent explore_group_event = 5;
    POptimizeGroupEvent optimize_group_event = 6;
    PExploreExpressionEvent explore_expression_event = 7;
    PTransformEvent transform_event = 8;
    PTransformRuleCallEvent transform_rule_call_event = 9;
    PExecutingTaskEvent executing_task_event = 10;
    PInsertIntoMemoEvent insert_into_memo_event = 11;
    PTranslateCorrelationsEvent translate_correlations_event = 12;
    PInitiatePlannerPhaseEvent initiate_planner_phase_event = 13;
  }
}

enum PPlannerPhase {
  REWRITING = 1;
  PLANNING = 2;
}

message PAbstractEventWithState {
  optional PRegisteredReference root_reference = 1;
  optional string location = 2;
  optional PPlannerPhase planner_phase = 3;
}

message POptimizeInputsEvent {
  optional PAbstractEventWithState super = 1;
  optional PRegisteredReference current_group_reference = 2;
  optional PRegisteredRelationalExpression expression = 3;
}

message PAdjustMatchEvent {
  optional PAbstractEventWithState super = 1;
  optional PRegisteredReference current_group_reference = 2;
  optional PRegisteredRelationalExpression expression = 3;
}

message PExploreGroupEvent {
  optional PAbstractEventWithState super = 1;
  optional PRegisteredReference current_group_reference = 2;
}

message POptimizeGroupEvent {
  optional PAbstractEventWithState super = 1;
  optional PRegisteredReference current_group_reference = 2;
}

message PExploreExpressionEvent {
  optional PAbstractEventWithState super = 1;
  optional PRegisteredReference current_group_reference = 2;
  optional PRegisteredRelationalExpression expression = 3;
}

message PTransformEvent {
  optional PAbstractEventWithState super = 1;
  optional PRegisteredReference current_group_reference = 2;
  optional PBindable bindable = 3;
  optional string rule = 4;
}

message PTransformRuleCallEvent {
  optional PAbstractEventWithState super = 1;
  optional PRegisteredReference current_group_reference = 2;
  optional PBindable bindable = 3;
  optional string rule = 4;
}

message PExecutingTaskEvent {
  optional PAbstractEventWithState super = 1;
}

message PInitiatePlannerPhaseEvent {
  optional PAbstractEventWithState super = 1;
}

message PInsertIntoMemoEvent {
  optional string location = 1;
  optional PRegisteredRelationalExpression expression = 2;
  repeated PRegisteredReference reusedExpressionReferences = 3;
}

message PTranslateCorrelationsEvent {
  optional PRegisteredRelationalExpression expression = 1;
  optional string location = 2;
}

message PRegisteredReference {
  optional string name = 1;
  repeated PRegisteredRelationalExpression expressions = 2;
}

message PRegisteredRelationalExpression {
  optional string name = 1;
  optional int32 semantic_hash_code = 2;
}

message PBindable {
  oneof specific_bindable {
    PRegisteredRelationalExpression expression = 1;
    PPartialMatch partial_match = 2;
    PMatchPartition match_partition = 3;
  }
}

message PPartialMatch {
  optional string match_candidate = 1;
  optional PRegisteredReference query_ref = 2;
  optional PRegisteredRelationalExpression query_expression = 3;
  optional PRegisteredReference candidate_ref = 4;
}

message PMatchPartition {
  repeated PPartialMatch partial_matches = 2;
}
