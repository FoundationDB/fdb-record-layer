/*
 * record_metadata.proto
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

package com.apple.foundationdb.record;
import "google/protobuf/descriptor.proto";
import "record_key_expression.proto";
import "record_query_plan.proto";

option java_outer_classname = "RecordMetaDataProto";

message DataStoreInfo {
  optional int32 formatVersion = 1;
  optional int32 metaDataversion = 2;
  optional int32 userVersion = 3;
  optional com.apple.foundationdb.record.expressions.KeyExpression record_count_key = 4;
  optional uint64 lastUpdateTime = 5;
  optional bool omit_unsplit_record_suffix = 6;
  optional bool cacheable = 7;

  // Compatible with map<string, bytes> on the wire
  message UserFieldEntry {
    optional string key = 1;
    optional bytes value = 2;
  }
  repeated UserFieldEntry user_field = 8;
}

message Index {
  enum Type {
    INDEX = 1;
    UNIQUE = 2;
    RANK = 3;
    RANK_UNIQUE = 4;    // (Meaning the score is unique.)
  };
  repeated string record_type = 1;
  optional Type index_type = 2 [deprecated = true]; // Use type.
  optional string name = 3;
  optional com.apple.foundationdb.record.expressions.KeyExpression root_expression = 4;
  optional bytes subspace_key = 5;
  optional int32 last_modified_version = 6;
  // value_expression should now be expressed as a KeyWithValue() root expression
  optional com.apple.foundationdb.record.expressions.KeyExpression value_expression = 7 [deprecated = true];
  optional string type = 8;
  repeated Option options = 9;
  message Option {
    required string key = 1;
    required string value = 2;
  };
  optional int32 added_version = 10;
  optional Predicate predicate = 11;
  extensions 1000 to 2000;
}

message RecordType {
  required string name = 1;
  optional com.apple.foundationdb.record.expressions.KeyExpression primary_key = 2;
  optional int32 since_version = 3;
  optional com.apple.foundationdb.record.expressions.Value explicit_key = 4;
  extensions 1000 to 2000;
}

message FormerIndex {
  optional string former_name = 3;
  optional bytes subspace_key = 5;
  optional int32 removed_version = 6;
  optional int32 added_version = 10;
  extensions 1000 to 2000;
}

message MetaData {
  optional google.protobuf.FileDescriptorProto records = 1;
  repeated Index indexes = 2;
  repeated RecordType record_types = 3;
  optional bool split_long_records = 4;
  optional int32 version = 5;
  repeated FormerIndex former_indexes = 6;
  optional com.apple.foundationdb.record.expressions.KeyExpression record_count_key = 7 [deprecated = true];
  optional bool store_record_versions = 8;
  repeated google.protobuf.FileDescriptorProto dependencies = 9;
  optional int64 subspace_key_counter = 10;
  optional bool uses_subspace_key_counter = 11;
  repeated JoinedRecordType joined_record_types = 12;
  repeated UnnestedRecordType unnested_record_types = 13;
  repeated SerializableFunction serializable_function = 14;
  extensions 1000 to 2000;
}

message SerializableFunction {
  oneof specific_function {
    com.apple.foundationdb.record.planprotos.PMacroFunctionValue macro_function = 1;
  }
}

message ScalarValuedFunction {
  optional com.apple.foundationdb.record.planprotos.PMacroFunctionValue function_value = 1;
}

message JoinedRecordType {
  optional string name = 1;
  optional com.apple.foundationdb.record.expressions.Value record_type_key = 4;

  message JoinConstituent {
    optional string name = 1;
    optional string record_type = 2;
    optional bool outer_joined = 3;
  }

  message Join {
    optional string left = 1;
    optional com.apple.foundationdb.record.expressions.KeyExpression left_expression = 2;
    optional string right = 3;
    optional com.apple.foundationdb.record.expressions.KeyExpression right_expression = 4;
  }

  repeated JoinConstituent join_constituents = 10;
  repeated Join joins = 11;
}

message UnnestedRecordType {
  optional string name = 1;
  optional com.apple.foundationdb.record.expressions.Value record_type_key = 2;

  message NestedConstituent {
    optional string name = 1;
    optional string parent = 2;
    optional string type_name = 3;
    optional com.apple.foundationdb.record.expressions.KeyExpression nesting_expression = 4;
  }

  repeated NestedConstituent nested_constituents = 3;
}

///////////////////////////////////////////////////

enum ComparisonType {
    EQUALS = 1;
    NOT_EQUALS = 2;
    LESS_THAN = 3;
    LESS_THAN_OR_EQUALS = 4;
    GREATER_THAN = 5;
    GREATER_THAN_OR_EQUALS = 6;
    STARTS_WITH = 7;
    NOT_NULL = 8;
    IS_NULL = 9;
}

message SimpleComparison {
  optional ComparisonType type = 1;
  optional com.apple.foundationdb.record.expressions.Value operand = 2;
}

// in Comparisons.Comparison we have a special NullComparison that takes care of comparing
// an operand to null.
message NullComparison {
  optional bool isNull = 1;
}

message Comparison {
  // exactly one of the following
  optional SimpleComparison simple_comparison = 1;
  optional NullComparison null_comparison = 2;
}

message AndPredicate {
  repeated Predicate children = 1;
}

message OrPredicate {
  repeated Predicate children = 2;
}

message ConstantPredicate {
  enum ConstantValue {
    TRUE = 1;
    FALSE = 2;
    NULL = 3;
  }
  optional ConstantValue value = 1;
}

message NotPredicate {
  optional Predicate child = 1;
}

message ValuePredicate {
  repeated string value = 1;
  optional Comparison comparison = 2;
}

message Predicate {
  // exactly one of the following
  optional AndPredicate and_predicate = 1;
  optional OrPredicate or_predicate = 2;
  optional ConstantPredicate constant_predicate = 3;
  optional NotPredicate not_predicate = 4;
  optional ValuePredicate value_predicate = 5;
}
