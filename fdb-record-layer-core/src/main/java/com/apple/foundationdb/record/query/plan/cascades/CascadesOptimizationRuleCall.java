/*
 * CascadesOptimizationRuleCall.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2019 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.record.query.plan.cascades;

import com.apple.foundationdb.annotation.API;
import com.apple.foundationdb.record.EvaluationContext;
import com.apple.foundationdb.record.RecordCoreArgumentException;
import com.apple.foundationdb.record.query.plan.cascades.expressions.RelationalExpression;
import com.apple.foundationdb.record.query.plan.cascades.matching.structure.PlannerBindings;
import com.google.common.base.Verify;
import com.google.common.collect.Iterables;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.util.Optional;
import java.util.Set;

/**
 * A rule call implementation for the {@link CascadesPlanner}. This rule call implements the logic for handling new
 * expressions as they are generated by a {@link CascadesRule#onMatch(CascadesRuleCall)} and passed to the rule call
 * via the {@link #yield(ExpressionRef)} method, which consists primarily of manipulating the implicit a memo data
 * structure defined by {@link GroupExpressionRef}s and {@link RelationalExpression}s.
 * <br>
 * An invoked rule can in turn call {@link #yield} or {@link #yieldPartialMatch} to either declare a new resulting
 * expression or to declare a new partial match between the current expression and some candidate expression.
 *
 */
@API(API.Status.EXPERIMENTAL)
public class CascadesOptimizationRuleCall extends CascadesRuleCall {
    @Nullable
    private RelationalExpression newExpression;

    public CascadesOptimizationRuleCall(@Nonnull PlanContext context,
                                        @Nonnull CascadesRule<?> rule,
                                        @Nonnull GroupExpressionRef<RelationalExpression> root,
                                        @Nonnull ExpressionRefTraversal traversal,
                                        @Nonnull PlannerBindings bindings,
                                        @Nonnull final EvaluationContext evaluationContext) {
        super(rule, root, traversal, bindings, context, evaluationContext);
        this.newExpression = null;
    }

    @Override
    public void run() {
        getRule().onMatch(this);
    }

    @Nonnull
    public <T> Optional<T> getPlannerConstraint(@Nonnull final PlannerConstraint<T> plannerConstraint) {
        throw new RecordCoreArgumentException("this method should not be called on an optimization rule");
    }

    @Override
    @SuppressWarnings({"unchecked", "PMD.CompareObjectsWithEquals"}) // deliberate use of == equality check for short-circuit condition
    public void yield(@Nonnull ExpressionRef<? extends RelationalExpression> expressionReference) {
        if (expressionReference == getRoot()) {
            return;
        }

        if (expressionReference instanceof GroupExpressionRef) {
            GroupExpressionRef<RelationalExpression> groupExpressionRef = (GroupExpressionRef<RelationalExpression>)expressionReference;
            final var members = groupExpressionRef.getMembers();
            Verify.verify(members.size() <= 1);
            if (!members.isEmpty()) {
                this.yield(Iterables.getOnlyElement(members));
            }
        } else {
            throw new RecordCoreArgumentException("found a non-group reference in an expression used by the Cascades planner");
        }
    }

    public void yield(@Nonnull Set<? extends RelationalExpression> expressions) {
        for (RelationalExpression expression : expressions) {
            this.yield(expression);
        }
    }

    public void yield(@Nonnull RelationalExpression expression) {
        if (newExpression != null) {
            throw new RecordCoreArgumentException("optimization rule yielded more than one expression");
        }

        verifyMemoized(expression);
        final var root = getRoot();
        root.pruneWith(expression);
        newExpression = expression;
    }

    @Override
    public void yieldPartialMatch(@Nonnull final AliasMap boundAliasMap,
                                  @Nonnull final MatchCandidate matchCandidate,
                                  @Nonnull final RelationalExpression queryExpression,
                                  @Nonnull final ExpressionRef<? extends RelationalExpression> candidateRef,
                                  @Nonnull final MatchInfo matchInfo) {
        throw new RecordCoreArgumentException("this method should not be called on an optimization rule");
    }

    @SuppressWarnings({"PMD.CompareObjectsWithEquals"}) // deliberate use of id equality check for short-circuit condition
    public <T> void pushConstraint(@Nonnull final ExpressionRef<? extends RelationalExpression> reference,
                                   @Nonnull final PlannerConstraint<T> plannerConstraint,
                                   @Nonnull final T requirement) {
        throw new RecordCoreArgumentException("this method should not be called on an optimization rule");
    }

    @Nullable
    public RelationalExpression getNewExpression() {
        return newExpression;
    }
}
