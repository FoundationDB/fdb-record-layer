/*
 * CascadesExplorationRuleCall.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2019 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.record.query.plan.cascades;

import com.apple.foundationdb.annotation.API;
import com.apple.foundationdb.record.EvaluationContext;
import com.apple.foundationdb.record.RecordCoreArgumentException;
import com.apple.foundationdb.record.query.plan.cascades.expressions.RelationalExpression;
import com.apple.foundationdb.record.query.plan.cascades.matching.structure.PlannerBindings;
import com.google.common.base.Verify;
import com.google.common.collect.Sets;

import javax.annotation.Nonnull;
import java.util.Collection;
import java.util.Collections;
import java.util.Optional;
import java.util.Set;

/**
 * A rule call implementation for the {@link CascadesPlanner}. This rule call implements the logic for handling new
 * expressions as they are generated by a {@link CascadesRule#onMatch(CascadesRuleCall)} and passed to the rule call
 * via the {@link #yield(ExpressionRef)} method, which consists primarily of manipulating the implicit a memo data
 * structure defined by {@link GroupExpressionRef}s and {@link RelationalExpression}s.
 * <br>
 * An invoked rule can in turn call {@link #yield} or {@link #yieldPartialMatch} to either declare a new resulting
 * expression or to declare a new partial match between the current expression and some candidate expression.
 *
 */
@API(API.Status.EXPERIMENTAL)
public class CascadesExplorationRuleCall extends CascadesRuleCall {
    @Nonnull
    private final LinkedIdentitySet<RelationalExpression> newExpressions;
    @Nonnull
    private final LinkedIdentitySet<PartialMatch> newPartialMatches;
    @Nonnull
    private final Set<ExpressionRef<? extends RelationalExpression>> referencesWithPushedRequirements;

    public CascadesExplorationRuleCall(@Nonnull final PlanContext context,
                                       @Nonnull final CascadesRule<?> rule,
                                       @Nonnull final GroupExpressionRef<RelationalExpression> root,
                                       @Nonnull final ExpressionRefTraversal traversal,
                                       @Nonnull final PlannerBindings bindings,
                                       @Nonnull final EvaluationContext evaluationContext) {
        super(rule, root, traversal, bindings, context, evaluationContext);
        this.newExpressions = new LinkedIdentitySet<>();
        this.newPartialMatches = new LinkedIdentitySet<>();
        this.referencesWithPushedRequirements = Sets.newLinkedHashSet();
    }

    @Override
    public void run() {
        getRule().onMatch(this);
    }

    @Nonnull
    @Override
    public <T> Optional<T> getPlannerConstraint(@Nonnull final PlannerConstraint<T> plannerConstraint) {
        if (getRule().getConstraintDependencies().contains(plannerConstraint)) {
            return getRoot().getConstraintsMap().getConstraintOptional(plannerConstraint);
        }

        throw new RecordCoreArgumentException("rule is not dependent on requested planner requirement");
    }

    @Override
    @SuppressWarnings({"unchecked", "PMD.CompareObjectsWithEquals"}) // deliberate use of == equality check for short-circuit condition
    public void yield(@Nonnull final ExpressionRef<? extends RelationalExpression> expressionReference) {
        final var root = getRoot();
        if (expressionReference == root) {
            return;
        }
        if (expressionReference instanceof GroupExpressionRef) {
            GroupExpressionRef<RelationalExpression> groupExpressionRef = (GroupExpressionRef<RelationalExpression>) expressionReference;
            for (final var member : groupExpressionRef.getMembers()) {
                verifyMemoized(member);
                if (root.insertFrom(member, groupExpressionRef)) {
                    newExpressions.add(member);
                    getTraversal().addExpression(root, member);
                }
            }
        } else {
            throw new RecordCoreArgumentException("found a non-group reference in an expression used by the Cascades planner");
        }
    }

    @Override
    public void yield(@Nonnull Set<? extends RelationalExpression> expressions) {
        for (RelationalExpression expression : expressions) {
            this.yield(expression);
        }
    }

    @Override
    public void yield(@Nonnull RelationalExpression expression) {
        verifyMemoized(expression);
        final var root = getRoot();
        if (root.insert(expression)) {
            newExpressions.add(expression);
            getTraversal().addExpression(root, expression);
        }
    }

    public void yieldPartialMatch(@Nonnull final AliasMap boundAliasMap,
                                  @Nonnull final MatchCandidate matchCandidate,
                                  @Nonnull final RelationalExpression queryExpression,
                                  @Nonnull final ExpressionRef<? extends RelationalExpression> candidateRef,
                                  @Nonnull final MatchInfo matchInfo) {
        final var root = getRoot();
        final PartialMatch newPartialMatch =
                new PartialMatch(boundAliasMap,
                        matchCandidate,
                        root,
                        queryExpression,
                        candidateRef,
                        matchInfo);
        root.addPartialMatchForCandidate(matchCandidate, newPartialMatch);
        newPartialMatches.add(newPartialMatch);
    }

    @SuppressWarnings({"PMD.CompareObjectsWithEquals"}) // deliberate use of id equality check for short-circuit condition
    public <T> void pushConstraint(@Nonnull final ExpressionRef<? extends RelationalExpression> reference,
                                   @Nonnull final PlannerConstraint<T> plannerConstraint,
                                   @Nonnull final T requirement) {
        Verify.verify(getRoot() != reference);
        final ConstraintsMap requirementsMap = reference.getConstraintsMap();
        if (requirementsMap.pushProperty(plannerConstraint, requirement).isPresent()) {
            referencesWithPushedRequirements.add(reference);
        }
    }

    @Nonnull
    public Collection<RelationalExpression> getNewExpressions() {
        return Collections.unmodifiableCollection(newExpressions);
    }

    @Nonnull
    public Set<PartialMatch> getNewPartialMatches() {
        return newPartialMatches;
    }

    @Nonnull
    public Set<ExpressionRef<? extends RelationalExpression>> getReferencesWithPushedRequirements() {
        return referencesWithPushedRequirements;
    }
}
