/*
 * AbstractValueRuleCall.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2022 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.record.query.plan.cascades.values.simplification;

import com.apple.foundationdb.annotation.API;
import com.apple.foundationdb.record.query.plan.cascades.AliasMap;
import com.apple.foundationdb.record.query.plan.cascades.CorrelationIdentifier;
import com.apple.foundationdb.record.query.plan.cascades.LinkedIdentitySet;
import com.apple.foundationdb.record.query.plan.cascades.PlannerRuleCall;
import com.apple.foundationdb.record.query.plan.cascades.matching.structure.PlannerBindings;
import com.apple.foundationdb.record.query.plan.cascades.values.Value;
import com.google.common.base.Verify;
import com.google.common.collect.ImmutableSet;

import javax.annotation.Nonnull;
import java.util.Collection;
import java.util.Collections;
import java.util.Set;

/**
 * A rule call implementation for the simplification of {@link Value} trees. This rule call implements the logic for
 * handling new {@link Value}s as they are generated by a {@link AbstractValueRule#onMatch(PlannerRuleCall)} and
 * passed to the rule call via the {@link #yield(Object)} method.
 * @param <RESULT> the type parameter representing the type of result that is handed to {@link #yield(Object)}
 * @param <CALL> the type of this
 * @param <BASE> the type of entity the associated rule matches`
 *
 */
@API(API.Status.EXPERIMENTAL)
public class AbstractRuleCall<RESULT, CALL extends AbstractRuleCall<RESULT, CALL, BASE>, BASE> implements PlannerRuleCall<RESULT> {
    @Nonnull
    private final AbstractRule<RESULT, CALL, ? extends BASE, ? extends BASE> rule;
    @Nonnull
    private final BASE root;
    @Nonnull
    private final BASE current;
    @Nonnull
    private final PlannerBindings bindings;
    @Nonnull
    private final AliasMap equivalenceMap;
    @Nonnull
    private final Set<CorrelationIdentifier> constantAliases;
    @Nonnull
    private final LinkedIdentitySet<RESULT> results;
    private boolean shouldReExplore;

    public AbstractRuleCall(@Nonnull final AbstractRule<RESULT, CALL, ? extends BASE, ? extends BASE> rule,
                            @Nonnull final BASE root,
                            @Nonnull final BASE current,
                            @Nonnull final PlannerBindings bindings,
                            @Nonnull final AliasMap equivalenceMap,
                            @Nonnull final Set<CorrelationIdentifier> constantAliases) {
        this.rule = rule;
        this.root = root;
        this.current = current;
        this.bindings = bindings;
        this.equivalenceMap = equivalenceMap;
        this.results = new LinkedIdentitySet<>();
        this.constantAliases = ImmutableSet.copyOf(constantAliases);
        this.shouldReExplore = false;
    }

    @Nonnull
    public BASE getRoot() {
        return root;
    }

    @Nonnull
    public BASE getCurrent() {
        return current;
    }

    @SuppressWarnings("PMD.CompareObjectsWithEquals")
    public boolean isRoot() {
        return root == current;
    }

    @Nonnull
    public AbstractRule<RESULT, CALL, ? extends BASE, ? extends BASE> getRule() {
        return rule;
    }

    @Override
    @Nonnull
    public PlannerBindings getBindings() {
        return bindings;
    }

    @Nonnull
    public AliasMap getEquivalenceMap() {
        return equivalenceMap;
    }

    @Nonnull
    public Set<CorrelationIdentifier> getConstantAliases() {
        return constantAliases;
    }

    @Override
    @SuppressWarnings("PMD.CompareObjectsWithEquals") // deliberate use of == equality check for short-circuit condition
    public void yield(@Nonnull RESULT value) {
        if (value == current) {
            return;
        }

        results.add(value);
    }

    @SuppressWarnings("PMD.CompareObjectsWithEquals")
    public void yieldAndReExplore(@Nonnull RESULT value) {
        Verify.verify(value != current);
        results.add(value);
        shouldReExplore = true;
    }

    @Nonnull
    public Collection<RESULT> getResults() {
        return Collections.unmodifiableCollection(results);
    }

    public boolean shouldReExplore() {
        return shouldReExplore;
    }
}
