/*
 * CascadesRuleCall.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2019 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.record.query.plan.cascades;

import com.apple.foundationdb.annotation.API;
import com.apple.foundationdb.record.RecordCoreArgumentException;
import com.apple.foundationdb.record.query.plan.cascades.Quantifiers.AliasResolver;
import com.apple.foundationdb.record.query.plan.cascades.expressions.RelationalExpression;
import com.apple.foundationdb.record.query.plan.cascades.matching.structure.PlannerBindings;
import com.google.common.base.Verify;
import com.google.common.collect.Sets;

import javax.annotation.Nonnull;
import java.util.Collection;
import java.util.Collections;
import java.util.Optional;
import java.util.Set;

/**
 * A rule call implementation for the {@link CascadesPlanner}. This rule call implements the logic for handling new
 * expressions as they are generated by a {@link PlannerRule#onMatch(PlannerRuleCall)} and passed to the rule call
 * via the {@link #yield(ExpressionRef)} method, which consists primarily of manipulating the implicit a memo data
 * structure defined by {@link GroupExpressionRef}s and {@link RelationalExpression}s.
 *
 * An invoked rule can in turn call {@link #yield} or {@link #yieldPartialMatch} to either declare a new resulting
 * expression or to declare a new partial match between the current expression and some candidate expression.
 *
 */
@API(API.Status.EXPERIMENTAL)
public class CascadesRuleCall implements PlannerRuleCall {
    @Nonnull
    private final PlannerRule<?> rule;
    @Nonnull
    private final GroupExpressionRef<RelationalExpression> root;
    @Nonnull
    private final AliasResolver aliasResolver;
    @Nonnull
    private final PlannerBindings bindings;
    @Nonnull
    private final PlanContext context;
    @Nonnull
    private final LinkedIdentitySet<RelationalExpression> newExpressions;
    @Nonnull
    private final LinkedIdentitySet<PartialMatch> newPartialMatches;
    @Nonnull
    private final Set<ExpressionRef<? extends RelationalExpression>> referencesWithPushedRequirements;

    public CascadesRuleCall(@Nonnull PlanContext context,
                            @Nonnull PlannerRule<?> rule,
                            @Nonnull GroupExpressionRef<RelationalExpression> root,
                            @Nonnull AliasResolver aliasResolver,
                            @Nonnull PlannerBindings bindings) {
        this.context = context;
        this.rule = rule;
        this.root = root;
        this.aliasResolver = aliasResolver;
        this.bindings = bindings;
        this.newExpressions = new LinkedIdentitySet<>();
        this.newPartialMatches = new LinkedIdentitySet<>();
        this.referencesWithPushedRequirements = Sets.newLinkedHashSet();
    }

    public void run() {
        rule.onMatch(this);
    }

    @Nonnull
    @Override
    public ExpressionRef<? extends RelationalExpression> getRoot() {
        return root;
    }

    @Nonnull
    @Override
    public AliasResolver getAliasResolver() {
        return aliasResolver;
    }

    @Override
    @Nonnull
    public PlannerBindings getBindings() {
        return bindings;
    }

    @Override
    @Nonnull
    public PlanContext getContext() {
        return context;
    }

    @Nonnull
    @Override
    public <T> Optional<T> getPlannerConstraint(@Nonnull final PlannerConstraint<T> plannerConstraint) {
        if (rule.getConstraintDependencies().contains(plannerConstraint)) {
            return root.getRequirementsMap().getConstraintOptional(plannerConstraint);
        }

        throw new RecordCoreArgumentException("rule is not dependent on requested planner requirement");
    }

    @Nonnull
    public Set<ExpressionRef<? extends RelationalExpression>> getReferencesWithPushedRequirements() {
        return referencesWithPushedRequirements;
    }

    @Override
    @SuppressWarnings({"unchecked", "PMD.CompareObjectsWithEquals"}) // deliberate use of == equality check for short-circuit condition
    public void yield(@Nonnull ExpressionRef<? extends RelationalExpression> expression) {
        if (expression == root) {
            return;
        }
        if (expression instanceof GroupExpressionRef) {
            GroupExpressionRef<RelationalExpression> groupExpressionRef = (GroupExpressionRef<RelationalExpression>) expression;
            for (RelationalExpression member : groupExpressionRef.getMembers()) {
                if (root.insert(member)) {
                    newExpressions.add(member);
                    aliasResolver.addExpression(expression, member);
                }
            }
        } else {
            throw new RecordCoreArgumentException("found a non-group reference in an expression used by the Cascades planner");
        }
    }

    @Override
    public void yieldPartialMatch(@Nonnull final AliasMap boundAliasMap,
                                  @Nonnull final MatchCandidate matchCandidate,
                                  @Nonnull final RelationalExpression queryExpression,
                                  @Nonnull final ExpressionRef<? extends RelationalExpression> candidateRef,
                                  @Nonnull final MatchInfo matchInfo) {
        final PartialMatch newPartialMatch =
                new PartialMatch(boundAliasMap,
                        matchCandidate,
                        root,
                        queryExpression,
                        candidateRef,
                        matchInfo);
        root.addPartialMatchForCandidate(matchCandidate, newPartialMatch);
        newPartialMatches.add(newPartialMatch);
    }

    @Override
    @SuppressWarnings({"PMD.CompareObjectsWithEquals"}) // deliberate use of id equality check for short-circuit condition
    public <T> void pushConstraint(@Nonnull final ExpressionRef<? extends RelationalExpression> reference,
                                   @Nonnull final PlannerConstraint<T> plannerConstraint,
                                   @Nonnull final T requirement) {
        Verify.verify(root != reference);
        final ConstraintsMap requirementsMap = reference.getRequirementsMap();
        if (requirementsMap.pushProperty(plannerConstraint, requirement).isPresent()) {
            referencesWithPushedRequirements.add(reference);
        }
    }

    @Override
    public <U extends RelationalExpression> ExpressionRef<U> ref(U expression) {
        return GroupExpressionRef.of(expression);
    }

    @Nonnull
    public Collection<RelationalExpression> getNewExpressions() {
        return Collections.unmodifiableCollection(newExpressions);
    }

    @Nonnull
    public Set<PartialMatch> getNewPartialMatches() {
        return newPartialMatches;
    }
}
