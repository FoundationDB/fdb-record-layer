/*
 * CascadesRuleCall.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2019 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.record.query.plan.cascades;

import com.apple.foundationdb.annotation.API;
import com.apple.foundationdb.record.EvaluationContext;
import com.apple.foundationdb.record.RecordCoreException;
import com.apple.foundationdb.record.query.plan.cascades.Quantifiers.AliasResolver;
import com.apple.foundationdb.record.query.plan.cascades.debug.Debugger;
import com.apple.foundationdb.record.query.plan.cascades.expressions.RelationalExpression;
import com.apple.foundationdb.record.query.plan.cascades.matching.structure.PlannerBindings;
import com.apple.foundationdb.record.query.plan.plans.RecordQueryPlan;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.common.base.Verify;
import com.google.common.collect.ImmutableList;

import javax.annotation.Nonnull;
import java.util.Arrays;
import java.util.Collection;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

/**
 * A rule call implementation for the {@link CascadesPlanner}. This rule call implements the logic for handling new
 * expressions as they are generated by a {@link CascadesRule#onMatch(CascadesRuleCall)} and passed to the rule call
 * via the {@link PlannerRuleCall#yield(Object)} method, which consists primarily of manipulating the implicit a memo data
 * structure defined by {@link GroupExpressionRef}s and {@link RelationalExpression}s.
 * <br>
 * An invoked rule can in turn call {@link #yield} or {@link #yieldPartialMatch} to either declare a new resulting
 * expression or to declare a new partial match between the current expression and some candidate expression.
 *
 */
@API(API.Status.EXPERIMENTAL)
public abstract class CascadesRuleCall implements PlannerRuleCall<ExpressionRef<? extends RelationalExpression>>, Memoizer {
    @Nonnull
    private final CascadesRule<?> rule;
    @Nonnull
    private final GroupExpressionRef<RelationalExpression> root;
    @Nonnull
    private final ExpressionRefTraversal traversal;
    @Nonnull
    private final PlannerBindings bindings;
    @Nonnull
    private final PlanContext context;
    @Nonnull
    private final EvaluationContext evaluationContext;

    public CascadesRuleCall(@Nonnull final CascadesRule<?> rule,
                            @Nonnull final GroupExpressionRef<RelationalExpression> root,
                            @Nonnull final ExpressionRefTraversal traversal,
                            @Nonnull final PlannerBindings bindings,
                            @Nonnull final PlanContext context,
                            @Nonnull final EvaluationContext evaluationContext) {
        this.rule = rule;
        this.root = root;
        this.traversal = traversal;
        this.bindings = bindings;
        this.context = context;
        this.evaluationContext = evaluationContext;
    }

    @Nonnull
    public CascadesRule<?> getRule() {
        return rule;
    }

    @Nonnull
    public GroupExpressionRef<RelationalExpression> getRoot() {
        return root;
    }

    @Nonnull
    public ExpressionRefTraversal getTraversal() {
        return traversal;
    }

    @Override
    @Nonnull
    public PlannerBindings getBindings() {
        return bindings;
    }

    @Nonnull
    public AliasResolver newAliasResolver() {
        return new AliasResolver(getTraversal());
    }

    /**
     * Get the planning context with metadata that might be relevant to the planner, such as the list of available
     * indexes.
     *
     * @return a {@link PlanContext} object with various metadata that could affect planning
     */
    @Nonnull
    public PlanContext getContext() {
        return context;
    }

    @Nonnull
    public EvaluationContext getEvaluationContext() {
        return evaluationContext;
    }

    @Nonnull
    public abstract <T> Optional<T> getPlannerConstraint(@Nonnull final PlannerConstraint<T> plannerConstraint);

    /**
     * Run the transformation.
     */
    public abstract void run();

    public abstract void yield(@Nonnull Set<? extends RelationalExpression> expressions);

    public abstract void yield(@Nonnull RelationalExpression expression);

    /**
     * Notify the planner's data structures that a new partial match has been produced by the rule. This method may be
     * called zero or more times by the rule's <code>onMatch()</code> method.
     *
     * @param boundAliasMap the alias map of bound correlated identifiers between query and candidate
     * @param matchCandidate the match candidate
     * @param queryExpression the query expression
     * @param candidateRef the matching reference on the candidate side
     * @param matchInfo an auxiliary structure to keep additional information about the match
     */
    public abstract void yieldPartialMatch(@Nonnull final AliasMap boundAliasMap,
                                           @Nonnull final MatchCandidate matchCandidate,
                                           @Nonnull final RelationalExpression queryExpression,
                                           @Nonnull final ExpressionRef<? extends RelationalExpression> candidateRef,
                                           @Nonnull final MatchInfo matchInfo);

    public abstract <T> void pushConstraint(@Nonnull final ExpressionRef<? extends RelationalExpression> reference,
                                            @Nonnull final PlannerConstraint<T> plannerConstraint,
                                            @Nonnull final T requirement);

    protected void verifyMemoized(@Nonnull RelationalExpression expression) {
        for (final var quantifier : expression.getQuantifiers()) {
            final var rangesOver = quantifier.getRangesOver();
            Verify.verify(getTraversal().getRefs().contains(rangesOver));
        }
    }

    @Nonnull
    @Override
    @SuppressWarnings("PMD.CompareObjectsWithEquals")
    public ExpressionRef<? extends RelationalExpression> memoizeExpression(@Nonnull final RelationalExpression expression) {
        if (expression.getQuantifiers().isEmpty()) {
            return memoizeLeafExpression(expression);
        }

        Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.BEGIN)));
        try {
            Preconditions.checkArgument(!(expression instanceof RecordQueryPlan));

            final var referencePathsList =
                    expression.getQuantifiers()
                            .stream()
                            .map(Quantifier::getRangesOver)
                            .map(getTraversal()::getParentRefPaths)
                            .collect(ImmutableList.toImmutableList());

            final var expressionToReferenceMap = new LinkedIdentityMap<RelationalExpression, ExpressionRef<? extends RelationalExpression>>();
            referencePathsList.stream()
                    .flatMap(Collection::stream)
                    .forEach(referencePath -> {
                        final var referencingExpression = referencePath.getExpression();
                        if (expressionToReferenceMap.containsKey(referencingExpression)) {
                            if (expressionToReferenceMap.get(referencingExpression) != referencePath.getReference()) {
                                throw new RecordCoreException("expression used in multiple references");
                            }
                        } else {
                            expressionToReferenceMap.put(referencePath.getExpression(), referencePath.getReference());
                        }
                    });

            final var referencingExpressions =
                    referencePathsList.stream()
                            .map(referencePaths -> referencePaths.stream().map(ExpressionRefTraversal.ReferencePath::getExpression).collect(LinkedIdentitySet.toLinkedIdentitySet()))
                            .collect(ImmutableList.toImmutableList());

            final var referencingExpressionsIterator = referencingExpressions.iterator();
            final var commonReferencingExpressions = new LinkedIdentitySet<>(referencingExpressionsIterator.next());
            while (referencingExpressionsIterator.hasNext()) {
                commonReferencingExpressions.retainAll(referencingExpressionsIterator.next());
            }

            for (final var commonReferencingExpression : commonReferencingExpressions) {
                if (GroupExpressionRef.containsInMember(commonReferencingExpression, expression)) {
                    Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.REUSED)));
                    final var reference = expressionToReferenceMap.get(commonReferencingExpression);
                    Verify.verifyNotNull(reference);
                    Verify.verify(reference != this.getRoot());
                    return reference;
                }
            }
            Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.NEW)));
            final var newRef = GroupExpressionRef.of(expression);
            getTraversal().addExpression(newRef, expression);
            return newRef;
        } finally {
            Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.END)));
        }
    }

    @Nonnull
    @Override
    public ExpressionRef<? extends RelationalExpression> memoizeLeafExpression(@Nonnull final RelationalExpression expression) {
        Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.BEGIN)));
        try {
            Preconditions.checkArgument(!(expression instanceof RecordQueryPlan));
            Preconditions.checkArgument(expression.getQuantifiers().isEmpty());

            final var leafRefs = getTraversal().getLeafReferences();

            for (final var leafRef : leafRefs) {
                for (final var member : leafRef.getMembers()) {
                    if (GroupExpressionRef.containsInMember(expression, member)) {
                        Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.REUSED)));
                        return leafRef;
                    }
                }
            }
            Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.NEW)));
            final var newRef = GroupExpressionRef.of(expression);
            getTraversal().addExpression(newRef, expression);
            return newRef;
        } finally {
            Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.END)));
        }
    }

    @Nonnull
    @Override
    public ExpressionRef<? extends RelationalExpression> memoizeMemberPlans(@Nonnull final ExpressionRef<? extends RelationalExpression> reference,
                                                                            @Nonnull final Collection<? extends RecordQueryPlan> plans) {
        return memoizeExpressionsExactly(plans, reference::referenceFromMembers);
    }

    @Nonnull
    @Override
    public ExpressionRef<? extends RecordQueryPlan> memoizePlans(@Nonnull RecordQueryPlan... plans) {
        return memoizePlans(Arrays.asList(plans));
    }

    @SuppressWarnings("unchecked")
    @Nonnull
    @Override
    public ExpressionRef<? extends RecordQueryPlan> memoizePlans(@Nonnull final Collection<? extends RecordQueryPlan> plans) {
        return (ExpressionRef<? extends RecordQueryPlan>)memoizeExpressionsExactly(plans, GroupExpressionRef::from);
    }

    @Nonnull
    @Override
    public ExpressionRef<? extends RelationalExpression> memoizeReference(@Nonnull final ExpressionRef<? extends RelationalExpression> reference) {
        return memoizeExpressionsExactly(reference.getMembers(), members -> reference);
    }

    @Nonnull
    private ExpressionRef<? extends RelationalExpression> memoizeExpressionsExactly(@Nonnull final Collection<? extends RelationalExpression> expressions,
                                                                                    @Nonnull final Function<Set<? extends RelationalExpression>, ExpressionRef<? extends RelationalExpression>> referenceCreator) {
        Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.BEGIN)));
        try {
            final var expressionSet = new LinkedIdentitySet<>(expressions);

            if (expressionSet.size() == 1) {
                final Optional<ExpressionRef<? extends RelationalExpression>> memoizedRefMaybe = findExpressionsInMemo(expressionSet);
                if (memoizedRefMaybe.isPresent()) {
                    Debugger.withDebugger(debugger ->
                            expressionSet.forEach(plan -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.REUSED))));
                    return memoizedRefMaybe.get();
                }
            }

            final var newRef = referenceCreator.apply(expressionSet);
            for (final var plan : expressionSet) {
                Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.NEW)));
                getTraversal().addExpression(newRef, plan);
            }
            return newRef;
        } finally {
            Debugger.withDebugger(debugger -> debugger.onEvent(new Debugger.InsertIntoMemoEvent(Debugger.Location.END)));
        }
    }

    @Nonnull
    private Optional<ExpressionRef<? extends RelationalExpression>> findExpressionsInMemo(final LinkedIdentitySet<? extends RelationalExpression> planSet) {
        final var planIterator = planSet.iterator();
        Verify.verify(planIterator.hasNext());
        final var refsContainingAllPlans = new LinkedIdentitySet<>(getTraversal().getRefsContaining(planIterator.next()));
        while (planIterator.hasNext()) {
            final var currentRefsContainingPlan = getTraversal().getRefsContaining(planIterator.next());
            refsContainingAllPlans.retainAll(currentRefsContainingPlan);
        }

        //
        // There should only at most be one exact match which is the ref that contains exactly all plans and nothing else.
        //
        return refsContainingAllPlans.stream()
                .filter(refContainingAllPlans -> refContainingAllPlans.getMembers().size() == planSet.size())
                .findFirst();
    }

    @Nonnull
    @Override
    public ReferenceBuilder memoizeExpressionBuilder(@Nonnull final RelationalExpression expression) {
        return new ReferenceBuilder() {
            @Nonnull
            @Override
            public ExpressionRef<? extends RelationalExpression> reference() {
                return memoizeExpression(expression);
            }

            @Nonnull
            @Override
            public Set<? extends RelationalExpression> members() {
                return LinkedIdentitySet.of(expression);
            }
        };
    }

    @Nonnull
    @Override
    public ReferenceBuilder memoizeMemberPlansBuilder(@Nonnull final ExpressionRef<? extends RelationalExpression> reference,
                                                      @Nonnull final Collection<? extends RecordQueryPlan> plans) {
        return memoizeExpressionsBuilder(plans, reference::referenceFromMembers);
    }

    @Nonnull
    @Override
    public ReferenceBuilder memoizePlansBuilder(@Nonnull final RecordQueryPlan... plans) {
        return memoizePlansBuilder(Arrays.asList(plans));
    }

    @Nonnull
    @Override
    public ReferenceBuilder memoizePlansBuilder(@Nonnull final Collection<? extends RecordQueryPlan> plans) {
        return memoizeExpressionsBuilder(plans, GroupExpressionRef::from);
    }

    @Nonnull
    private ReferenceBuilder memoizeExpressionsBuilder(@Nonnull final Collection<? extends RelationalExpression> expressions,
                                                       @Nonnull final Function<Set<? extends RelationalExpression>, ExpressionRef<? extends RelationalExpression>> refAction) {
        final var expressionSet = new LinkedIdentitySet<>(expressions);
        return new ReferenceBuilder() {
            @Nonnull
            @Override
            public ExpressionRef<? extends RelationalExpression> reference() {
                return memoizeExpressionsExactly(expressions, refAction);
            }

            @Nonnull
            @Override
            public Set<? extends RelationalExpression> members() {
                return expressionSet;
            }
        };
    }

    @Nonnull
    @VisibleForTesting
    public static Collection<RelationalExpression> newExpressions(final CascadesRuleCall ruleCall) {
        final Collection<RelationalExpression> newExpressions;
        if (ruleCall instanceof CascadesExplorationRuleCall) {
            newExpressions = ((CascadesExplorationRuleCall)ruleCall).getNewExpressions();
        } else if (ruleCall instanceof CascadesOptimizationRuleCall) {
            final var newExpression = ((CascadesOptimizationRuleCall)ruleCall).getNewExpression();
            newExpressions = newExpression == null ? ImmutableList.of() : ImmutableList.of(newExpression);
        } else {
            newExpressions = ImmutableList.of();
        }
        return newExpressions;
    }
}
