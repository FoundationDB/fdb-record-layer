/*
 * CascadesRuleCall.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2019 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.record.query.plan.cascades;

import com.apple.foundationdb.annotation.API;
import com.apple.foundationdb.record.EvaluationContext;
import com.apple.foundationdb.record.RecordCoreArgumentException;
import com.apple.foundationdb.record.RecordCoreException;
import com.apple.foundationdb.record.query.plan.cascades.Quantifiers.AliasResolver;
import com.apple.foundationdb.record.query.plan.cascades.debug.Debugger;
import com.apple.foundationdb.record.query.plan.cascades.expressions.RelationalExpression;
import com.apple.foundationdb.record.query.plan.cascades.matching.structure.PlannerBindings;
import com.apple.foundationdb.record.query.plan.plans.RecordQueryPlan;
import com.google.common.base.Preconditions;
import com.google.common.base.Verify;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import com.google.common.collect.Sets;

import javax.annotation.Nonnull;
import java.util.Collection;
import java.util.Collections;
import java.util.Deque;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

/**
 * A rule call implementation for the {@link CascadesPlanner}. This rule call implements the logic for handling new
 * expressions as they are generated by a {@link CascadesRule#onMatch(CascadesRuleCall)} and passed to the rule call
 * via the {@link #yieldResult(RelationalExpression)} method, which consists primarily of manipulating the implicit
 * a memo data structure defined by {@link Reference}s and {@link RelationalExpression}s.
 * <br>
 * An invoked rule can in turn call {@link #yieldResult(RelationalExpression)} or {@link #yieldPartialMatch} to
 * either declare a new resulting expression or to declare a new partial match between the current expression and some
 * candidate expression.
 */
@API(API.Status.EXPERIMENTAL)
public class CascadesRuleCall implements PlannerRuleCall<RelationalExpression>, Memoizer {
    @Nonnull
    private final PlannerPhase plannerPhase;
    @Nonnull
    private final CascadesRule<?> rule;
    @Nonnull
    private final Reference root;
    @Nonnull
    private final Traversal traversal;
    @Nonnull
    private final Deque<CascadesPlanner.Task> taskStack;
    @Nonnull
    private final PlannerBindings bindings;
    @Nonnull
    private final PlanContext context;
    @Nonnull
    private final LinkedIdentitySet<RelationalExpression> newExploratoryExpressions;
    @Nonnull
    private final LinkedIdentitySet<RelationalExpression> newFinalExpressions;
    @Nonnull
    private final LinkedIdentitySet<PartialMatch> newPartialMatches;
    @Nonnull
    private final Set<Reference> referencesWithPushedRequirements;
    @Nonnull
    private final EvaluationContext evaluationContext;

    public CascadesRuleCall(@Nonnull final PlannerPhase plannerPhase,
                            @Nonnull final PlanContext context,
                            @Nonnull final CascadesRule<?> rule,
                            @Nonnull final Reference root,
                            @Nonnull final Traversal traversal,
                            @Nonnull final Deque<CascadesPlanner.Task> taskStack,
                            @Nonnull final PlannerBindings bindings,
                            @Nonnull final EvaluationContext evaluationContext) {
        this.plannerPhase = plannerPhase;
        this.context = context;
        this.rule = rule;
        this.root = root;
        this.traversal = traversal;
        this.taskStack = taskStack;
        this.bindings = bindings;
        this.newExploratoryExpressions = new LinkedIdentitySet<>();
        this.newFinalExpressions = new LinkedIdentitySet<>();
        this.newPartialMatches = new LinkedIdentitySet<>();
        this.referencesWithPushedRequirements = Sets.newLinkedHashSet();
        this.evaluationContext = evaluationContext;
    }

    public void run() {
        rule.onMatch(this);
    }

    @Nonnull
    public PlannerPhase getPlannerPhase() {
        return plannerPhase;
    }

    @Nonnull
    public Reference getRoot() {
        return root;
    }

    @Nonnull
    public Traversal getTraversal() {
        return traversal;
    }

    @Nonnull
    public AliasResolver newAliasResolver() {
        return new AliasResolver(traversal);
    }

    @Override
    @Nonnull
    public PlannerBindings getBindings() {
        return bindings;
    }

    /**
     * Get the planning context with metadata that might be relevant to the planner, such as the list of available
     * match candidates.
     *
     * @return a {@link PlanContext} object with various metadata that could affect planning
     */
    @Nonnull
    public PlanContext getContext() {
        return context;
    }

    @Nonnull
    public <T> Optional<T> getPlannerConstraint(@Nonnull final PlannerConstraint<T> plannerConstraint) {
        if (rule.getConstraintDependencies().contains(plannerConstraint)) {
            return root.getConstraintsMap().getConstraintOptional(plannerConstraint);
        }

        throw new RecordCoreArgumentException("rule is not dependent on requested planner requirement");
    }

    @Nonnull
    public Set<Reference> getReferencesWithPushedRequirements() {
        return referencesWithPushedRequirements;
    }


    public void yieldExploratoryExpressions(@Nonnull final Set<? extends RelationalExpression> expressions) {
        for (final var expression : expressions) {
            yieldExploratoryExpression(expression);
        }
    }

    public void yieldPlans(@Nonnull final Set<? extends RecordQueryPlan> plans) {
        for (final var plan : plans) {
            yieldPlan(plan);
        }
    }

    public void yieldFinalExpressions(@Nonnull final Set<? extends RelationalExpression> expressions) {
        for (final var expression : expressions) {
            yieldFinalExpression(expression);
        }
    }

    public void yieldPlannedExpressions(@Nonnull final Set<? extends RelationalExpression> expressions) {
        Verify.verify(getPlannerPhase() == PlannerPhase.PLANNING);
        for (final var expression : expressions) {
            yieldPlannedExpression(expression);
        }
    }

    @Override
    public void yieldResult(@Nonnull final RelationalExpression expression) {
        yieldExploratoryExpression(expression);
    }

    public void yieldPlannedExpression(@Nonnull final RelationalExpression expression) {
        Verify.verify(getPlannerPhase() == PlannerPhase.PLANNING);
        if (expression instanceof RecordQueryPlan) {
            yieldPlan((RecordQueryPlan)expression);
        } else {
            yieldExploratoryExpression(expression);
        }
    }

    public void yieldExploratoryExpression(@Nonnull final RelationalExpression expression) {
        yieldExpression(expression, false);
    }

    public void yieldPlan(@Nonnull final RecordQueryPlan plan) {
        yieldFinalExpression(plan);
    }

    public void yieldFinalExpression(@Nonnull final RelationalExpression expression) {
        yieldExpression(expression, true);
    }

    private void yieldExpression(@Nonnull final RelationalExpression expression, final boolean isFinal) {
        verifyChildrenMemoized(expression);
        if (root.insert(expression, isFinal)) {
            if (isFinal) {
                newFinalExpressions.add(expression);
            } else {
                newExploratoryExpressions.add(expression);
            }
            traversal.addExpression(root, expression);
        }
    }

    private void verifyChildrenMemoized(@Nonnull RelationalExpression expression) {
        for (final var quantifier : expression.getQuantifiers()) {
            final var rangesOver = quantifier.getRangesOver();
            Verify.verify(traversal.getRefs().contains(rangesOver));
        }
    }

    /**
     * Notify the planner's data structures that a new partial match has been produced by the rule. This method may be
     * called zero or more times by the rule's <code>onMatch()</code> method.
     *
     * @param boundAliasMap the alias map of bound correlated identifiers between query and candidate
     * @param matchCandidate the match candidate
     * @param queryExpression the query expression
     * @param candidateRef the matching reference on the candidate side
     * @param matchInfo an auxiliary structure to keep additional information about the match
     */
    public void yieldPartialMatch(@Nonnull final AliasMap boundAliasMap,
                                  @Nonnull final MatchCandidate matchCandidate,
                                  @Nonnull final RelationalExpression queryExpression,
                                  @Nonnull final Reference candidateRef,
                                  @Nonnull final MatchInfo matchInfo) {
        final PartialMatch newPartialMatch =
                new PartialMatch(boundAliasMap,
                        matchCandidate,
                        root,
                        queryExpression,
                        candidateRef,
                        matchInfo);
        root.addPartialMatchForCandidate(matchCandidate, newPartialMatch);
        newPartialMatches.add(newPartialMatch);
    }

    @SuppressWarnings({"PMD.CompareObjectsWithEquals"}) // deliberate use of id equality check for short-circuit condition
    public <T> void pushConstraint(@Nonnull final Reference reference,
                                   @Nonnull final PlannerConstraint<T> plannerConstraint,
                                   @Nonnull final T requirement) {
        Verify.verify(root != reference);
        final ConstraintsMap requirementsMap = reference.getConstraintsMap();
        if (requirementsMap.pushProperty(plannerConstraint, requirement).isPresent()) {
            referencesWithPushedRequirements.add(reference);
        }
    }

    @Nonnull
    public Collection<RelationalExpression> getNewExploratoryExpressions() {
        return Collections.unmodifiableCollection(newExploratoryExpressions);
    }

    @Nonnull
    public Collection<RelationalExpression> getNewFinalExpressions() {
        return Collections.unmodifiableCollection(newFinalExpressions);
    }

    @Nonnull
    public Set<PartialMatch> getNewPartialMatches() {
        return newPartialMatches;
    }

    @Nonnull
    public EvaluationContext getEvaluationContext() {
        return evaluationContext;
    }

    @Nonnull
    @Override
    @SuppressWarnings("PMD.CompareObjectsWithEquals")
    public Reference memoizeExploratoryExpression(@Nonnull final RelationalExpression expression) {
        if (expression.getQuantifiers().isEmpty()) {
            return memoizeLeafExpression(expression);
        }
        Debugger.withDebugger(debugger -> debugger.onEvent(Debugger.InsertIntoMemoEvent.begin()));
        try {
            Preconditions.checkArgument(!(expression instanceof RecordQueryPlan));

            final var referencePathsList =
                    expression.getQuantifiers()
                            .stream()
                            .map(Quantifier::getRangesOver)
                            .map(traversal::getParentRefPaths)
                            .collect(ImmutableList.toImmutableList());

            final var expressionToReferenceMap = new LinkedIdentityMap<RelationalExpression, Reference>();
            referencePathsList.stream()
                    .flatMap(Collection::stream)
                    .forEach(referencePath -> {
                        final var referencingExpression = referencePath.getExpression();
                        if (expressionToReferenceMap.containsKey(referencingExpression)) {
                            if (expressionToReferenceMap.get(referencingExpression) != referencePath.getReference()) {
                                throw new RecordCoreException("expression used in multiple references");
                            }
                        } else {
                            expressionToReferenceMap.put(referencePath.getExpression(), referencePath.getReference());
                        }
                    });

            final var referencingExpressions =
                    referencePathsList.stream()
                            .map(referencePaths ->
                                    referencePaths.stream()
                                            .map(Traversal.ReferencePath::getExpression)
                                            .collect(LinkedIdentitySet.toLinkedIdentitySet()))
                            .collect(ImmutableList.toImmutableList());

            final var referencingExpressionsIterator = referencingExpressions.iterator();
            final var commonReferencingExpressions = new LinkedIdentitySet<>(referencingExpressionsIterator.next());
            while (referencingExpressionsIterator.hasNext()) {
                commonReferencingExpressions.retainAll(referencingExpressionsIterator.next());
            }

            commonReferencingExpressions.removeIf(commonReferencingExpression ->
                    !Reference.isMemoizedExpression(expression, commonReferencingExpression));

            if (!commonReferencingExpressions.isEmpty()) {
                Debugger.withDebugger(debugger ->
                        debugger.onEvent(Debugger.InsertIntoMemoEvent.reusedExpWithReferences(expression,
                                commonReferencingExpressions.stream()
                                        .map(expressionToReferenceMap::get)
                                        .collect(ImmutableList.toImmutableList()))));
                final var reference =
                        expressionToReferenceMap.get(Objects.requireNonNull(
                                Iterables.getFirst(commonReferencingExpressions, null)));
                Verify.verifyNotNull(reference);
                Verify.verify(reference != this.root);
                return reference;
            }

            Debugger.withDebugger(debugger -> debugger.onEvent(Debugger.InsertIntoMemoEvent.newExp(expression)));

            final var newRef = Reference.ofExploratoryExpression(plannerPhase.getTargetStage(), expression);
            traversal.addExpression(newRef, expression);
            return newRef;
        } finally {
            Debugger.withDebugger(debugger -> debugger.onEvent(Debugger.InsertIntoMemoEvent.end()));
        }
    }

    @Nonnull
    private Reference memoizeLeafExpression(@Nonnull final RelationalExpression expression) {
        Debugger.withDebugger(debugger -> debugger.onEvent(Debugger.InsertIntoMemoEvent.begin()));
        try {
            Preconditions.checkArgument(!(expression instanceof RecordQueryPlan));
            Preconditions.checkArgument(expression.getQuantifiers().isEmpty());

            final var leafRefs = traversal.getLeafReferences();

            for (final var leafRef : leafRefs) {
                for (final var member : leafRef.getExploratoryExpressions()) {
                    if (Reference.isMemoizedExpression(expression, member)) {
                        Debugger.withDebugger(debugger -> debugger.onEvent(Debugger.InsertIntoMemoEvent.reusedExp(expression)));
                        return leafRef;
                    }
                }
            }
            Debugger.withDebugger(debugger -> debugger.onEvent(Debugger.InsertIntoMemoEvent.newExp(expression)));
            final var newRef = Reference.ofExploratoryExpression(plannerPhase.getTargetStage(), expression);
            traversal.addExpression(newRef, expression);
            return newRef;
        } finally {
            Debugger.withDebugger(debugger -> debugger.onEvent(Debugger.InsertIntoMemoEvent.end()));
        }
    }

    @Nonnull
    @Override
    public Reference memoizeFinalExpression(@Nonnull final RelationalExpression expression) {
        return memoizeFinalExpressionsExactly(ImmutableList.of(expression),
                expressions ->
                        Reference.ofFinalExpressions(getPlannerPhase().getTargetStage(), expressions));
    }

    @Nonnull
    @Override
    public Reference memoizePlannedExpression(@Nonnull final RelationalExpression expression) {
        Verify.verify(getPlannerPhase() == PlannerPhase.PLANNING);
        if (expression instanceof RecordQueryPlan) {
            return memoizePlan((RecordQueryPlan)expression);
        }
        return memoizeExploratoryExpression(expression);
    }

    @Nonnull
    @Override
    public Reference memoizeMemberPlans(@Nonnull final Reference reference,
                                        @Nonnull final Collection<? extends RecordQueryPlan> plans) {
        return memoizeFinalExpressionsExactly(plans, reference::newReferenceFromFinalMembers);
    }

    @Nonnull
    @Override
    public Reference memoizePlan(@Nonnull final RecordQueryPlan plan) {
        return memoizeFinalExpression(plan);
    }

    @Nonnull
    private Reference memoizeFinalExpressionsExactly(@Nonnull final Collection<? extends RelationalExpression> expressions,
                                                     @Nonnull Function<Set<? extends RelationalExpression>, Reference> referenceCreator) {
        Debugger.withDebugger(debugger -> expressions.forEach(
                expression -> debugger.onEvent(Debugger.InsertIntoMemoEvent.begin())));
        try {
            final var expressionSet = new LinkedIdentitySet<>(expressions);
            final var newRef = referenceCreator.apply(expressionSet);
            for (final var plan : expressionSet) {
                Debugger.withDebugger(debugger -> expressions.forEach(
                        expression -> debugger.onEvent(Debugger.InsertIntoMemoEvent.newExp(expression))));
                traversal.addExpression(newRef, plan);
            }
            return newRef;
        } finally {
            Debugger.withDebugger(debugger -> debugger.onEvent(Debugger.InsertIntoMemoEvent.end()));
        }
    }

    @Nonnull
    @Override
    public ReferenceBuilder memoizeExploratoryExpressionBuilder(@Nonnull final RelationalExpression expression) {
        return new ReferenceBuilder() {
            @Nonnull
            @Override
            public Reference reference() {
                return memoizeExploratoryExpression(expression);
            }

            @Nonnull
            @Override
            public Set<? extends RelationalExpression> members() {
                return LinkedIdentitySet.of(expression);
            }
        };
    }

    @Nonnull
    public ReferenceBuilder memoizeFinalExpressionsBuilder(@Nonnull final Collection<? extends RelationalExpression> expressions) {
        return memoizeFinalExpressionsBuilder(expressions,
                e -> Reference.ofFinalExpressions(getPlannerPhase().getTargetStage(), e));
    }

    @Nonnull
    private ReferenceBuilder memoizeFinalExpressionsBuilder(@Nonnull final Collection<? extends RelationalExpression> expressions,
                                                            @Nonnull final Function<Set<? extends RelationalExpression>, Reference> refAction) {
        final var expressionSet = new LinkedIdentitySet<>(expressions);
        return new ReferenceBuilder() {
            @Nonnull
            @Override
            public Reference reference() {
                return memoizeFinalExpressionsExactly(expressions, refAction);
            }

            @Nonnull
            @Override
            public Set<? extends RelationalExpression> members() {
                return expressionSet;
            }
        };
    }

    @Nonnull
    @Override
    public ReferenceOfPlansBuilder memoizeMemberPlansBuilder(@Nonnull final Reference reference,
                                                             @Nonnull final Collection<? extends RecordQueryPlan> plans) {
        return memoizePlansBuilder(plans, reference::newReferenceFromFinalMembers);
    }

    @Nonnull
    @Override
    public ReferenceOfPlansBuilder memoizePlanBuilder(@Nonnull final RecordQueryPlan plan) {
        return memoizePlansBuilder(ImmutableList.of(plan));
    }

    @Nonnull
    @Override
    public ReferenceOfPlansBuilder memoizePlansBuilder(@Nonnull final Collection<? extends RecordQueryPlan> plans) {
        return memoizePlansBuilder(plans,
                expressions ->
                        Reference.ofFinalExpressions(getPlannerPhase().getTargetStage(), expressions));
    }

    @Nonnull
    private ReferenceOfPlansBuilder memoizePlansBuilder(@Nonnull final Collection<? extends RecordQueryPlan> plans,
                                                        @Nonnull final Function<Set<? extends RelationalExpression>, Reference> refAction) {
        final var expressionSet = new LinkedIdentitySet<>(plans);
        return new ReferenceOfPlansBuilder() {
            @Nonnull
            @Override
            public Reference reference() {
                return memoizeFinalExpressionsExactly(plans, refAction);
            }

            @Nonnull
            @Override
            public Set<? extends RecordQueryPlan> members() {
                return expressionSet;
            }
        };
    }

    public void emitEvent(@Nonnull final Debugger.Location location) {
        Debugger.withDebugger(debugger ->
                debugger.onEvent(
                        new Debugger.TransformRuleCallEvent(plannerPhase, root, taskStack, location, root,
                                bindings.get(rule.getMatcher()), rule, this)));
    }
}
