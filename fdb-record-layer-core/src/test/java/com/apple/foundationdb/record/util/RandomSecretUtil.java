/*
 * RandomSecretUtil.java
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2025 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.apple.foundationdb.record.util;

import com.apple.foundationdb.record.RecordCoreException;
import com.apple.test.RandomizedTestUtils;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.GeneralSecurityException;
import java.security.spec.KeySpec;
import java.util.Random;

/**
 * Utilities for working with reproducible encryption keys in tests.
 * Instead of using a {@code KeyGenerator} with a {@code SecureRandom}, whose seeding behavior is somewhat variable,
 * use a key derivation function from password and salt generated by an ordinary {@code Random} that the caller
 * seeds with {@link RandomizedTestUtils#randomSeeds} or the like.
 */
public class RandomSecretUtil {
    private RandomSecretUtil() {
    }

    public static SecretKey randomSecretKey(Random r) {
        return randomSecretKey(r, "AES", 128);
    }

    public static SecretKey randomSecretKey(long seed) {
        return randomSecretKey(new Random(seed));
    }

    public static SecretKey randomSecretKey(Random r, String algorithm, int length) {
        try {
            final SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            final KeySpec keySpec = new PBEKeySpec(RandomUtil.randomAlphanumericString(r, 10).toCharArray(),
                    RandomUtil.randomBytes(r, 16), 8, length);
            final SecretKey key = keyFactory.generateSecret(keySpec);
            return new SecretKeySpec(key.getEncoded(), algorithm);
        } catch (GeneralSecurityException ex) {
            throw new RecordCoreException("Cannot generate secret key", ex);
        }
    }
}
