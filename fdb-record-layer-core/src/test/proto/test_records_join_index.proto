/*
 * test_records_join_index.proto
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

package com.apple.foundationdb.record.testjoinindex;

option java_package = "com.apple.foundationdb.record";
option java_outer_classname = "TestRecordsJoinIndexProto";

import "record_metadata_options.proto";
import "tuple_fields.proto";

message MySimpleRecord {
  optional int64 rec_no = 1 [(field).primary_key = true];
  optional string str_value = 2;
  optional int32 num_value = 3;
  optional int32 num_value_2 = 4;
  optional int64 other_rec_no = 5;
}

message MyOtherRecord {
  required int64 rec_no = 1 [(field).primary_key = true];
  optional int32 num_value = 2;
  optional int32 num_value_3 = 3;
}

message JoiningRecord {
  required int64 rec_no = 1 [(field).primary_key = true];
  optional int32 simple_rec_no = 2 [(field).index = {}];
  optional int64 other_rec_no = 3 [(field).index = {}];
}

message TypeA {
  required int64 rec_no = 1 [(field).primary_key = true];
  optional string str_value = 2;
  optional int64 type_b_rec_no = 3 [(field).index = {}];
}

message TypeB {
  required int64 rec_no = 1 [(field).primary_key = true];
  optional string str_value = 2;
  optional int64 type_c_rec_no = 3 [(field).index = {}];
}

message TypeC {
  required int64 rec_no = 1 [(field).primary_key = true];
  optional string str_value = 2;
  optional int64 type_a_rec_no = 3 [(field).index = {}];
}

message NestedA {
  required int64 rec_no = 1 [(field).primary_key = true];
  message Repeated {
    repeated int32 nums = 1;
  }
  repeated Repeated repeated = 2;
}

message NestedB {
  required int64 rec_no = 1 [(field).primary_key = true];
  message Repeated {
    repeated int32 nums = 1;
  }
  repeated Repeated repeated = 2;
}

message Customer {
  optional UUID uuid = 1 [(field).primary_key = true];
  optional string name = 2;
  optional string city = 3;
}

message Order {
  optional UUID uuid = 1 [(field).primary_key = true];
  optional int32 order_no = 2;
  optional UUID customer_uuid = 3;
}

message Item {
  optional UUID uuid = 1 [(field).primary_key = true];
  optional int32 item_no = 2;
  optional int32 quantity = 3;
  optional int32 total_price = 4;
  optional UUID order_uuid = 5;
}

message Header {
  optional int64 z_key = 1;
  optional string rec_id = 2;
  optional int64 int_rec_id = 3;
}

message Ref {
  optional string string_value = 1;
}

message CustomerWithHeader{
  optional Header ___header = 1;
  optional string name = 2[(field).primary_key = true];
  optional string city = 3;
}

message OrderWithHeader {
  optional Header ___header = 1;
  optional Ref custRef = 2;
  optional int32 order_no = 3[(field).primary_key = true];
  optional int32 quantity = 4;
}

message RecordTypeUnion {
  optional MySimpleRecord _MySimpleRecord = 1;
  optional MyOtherRecord _MyOtherRecord = 2;
  optional JoiningRecord _JoiningRecord = 3;
  optional TypeA _TypeA = 4;
  optional TypeB _TypeB = 5;
  optional TypeC _TypeC = 6;
  optional NestedA _NestedA = 7;
  optional NestedB _NestedB = 8;
  optional Customer _Customer = 9;
  optional Order _Order = 10;
  optional Item _Item = 11;
  optional CustomerWithHeader _CustomerWithHeader = 12;
  optional OrderWithHeader _OrderWithHeader = 13;
}
